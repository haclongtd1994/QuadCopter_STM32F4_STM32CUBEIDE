
STM32F4_QUADCOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000825c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080083f0  080083f0  000183f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080084b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000080  08008538  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  08008538  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000210de  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003586  00000000  00000000  0004118e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  00044718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00045840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000246b1  00000000  00000000  00046800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010689  00000000  00000000  0006aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ced3a  00000000  00000000  0007b53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  0014a2f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083d4 	.word	0x080083d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080083d4 	.word	0x080083d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <i2c_write_accelerometer>:
* Description  : This function write to register of slave device Accelerometer 0x53: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_write_accelerometer(uint8_t reg, uint8_t value)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2]={0};
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81bb      	strh	r3, [r7, #12]
	data[0] = reg;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, 0x53<<1, data, 2, 10);
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	230a      	movs	r3, #10
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	21a6      	movs	r1, #166	; 0xa6
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <i2c_write_accelerometer+0x38>)
 8000f12:	f003 f8ef 	bl	80040f4 <HAL_I2C_Master_Transmit>
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200008fc 	.word	0x200008fc

08000f24 <i2c_read_accelerometer>:
* Description  : This function read from register of slave device Accelerometer 0x53: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_read_accelerometer(uint8_t reg, uint8_t numberofbytes)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af04      	add	r7, sp, #16
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, 0x53<<1, reg, I2C_MEMADD_SIZE_8BIT, data_receive, numberofbytes, 100);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	b299      	uxth	r1, r3
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2264      	movs	r2, #100	; 0x64
 8000f3e:	9202      	str	r2, [sp, #8]
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <i2c_read_accelerometer+0x38>)
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	460a      	mov	r2, r1
 8000f4a:	21a6      	movs	r1, #166	; 0xa6
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <i2c_read_accelerometer+0x3c>)
 8000f4e:	f003 f9cf 	bl	80042f0 <HAL_I2C_Mem_Read>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000b0 	.word	0x200000b0
 8000f60:	200008fc 	.word	0x200008fc

08000f64 <InitialiseAccelerometer>:
* Description  : This function initialize Accelerometer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialiseAccelerometer()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	/* Turn off inactivity / activity interrupts for all axis */
	i2c_write_accelerometer(0x27, 0x0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2027      	movs	r0, #39	; 0x27
 8000f6c:	f7ff ffbc 	bl	8000ee8 <i2c_write_accelerometer>

	/* Turn off interrupts for tap detection */
	i2c_write_accelerometer(0x2A, 0x0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	202a      	movs	r0, #42	; 0x2a
 8000f74:	f7ff ffb8 	bl	8000ee8 <i2c_write_accelerometer>
	/* Select "Normal" power, this uses more power and has less noise (0x0.)
	 * Select output data rate of 100kHz (0x.A)
	 * Output data rate should match the bus frequency / sample rate. To make it
	 *   400kHz, change this value to (0x.C)
	 */
	i2c_write_accelerometer(0x2C, 0x0A);
 8000f78:	210a      	movs	r1, #10
 8000f7a:	202c      	movs	r0, #44	; 0x2c
 8000f7c:	f7ff ffb4 	bl	8000ee8 <i2c_write_accelerometer>

	/* Put the accelerometer in "measurement" mode
	 * Ensure the device will not sleep */
	i2c_write_accelerometer(0x2D, 0x08);
 8000f80:	2108      	movs	r1, #8
 8000f82:	202d      	movs	r0, #45	; 0x2d
 8000f84:	f7ff ffb0 	bl	8000ee8 <i2c_write_accelerometer>

	/* Turn off all interrupts outputs */
	i2c_write_accelerometer(0x2E, 0x0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	202e      	movs	r0, #46	; 0x2e
 8000f8c:	f7ff ffac 	bl	8000ee8 <i2c_write_accelerometer>
	/* Turn self test off.
	 * Using three wire SPI mode (i2c?).
	 * Left justify mode (most significant bit).
	 * Full resolution, full range.
	 */
	i2c_write_accelerometer(0x31, 0x4F);
 8000f90:	214f      	movs	r1, #79	; 0x4f
 8000f92:	2031      	movs	r0, #49	; 0x31
 8000f94:	f7ff ffa8 	bl	8000ee8 <i2c_write_accelerometer>

	/* Initialize the accelerometer at zero position */
	accelerometerReading.x = 0.0f;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
	accelerometerReading.y = 0.0f;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
	accelerometerReading.z = 0.0f;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
	accelerometerReading.xOffset = 0.0f;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
	accelerometerReading.yOffset = 0.0f;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
	accelerometerReading.zOffset = 0.0f;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
	accelerometerReading.readings = 0;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <InitialiseAccelerometer+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24

	isReadingAccelerometer = 0;
 8000fce:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <InitialiseAccelerometer+0x78>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200009b4 	.word	0x200009b4
 8000fdc:	200008e8 	.word	0x200008e8

08000fe0 <ReadAccelerometer>:
* Description  : This function read data and store to struct variable.
* Arguments    : None
* Return Value : None
******************************************************************************/
void ReadAccelerometer()
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
	// Check data exist or not by global variable bool isReadingAccelerometer
	if (!isReadingAccelerometer) {
 8000fe6:	4bb2      	ldr	r3, [pc, #712]	; (80012b0 <ReadAccelerometer+0x2d0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <ReadAccelerometer+0x24>
		/* kick off a new read of the accelerometer values with: \
			device ADXL345 (0x53) and pheripheral (0x32), Numbyte want read (6) */
		i2c_read_accelerometer(0x32, 6);
 8000ff4:	2106      	movs	r1, #6
 8000ff6:	2032      	movs	r0, #50	; 0x32
 8000ff8:	f7ff ff94 	bl	8000f24 <i2c_read_accelerometer>
		isReadingAccelerometer = 1;
 8000ffc:	4bac      	ldr	r3, [pc, #688]	; (80012b0 <ReadAccelerometer+0x2d0>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		return;
 8001002:	e14a      	b.n	800129a <ReadAccelerometer+0x2ba>
	}

	// done! convert the values to a reading
	uint8_t xLow = data_receive[0];
 8001004:	4bab      	ldr	r3, [pc, #684]	; (80012b4 <ReadAccelerometer+0x2d4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t xHigh = data_receive[1];
 800100c:	4ba9      	ldr	r3, [pc, #676]	; (80012b4 <ReadAccelerometer+0x2d4>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t yLow = data_receive[2];
 8001014:	4ba7      	ldr	r3, [pc, #668]	; (80012b4 <ReadAccelerometer+0x2d4>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t yHigh = data_receive[3];
 800101c:	4ba5      	ldr	r3, [pc, #660]	; (80012b4 <ReadAccelerometer+0x2d4>)
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t zLow = data_receive[4];
 8001024:	4ba3      	ldr	r3, [pc, #652]	; (80012b4 <ReadAccelerometer+0x2d4>)
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t zHigh = data_receive[5];
 800102c:	4ba1      	ldr	r3, [pc, #644]	; (80012b4 <ReadAccelerometer+0x2d4>)
 800102e:	795b      	ldrb	r3, [r3, #5]
 8001030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	int16_t rawX = (((int16_t) xHigh << 8) | xLow);
 8001034:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	853b      	strh	r3, [r7, #40]	; 0x28
	int16_t rawY = (((int16_t) yHigh << 8) | yLow);
 8001046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t rawZ = (((int16_t) zHigh << 8) | zLow);
 8001058:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	84bb      	strh	r3, [r7, #36]	; 0x24

	/* full resolution means that there is a scale of 3.9mG/LSB */
	accelerometerReading.xG = rawX * 0.0039;
 800106a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa50 	bl	8000514 <__aeabi_i2d>
 8001074:	a38a      	add	r3, pc, #552	; (adr r3, 80012a0 <ReadAccelerometer+0x2c0>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fab5 	bl	80005e8 <__aeabi_dmul>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4618      	mov	r0, r3
 8001084:	4621      	mov	r1, r4
 8001086:	f7ff fd5f 	bl	8000b48 <__aeabi_d2f>
 800108a:	4602      	mov	r2, r0
 800108c:	4b8a      	ldr	r3, [pc, #552]	; (80012b8 <ReadAccelerometer+0x2d8>)
 800108e:	60da      	str	r2, [r3, #12]
	accelerometerReading.yG = rawY * 0.0039;
 8001090:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa3d 	bl	8000514 <__aeabi_i2d>
 800109a:	a381      	add	r3, pc, #516	; (adr r3, 80012a0 <ReadAccelerometer+0x2c0>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff faa2 	bl	80005e8 <__aeabi_dmul>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	4618      	mov	r0, r3
 80010aa:	4621      	mov	r1, r4
 80010ac:	f7ff fd4c 	bl	8000b48 <__aeabi_d2f>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b81      	ldr	r3, [pc, #516]	; (80012b8 <ReadAccelerometer+0x2d8>)
 80010b4:	611a      	str	r2, [r3, #16]
	accelerometerReading.zG = rawZ * 0.0039;
 80010b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa2a 	bl	8000514 <__aeabi_i2d>
 80010c0:	a377      	add	r3, pc, #476	; (adr r3, 80012a0 <ReadAccelerometer+0x2c0>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa8f 	bl	80005e8 <__aeabi_dmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f7ff fd39 	bl	8000b48 <__aeabi_d2f>
 80010d6:	4602      	mov	r2, r0
 80010d8:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <ReadAccelerometer+0x2d8>)
 80010da:	615a      	str	r2, [r3, #20]

	float calibratedX = accelerometerReading.xG - accelerometerReading.xOffset;
 80010dc:	4b76      	ldr	r3, [pc, #472]	; (80012b8 <ReadAccelerometer+0x2d8>)
 80010de:	ed93 7a03 	vldr	s14, [r3, #12]
 80010e2:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <ReadAccelerometer+0x2d8>)
 80010e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80010e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ec:	edc7 7a08 	vstr	s15, [r7, #32]
	float calibratedY = accelerometerReading.yG - accelerometerReading.yOffset;
 80010f0:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <ReadAccelerometer+0x2d8>)
 80010f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80010f6:	4b70      	ldr	r3, [pc, #448]	; (80012b8 <ReadAccelerometer+0x2d8>)
 80010f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80010fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001100:	edc7 7a07 	vstr	s15, [r7, #28]
	float calibratedZ = accelerometerReading.zG - accelerometerReading.zOffset;
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <ReadAccelerometer+0x2d8>)
 8001106:	ed93 7a05 	vldr	s14, [r3, #20]
 800110a:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <ReadAccelerometer+0x2d8>)
 800110c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	edc7 7a06 	vstr	s15, [r7, #24]

	/* calculate the squares */
	float xSquared = calibratedX * calibratedX;
 8001118:	ed97 7a08 	vldr	s14, [r7, #32]
 800111c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001124:	edc7 7a05 	vstr	s15, [r7, #20]
	float ySquared = calibratedY * calibratedY;
 8001128:	ed97 7a07 	vldr	s14, [r7, #28]
 800112c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001134:	edc7 7a04 	vstr	s15, [r7, #16]
	float zSquared = calibratedZ * calibratedZ;
 8001138:	ed97 7a06 	vldr	s14, [r7, #24]
 800113c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001144:	edc7 7a03 	vstr	s15, [r7, #12]

	// Simulation change to degrees of X, Y. We calculation from vector of both with Z
	float xInDegrees = atan(calibratedY / sqrt(xSquared + zSquared)) * 180.0f / 3.141592f;
 8001148:	69f8      	ldr	r0, [r7, #28]
 800114a:	f7ff f9f5 	bl	8000538 <__aeabi_f2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	ed97 7a05 	vldr	s14, [r7, #20]
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff f9e9 	bl	8000538 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	ec43 2b10 	vmov	d0, r2, r3
 800116e:	f007 f825 	bl	80081bc <sqrt>
 8001172:	ec53 2b10 	vmov	r2, r3, d0
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff fb5f 	bl	800083c <__aeabi_ddiv>
 800117e:	4603      	mov	r3, r0
 8001180:	460c      	mov	r4, r1
 8001182:	ec44 3b17 	vmov	d7, r3, r4
 8001186:	eeb0 0a47 	vmov.f32	s0, s14
 800118a:	eef0 0a67 	vmov.f32	s1, s15
 800118e:	f006 fe6b 	bl	8007e68 <atan>
 8001192:	ec51 0b10 	vmov	r0, r1, d0
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <ReadAccelerometer+0x2dc>)
 800119c:	f7ff fa24 	bl	80005e8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	a33f      	add	r3, pc, #252	; (adr r3, 80012a8 <ReadAccelerometer+0x2c8>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fb45 	bl	800083c <__aeabi_ddiv>
 80011b2:	4603      	mov	r3, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	4618      	mov	r0, r3
 80011b8:	4621      	mov	r1, r4
 80011ba:	f7ff fcc5 	bl	8000b48 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	60bb      	str	r3, [r7, #8]
	float yInDegrees = atan(calibratedX / sqrt(ySquared + zSquared)) * 180.0f / 3.141592f;
 80011c2:	6a38      	ldr	r0, [r7, #32]
 80011c4:	f7ff f9b8 	bl	8000538 <__aeabi_f2d>
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
 80011cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80011d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f9ac 	bl	8000538 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ec43 2b10 	vmov	d0, r2, r3
 80011e8:	f006 ffe8 	bl	80081bc <sqrt>
 80011ec:	ec53 2b10 	vmov	r2, r3, d0
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f7ff fb22 	bl	800083c <__aeabi_ddiv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	ec44 3b17 	vmov	d7, r3, r4
 8001200:	eeb0 0a47 	vmov.f32	s0, s14
 8001204:	eef0 0a67 	vmov.f32	s1, s15
 8001208:	f006 fe2e 	bl	8007e68 <atan>
 800120c:	ec51 0b10 	vmov	r0, r1, d0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <ReadAccelerometer+0x2dc>)
 8001216:	f7ff f9e7 	bl	80005e8 <__aeabi_dmul>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	4618      	mov	r0, r3
 8001220:	4621      	mov	r1, r4
 8001222:	a321      	add	r3, pc, #132	; (adr r3, 80012a8 <ReadAccelerometer+0x2c8>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fb08 	bl	800083c <__aeabi_ddiv>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	f7ff fc88 	bl	8000b48 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	607b      	str	r3, [r7, #4]
	float zInDegress = 0.0f; // for now.
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	603b      	str	r3, [r7, #0]

	if (!isnan(xInDegrees) && !isnan(yInDegrees) && !isnan(zInDegress)) {
 8001242:	ed97 7a02 	vldr	s14, [r7, #8]
 8001246:	edd7 7a02 	vldr	s15, [r7, #8]
 800124a:	eeb4 7a67 	vcmp.f32	s14, s15
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	d61f      	bvs.n	8001294 <ReadAccelerometer+0x2b4>
 8001254:	ed97 7a01 	vldr	s14, [r7, #4]
 8001258:	edd7 7a01 	vldr	s15, [r7, #4]
 800125c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	d616      	bvs.n	8001294 <ReadAccelerometer+0x2b4>
 8001266:	ed97 7a00 	vldr	s14, [r7]
 800126a:	edd7 7a00 	vldr	s15, [r7]
 800126e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d60d      	bvs.n	8001294 <ReadAccelerometer+0x2b4>
		accelerometerReading.x = xInDegrees;
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <ReadAccelerometer+0x2d8>)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	6013      	str	r3, [r2, #0]
		accelerometerReading.y = yInDegrees;
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <ReadAccelerometer+0x2d8>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6053      	str	r3, [r2, #4]
		accelerometerReading.z = zInDegress;
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <ReadAccelerometer+0x2d8>)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6093      	str	r3, [r2, #8]
		accelerometerReading.readings++;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <ReadAccelerometer+0x2d8>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	3301      	adds	r3, #1
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <ReadAccelerometer+0x2d8>)
 8001292:	6253      	str	r3, [r2, #36]	; 0x24
	}

	isReadingAccelerometer = 0;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <ReadAccelerometer+0x2d0>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	8e8a71de 	.word	0x8e8a71de
 80012a4:	3f6ff2e4 	.word	0x3f6ff2e4
 80012a8:	00000000 	.word	0x00000000
 80012ac:	400921fb 	.word	0x400921fb
 80012b0:	200008e8 	.word	0x200008e8
 80012b4:	200000b0 	.word	0x200000b0
 80012b8:	200009b4 	.word	0x200009b4
 80012bc:	40668000 	.word	0x40668000

080012c0 <WriteCharacterToBuffer>:
	while(*letter) {
		RingBufferPut(&metricsRingBuffer, *letter++);
	}
}

void WriteCharacterToBuffer(uint16_t value) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	RingBufferPut(&metricsRingBuffer, value);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <WriteCharacterToBuffer+0x1c>)
 80012d0:	f000 fe9f 	bl	8002012 <RingBufferPut>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000dc 	.word	0x200000dc

080012e0 <numDigits>:
uint8_t numDigits(uint32_t number)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t digits = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
	while (number) {
 80012ec:	e008      	b.n	8001300 <numDigits+0x20>
			number /= 10;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a08      	ldr	r2, [pc, #32]	; (8001314 <numDigits+0x34>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	607b      	str	r3, [r7, #4]
			digits++;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
	while (number) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f3      	bne.n	80012ee <numDigits+0xe>
	}
	return digits;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	cccccccd 	.word	0xcccccccd

08001318 <WriteCharacterToBufferNum>:

void WriteCharacterToBufferNum(uint32_t value) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b09e      	sub	sp, #120	; 0x78
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	int count=0;
 8001320:	2300      	movs	r3, #0
 8001322:	677b      	str	r3, [r7, #116]	; 0x74
	int digits = numDigits(value);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffdb 	bl	80012e0 <numDigits>
 800132a:	4603      	mov	r3, r0
 800132c:	673b      	str	r3, [r7, #112]	; 0x70
	char data[100];
	sprintf(data, "%lu", value);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <WriteCharacterToBufferNum+0x50>)
 8001336:	4618      	mov	r0, r3
 8001338:	f006 f988 	bl	800764c <siprintf>
	while(count < digits){
 800133c:	e00c      	b.n	8001358 <WriteCharacterToBufferNum+0x40>
		RingBufferPut(&metricsRingBuffer, data[count]);
 800133e:	f107 020c 	add.w	r2, r7, #12
 8001342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <WriteCharacterToBufferNum+0x54>)
 800134e:	f000 fe60 	bl	8002012 <RingBufferPut>
		count++;
 8001352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001354:	3301      	adds	r3, #1
 8001356:	677b      	str	r3, [r7, #116]	; 0x74
	while(count < digits){
 8001358:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800135a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800135c:	429a      	cmp	r2, r3
 800135e:	dbee      	blt.n	800133e <WriteCharacterToBufferNum+0x26>
	}
}
 8001360:	bf00      	nop
 8001362:	3778      	adds	r7, #120	; 0x78
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	080083f0 	.word	0x080083f0
 800136c:	200000dc 	.word	0x200000dc

08001370 <RecordFloatMetric>:
	WriteCharacterToBufferNum(value);
	WriteCharacterToBuffer(13);
	WriteCharacterToBuffer(10);
}

void RecordFloatMetric(uint8_t type, uint8_t loopReference, float value) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	ed87 0a00 	vstr	s0, [r7]
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
	WriteCharacterToBuffer('S');
 8001384:	2053      	movs	r0, #83	; 0x53
 8001386:	f7ff ff9b 	bl	80012c0 <WriteCharacterToBuffer>
	WriteCharacterToBufferNum(type);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ffc3 	bl	8001318 <WriteCharacterToBufferNum>
	WriteCharacterToBuffer(':');
 8001392:	203a      	movs	r0, #58	; 0x3a
 8001394:	f7ff ff94 	bl	80012c0 <WriteCharacterToBuffer>
	WriteCharacterToBufferNum(loopReference);
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffbc 	bl	8001318 <WriteCharacterToBufferNum>
//
//	WriteCharacterToBufferNum(valueHighest);
//	WriteCharacterToBufferNum(valueHigh);
//	WriteCharacterToBufferNum(valueLow);
//	WriteCharacterToBufferNum(valueLowest);
	WriteCharacterToBuffer(':');
 80013a0:	203a      	movs	r0, #58	; 0x3a
 80013a2:	f7ff ff8d 	bl	80012c0 <WriteCharacterToBuffer>
	WriteCharacterToBufferNum(value);
 80013a6:	edd7 7a00 	vldr	s15, [r7]
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	ee17 0a90 	vmov	r0, s15
 80013b2:	f7ff ffb1 	bl	8001318 <WriteCharacterToBufferNum>
	WriteCharacterToBuffer(13);
 80013b6:	200d      	movs	r0, #13
 80013b8:	f7ff ff82 	bl	80012c0 <WriteCharacterToBuffer>
	WriteCharacterToBuffer(10);
 80013bc:	200a      	movs	r0, #10
 80013be:	f7ff ff7f 	bl	80012c0 <WriteCharacterToBuffer>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <FlushMetrics>:

void FlushMetrics() {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	uint8_t metricsFlushed = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[1]={0};
 80013d6:	2300      	movs	r3, #0
 80013d8:	713b      	strb	r3, [r7, #4]

	while(metricsFlushed < ANALYTICS_CHARACTERS_TO_SEND_PER_FLUSH && metricsRingBuffer.count > 0) {
 80013da:	e00f      	b.n	80013fc <FlushMetrics+0x30>
		data_send[0] = RingBufferPop(&metricsRingBuffer);
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <FlushMetrics+0x48>)
 80013de:	f000 fdec 	bl	8001fba <RingBufferPop>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart4, (uint8_t *)data_send, 1, 1000);
 80013e8:	1d39      	adds	r1, r7, #4
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	2201      	movs	r2, #1
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <FlushMetrics+0x4c>)
 80013f2:	f005 fc66 	bl	8006cc2 <HAL_UART_Transmit>
		metricsFlushed++;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	3301      	adds	r3, #1
 80013fa:	71fb      	strb	r3, [r7, #7]
	while(metricsFlushed < ANALYTICS_CHARACTERS_TO_SEND_PER_FLUSH && metricsRingBuffer.count > 0) {
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d804      	bhi.n	800140c <FlushMetrics+0x40>
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <FlushMetrics+0x48>)
 8001404:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001408:	2b00      	cmp	r3, #0
 800140a:	dce7      	bgt.n	80013dc <FlushMetrics+0x10>
	}
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000dc 	.word	0x200000dc
 8001418:	20000ae4 	.word	0x20000ae4

0800141c <InitialiseAngularPosition>:
* Description  : This function initialize Angular position.
* Arguments    : None
* Return Value : None
******************************************************************************/
/* are my angles consistent - radians, or degrees? */
void InitialiseAngularPosition() {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	/* initialise, assume the quad is level */
	angularPosition.x = 0.0;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <InitialiseAngularPosition+0x30>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	angularPosition.y = 0.0;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <InitialiseAngularPosition+0x30>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	angularPosition.z = 0.0;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <InitialiseAngularPosition+0x30>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	609a      	str	r2, [r3, #8]

	sensorToggle = true;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <InitialiseAngularPosition+0x34>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]

	InitialiseGyroscope();
 800143e:	f000 f8d7 	bl	80015f0 <InitialiseGyroscope>
	InitialiseAccelerometer();
 8001442:	f7ff fd8f 	bl	8000f64 <InitialiseAccelerometer>
	//InitialiseMagnetometer();
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000980 	.word	0x20000980
 8001450:	200009e0 	.word	0x200009e0

08001454 <ReadAngularPosition>:
* Function Name: ReadAngularPosition
* Description  : This function read value Angular position.
* Arguments    : None
* Return Value : None
******************************************************************************/
void ReadAngularPosition() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	if (sensorToggle) {
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <ReadAngularPosition+0x5c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <ReadAngularPosition+0x26>
		/* this gryo is dodgy. Sometimes, the last bit in the read sequence never comes back properly, causing errors on the I2C bus. Silly gyro. */
		ReadGyroscope();
 8001460:	f000 f906 	bl	8001670 <ReadGyroscope>

		if (!isReadingGyroscope) {
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <ReadAngularPosition+0x60>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00f      	beq.n	8001492 <ReadAngularPosition+0x3e>
			sensorToggle = 0;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <ReadAngularPosition+0x5c>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e00b      	b.n	8001492 <ReadAngularPosition+0x3e>
		}
	} else {
		ReadAccelerometer();
 800147a:	f7ff fdb1 	bl	8000fe0 <ReadAccelerometer>

		if (!isReadingAccelerometer) {
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <ReadAngularPosition+0x64>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <ReadAngularPosition+0x3e>
			sensorToggle = 1;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <ReadAngularPosition+0x5c>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
//  seems buggered. will introduce the gyro later.
//	angularPosition.x = HOW_MUCH_I_TRUST_THE_GYROSCOPE * (angularPosition.x + (gyroscopeReading.x * GYROSCOPE_SAMPLE_RATE)) + HOW_MUCH_I_TRUST_THE_ACCELEROMETER * accelerometerReading.x;
//	angularPosition.y = HOW_MUCH_I_TRUST_THE_GYROSCOPE * (angularPosition.y + (gyroscopeReading.y * GYROSCOPE_SAMPLE_RATE)) + HOW_MUCH_I_TRUST_THE_ACCELEROMETER * accelerometerReading.y;
//	angularPosition.z = 0;

	angularPosition.x = accelerometerReading.x;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <ReadAngularPosition+0x68>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <ReadAngularPosition+0x6c>)
 8001498:	6013      	str	r3, [r2, #0]
	angularPosition.y = accelerometerReading.y;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <ReadAngularPosition+0x68>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <ReadAngularPosition+0x6c>)
 80014a0:	6053      	str	r3, [r2, #4]
	angularPosition.z = accelerometerReading.z;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <ReadAngularPosition+0x68>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <ReadAngularPosition+0x6c>)
 80014a8:	6093      	str	r3, [r2, #8]
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200009e0 	.word	0x200009e0
 80014b4:	20000964 	.word	0x20000964
 80014b8:	200008e8 	.word	0x200008e8
 80014bc:	200009b4 	.word	0x200009b4
 80014c0:	20000980 	.word	0x20000980

080014c4 <EnableTiming>:
* Description  : This function to enable time of watchdog timer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void EnableTiming(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
    static int enabled = 0;	// Variable to store previous data status of timer
	// Check if not enable will enable to start timer
    if (!enabled)
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <EnableTiming+0x44>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d116      	bne.n	80014fe <EnableTiming+0x3a>
    {
        *SCB_DEMCR = *SCB_DEMCR | 0x01000000;	// Stop check error
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <EnableTiming+0x48>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <EnableTiming+0x48>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80014de:	601a      	str	r2, [r3, #0]
        *DWT_CYCCNT = 0; 						// Reset the counter
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <EnableTiming+0x4c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
        *DWT_CONTROL = *DWT_CONTROL | 1 ; 		// enable the counter
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <EnableTiming+0x50>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <EnableTiming+0x50>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

        enabled = 1;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <EnableTiming+0x44>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
    }
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	2000009c 	.word	0x2000009c
 800150c:	20000008 	.word	0x20000008
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <TimingDelay>:
* Description  : This function to delay with cycle of chip.
* Arguments    : Cycle want delay
* Return Value : None
******************************************************************************/
void TimingDelay(unsigned int tick)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    unsigned int start, current;

    start = *DWT_CYCCNT;				// Read first data of count timer
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <TimingDelay+0x30>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

    do
    {
        current = *DWT_CYCCNT;			//Read current value
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <TimingDelay+0x30>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60bb      	str	r3, [r7, #8]
    } while((current - start) < tick);	//Loop to true
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f5      	bhi.n	8001528 <TimingDelay+0x10>
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20000000 	.word	0x20000000

0800154c <WaitAFewMillis>:
* Function Name: EnableTiming
* Description  : This function delay miliseconds.
* Arguments    : None
* Return Value : None
******************************************************************************/
void WaitAFewMillis(int16_t millis) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
	TimingDelay((168000000 / 1000) * millis);
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <WaitAFewMillis+0x24>)
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffd9 	bl	8001518 <TimingDelay>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	00029040 	.word	0x00029040

08001574 <i2c_write_gyroscope>:
*   0x69: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_write_gyroscope(uint8_t reg, uint8_t value)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2]={0};
 8001584:	2300      	movs	r3, #0
 8001586:	81bb      	strh	r3, [r7, #12]
	data[0] = reg;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, Gyrospope_Address<<1, data, 2, 10);
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	230a      	movs	r3, #10
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2302      	movs	r3, #2
 800159a:	21d2      	movs	r1, #210	; 0xd2
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <i2c_write_gyroscope+0x38>)
 800159e:	f002 fda9 	bl	80040f4 <HAL_I2C_Master_Transmit>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200008fc 	.word	0x200008fc

080015b0 <i2c_read_gyroscope>:
*   0x69: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_read_gyroscope(uint8_t reg, uint8_t numberofbytes)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	4603      	mov	r3, r0
 80015b8:	460a      	mov	r2, r1
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	4613      	mov	r3, r2
 80015be:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, Gyrospope_Address<<1, reg, I2C_MEMADD_SIZE_8BIT, \
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	b299      	uxth	r1, r3
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2264      	movs	r2, #100	; 0x64
 80015ca:	9202      	str	r2, [sp, #8]
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <i2c_read_gyroscope+0x38>)
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	460a      	mov	r2, r1
 80015d6:	21d2      	movs	r1, #210	; 0xd2
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <i2c_read_gyroscope+0x3c>)
 80015da:	f002 fe89 	bl	80042f0 <HAL_I2C_Mem_Read>
	  data_receive, numberofbytes, 100);
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000b0 	.word	0x200000b0
 80015ec:	200008fc 	.word	0x200008fc

080015f0 <InitialiseGyroscope>:
* Description  : This function initialize Accelerometer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialiseGyroscope()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	/* Reset the Gyro.
	 * Note that 0x69 is the address of the Gyro on the bus. Pin 9 is logic high
	 * Write 0x80 to address 0x3E to reset gyro
	 */
	i2c_write_gyroscope(0x3E, 0x80);
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	203e      	movs	r0, #62	; 0x3e
 80015f8:	f7ff ffbc 	bl	8001574 <i2c_write_gyroscope>
	 * In theory 2000 degrees / second means the quad would be completely
	 * rotating (2000/360) = 5 times per second! Probably higher than required.
	 * digital low pass filter bandwidth is 5Hz, internal sample rate is 1kHz.
	 * Note: we could adjust the low pass filter in future to see the impact.
	 */
	i2c_write_gyroscope(0x16, 0x1E);
 80015fc:	211e      	movs	r1, #30
 80015fe:	2016      	movs	r0, #22
 8001600:	f7ff ffb8 	bl	8001574 <i2c_write_gyroscope>
	/* Set the sample rate
	 * Sample rate = internal sample rate / (divider + 1)
	 * Setting divider to 4 to give a sample rate of 200Hz.
	 * The gyro values will update every 5ms.
	 */
	i2c_write_gyroscope(0x15, 0x04);
 8001604:	2104      	movs	r1, #4
 8001606:	2015      	movs	r0, #21
 8001608:	f7ff ffb4 	bl	8001574 <i2c_write_gyroscope>
	 * This should be more stable / accurate than an internal oscillator (which
	 * would be greatly affected by temperature)
	 * Probably not as good as an external oscillator though.
	 * Accuracy of internal gyro MEMS oscillators are +/- 2% over temperature.
	 */
	i2c_write_gyroscope(0x3E, 0x03);
 800160c:	2103      	movs	r1, #3
 800160e:	203e      	movs	r0, #62	; 0x3e
 8001610:	f7ff ffb0 	bl	8001574 <i2c_write_gyroscope>

	/* The gyro takes 50 milliseconds for zero settling */
	WaitAFewMillis(50);
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f7ff ff99 	bl	800154c <WaitAFewMillis>

	/* And will take a further (or is this included?) 20ms for register read /
	 * write warm up */
	WaitAFewMillis(20);
 800161a:	2014      	movs	r0, #20
 800161c:	f7ff ff96 	bl	800154c <WaitAFewMillis>

	/* initialise the gyroscope reading */
	gyroscopeReading.gyroscopeTemperature = 0.0f;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <InitialiseGyroscope+0x78>)
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
	gyroscopeReading.x = 0.0f;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <InitialiseGyroscope+0x78>)
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
	gyroscopeReading.y = 0.0f;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <InitialiseGyroscope+0x78>)
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
	gyroscopeReading.z = 0.0f;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <InitialiseGyroscope+0x78>)
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
	gyroscopeReading.xOffset = 0.0f;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <InitialiseGyroscope+0x78>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
	gyroscopeReading.yOffset = 0.0f;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <InitialiseGyroscope+0x78>)
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
	gyroscopeReading.zOffset = 0.0f;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <InitialiseGyroscope+0x78>)
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
	gyroscopeReading.readings = 0;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <InitialiseGyroscope+0x78>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]

	isReadingGyroscope = 0;
 800165e:	4b03      	ldr	r3, [pc, #12]	; (800166c <InitialiseGyroscope+0x7c>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200000bc 	.word	0x200000bc
 800166c:	20000964 	.word	0x20000964

08001670 <ReadGyroscope>:
* Description  : This function read data and store to struct variable.
* Arguments    : None
* Return Value : None
******************************************************************************/
void ReadGyroscope()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
	// Check data exist or not by global variable bool isReadingGyroscope
	if (!isReadingGyroscope) {
 8001676:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <ReadGyroscope+0x178>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	f083 0301 	eor.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <ReadGyroscope+0x24>
		// Read data from gyroscope
		i2c_read_gyroscope(0x1B, 8);
 8001684:	2108      	movs	r1, #8
 8001686:	201b      	movs	r0, #27
 8001688:	f7ff ff92 	bl	80015b0 <i2c_read_gyroscope>
		isReadingGyroscope = 1;
 800168c:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <ReadGyroscope+0x178>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
		return;
 8001692:	e0a6      	b.n	80017e2 <ReadGyroscope+0x172>
	}

	// done! convert the values to a reading
	uint8_t temperatureHigh = data_receive[0];
 8001694:	4b55      	ldr	r3, [pc, #340]	; (80017ec <ReadGyroscope+0x17c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	77fb      	strb	r3, [r7, #31]
	uint8_t temperatureLow = data_receive[1];
 800169a:	4b54      	ldr	r3, [pc, #336]	; (80017ec <ReadGyroscope+0x17c>)
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	77bb      	strb	r3, [r7, #30]
	uint8_t xHigh = data_receive[2];
 80016a0:	4b52      	ldr	r3, [pc, #328]	; (80017ec <ReadGyroscope+0x17c>)
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	777b      	strb	r3, [r7, #29]
	uint8_t xLow = data_receive[3];
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <ReadGyroscope+0x17c>)
 80016a8:	78db      	ldrb	r3, [r3, #3]
 80016aa:	773b      	strb	r3, [r7, #28]
	uint8_t yHigh = data_receive[4];
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <ReadGyroscope+0x17c>)
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	76fb      	strb	r3, [r7, #27]
	uint8_t yLow = data_receive[5];
 80016b2:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <ReadGyroscope+0x17c>)
 80016b4:	795b      	ldrb	r3, [r3, #5]
 80016b6:	76bb      	strb	r3, [r7, #26]
	uint8_t zHigh = data_receive[6];
 80016b8:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <ReadGyroscope+0x17c>)
 80016ba:	799b      	ldrb	r3, [r3, #6]
 80016bc:	767b      	strb	r3, [r7, #25]
	uint8_t zLow = data_receive[7];
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <ReadGyroscope+0x17c>)
 80016c0:	79db      	ldrb	r3, [r3, #7]
 80016c2:	763b      	strb	r3, [r7, #24]

	/* Temperature offset: -13200 LSB
	 * Temperature sensitivity: 280 LSB / degrees celcius
	 */
	int16_t rawTemperature = \
	  (((int16_t) temperatureHigh << 8) | temperatureLow);
 80016c4:	7ffb      	ldrb	r3, [r7, #31]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7fbb      	ldrb	r3, [r7, #30]
 80016cc:	b21b      	sxth	r3, r3
	int16_t rawTemperature = \
 80016ce:	4313      	orrs	r3, r2
 80016d0:	82fb      	strh	r3, [r7, #22]
	gyroscopeReading.gyroscopeTemperature = 35 + (rawTemperature + 13200) / 280;
 80016d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016d6:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 80016da:	3310      	adds	r3, #16
 80016dc:	4a44      	ldr	r2, [pc, #272]	; (80017f0 <ReadGyroscope+0x180>)
 80016de:	fb82 1203 	smull	r1, r2, r2, r3
 80016e2:	441a      	add	r2, r3
 80016e4:	1212      	asrs	r2, r2, #8
 80016e6:	17db      	asrs	r3, r3, #31
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	3323      	adds	r3, #35	; 0x23
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <ReadGyroscope+0x184>)
 80016f6:	edc3 7a03 	vstr	s15, [r3, #12]

	int16_t rawX = (((int16_t) xHigh << 8) | xLow);
 80016fa:	7f7b      	ldrb	r3, [r7, #29]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b21a      	sxth	r2, r3
 8001700:	7f3b      	ldrb	r3, [r7, #28]
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	82bb      	strh	r3, [r7, #20]
	int16_t rawY = (((int16_t) yHigh << 8) | yLow);
 8001708:	7efb      	ldrb	r3, [r7, #27]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	7ebb      	ldrb	r3, [r7, #26]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	827b      	strh	r3, [r7, #18]
	int16_t rawZ = (((int16_t) zHigh << 8) | zLow);
 8001716:	7e7b      	ldrb	r3, [r7, #25]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	7e3b      	ldrb	r3, [r7, #24]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	823b      	strh	r3, [r7, #16]

	/* gyro sensitivity: 14.375 LSB / (degrees / second) */
	float xDegreesPerSecond = \
	  ((float) rawX / 14.375f) - gyroscopeReading.xOffset;
 8001724:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001730:	eddf 6a31 	vldr	s13, [pc, #196]	; 80017f8 <ReadGyroscope+0x188>
 8001734:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <ReadGyroscope+0x184>)
 800173a:	edd3 7a04 	vldr	s15, [r3, #16]
	float xDegreesPerSecond = \
 800173e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001742:	edc7 7a03 	vstr	s15, [r7, #12]
	float yDegreesPerSecond = \
	  ((float) rawY / 14.375f) - gyroscopeReading.yOffset;
 8001746:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	eddf 6a29 	vldr	s13, [pc, #164]	; 80017f8 <ReadGyroscope+0x188>
 8001756:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <ReadGyroscope+0x184>)
 800175c:	edd3 7a05 	vldr	s15, [r3, #20]
	float yDegreesPerSecond = \
 8001760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001764:	edc7 7a02 	vstr	s15, [r7, #8]
	float zDegreesPerSecond = \
	  ((float) rawZ / 14.375f) - gyroscopeReading.zOffset;
 8001768:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	eddf 6a20 	vldr	s13, [pc, #128]	; 80017f8 <ReadGyroscope+0x188>
 8001778:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <ReadGyroscope+0x184>)
 800177e:	edd3 7a06 	vldr	s15, [r3, #24]
	float zDegreesPerSecond = \
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	edc7 7a01 	vstr	s15, [r7, #4]

	if (!isnan(xDegreesPerSecond) && !isnan(yDegreesPerSecond) && \
 800178a:	ed97 7a03 	vldr	s14, [r7, #12]
 800178e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001792:	eeb4 7a67 	vcmp.f32	s14, s15
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	d61f      	bvs.n	80017dc <ReadGyroscope+0x16c>
 800179c:	ed97 7a02 	vldr	s14, [r7, #8]
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	d616      	bvs.n	80017dc <ReadGyroscope+0x16c>
 80017ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d60d      	bvs.n	80017dc <ReadGyroscope+0x16c>
		  !isnan(zDegreesPerSecond)) {
		gyroscopeReading.x = xDegreesPerSecond;
 80017c0:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <ReadGyroscope+0x184>)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6013      	str	r3, [r2, #0]
		gyroscopeReading.y = yDegreesPerSecond;
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <ReadGyroscope+0x184>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	6053      	str	r3, [r2, #4]
		gyroscopeReading.z = zDegreesPerSecond;
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <ReadGyroscope+0x184>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6093      	str	r3, [r2, #8]
		gyroscopeReading.readings++;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <ReadGyroscope+0x184>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <ReadGyroscope+0x184>)
 80017da:	61d3      	str	r3, [r2, #28]
	}

	isReadingGyroscope = 0;
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <ReadGyroscope+0x178>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
}
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000964 	.word	0x20000964
 80017ec:	200000b0 	.word	0x200000b0
 80017f0:	ea0ea0eb 	.word	0xea0ea0eb
 80017f4:	200000bc 	.word	0x200000bc
 80017f8:	41660000 	.word	0x41660000

080017fc <TurnOn>:
* Function Name: TurnOn
* Description  : This function turn on led on board.
* Arguments    : None
* Return Value : None
******************************************************************************/
void TurnOn(uint16_t leds) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, leds, GPIO_PIN_SET);
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2201      	movs	r2, #1
 800180a:	4619      	mov	r1, r3
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <TurnOn+0x20>)
 800180e:	f002 fb1f 	bl	8003e50 <HAL_GPIO_WritePin>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40020c00 	.word	0x40020c00

08001820 <TurnOff>:
* Function Name: TurnOff
* Description  : This function turn on led off board.
* Arguments    : None
* Return Value : None
******************************************************************************/
void TurnOff(uint16_t leds) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, leds, GPIO_PIN_RESET);
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <TurnOff+0x20>)
 8001832:	f002 fb0d 	bl	8003e50 <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020c00 	.word	0x40020c00

08001844 <InitialisePid>:
* Description  : This function initialize pid.
* Arguments    : Proportinal, integral, diff
* Return Value : Structure PID
******************************************************************************/
/* note, cumulative error should really be bounded to the last know 'good' state, or the last x calcuations etc */
struct Pid InitialisePid(float proportional, float integral, float differential) {
 8001844:	b4b0      	push	{r4, r5, r7}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001850:	edc7 0a01 	vstr	s1, [r7, #4]
 8001854:	ed87 1a00 	vstr	s2, [r7]
	Pid pid;

	pid.proportional = proportional;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	617b      	str	r3, [r7, #20]
	pid.integral = integral;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	61bb      	str	r3, [r7, #24]
	pid.differential = differential;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	61fb      	str	r3, [r7, #28]
	pid.lastError = 0.0;
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
	pid.cumulativeError = 0.0;
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24

	return pid;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	461d      	mov	r5, r3
 8001874:	f107 0414 	add.w	r4, r7, #20
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	602b      	str	r3, [r5, #0]
}
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	372c      	adds	r7, #44	; 0x2c
 8001884:	46bd      	mov	sp, r7
 8001886:	bcb0      	pop	{r4, r5, r7}
 8001888:	4770      	bx	lr
	...

0800188c <CalculatePidAdjustment>:
* Function Name: CalculatePidAdjustment
* Description  : This function calculate PID Adj.
* Arguments    : PID, current, target
* Return Value : Float
******************************************************************************/
float CalculatePidAdjustment(Pid* pid, float current, float target) {
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	ed87 0a02 	vstr	s0, [r7, #8]
 8001898:	edc7 0a01 	vstr	s1, [r7, #4]

	if (isnan(current) || isnan(target)) {
 800189c:	ed97 7a02 	vldr	s14, [r7, #8]
 80018a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d608      	bvs.n	80018c0 <CalculatePidAdjustment+0x34>
 80018ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80018b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d702      	bvc.n	80018c6 <CalculatePidAdjustment+0x3a>
		return 0.0;
 80018c0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8001944 <CalculatePidAdjustment+0xb8>
 80018c4:	e037      	b.n	8001936 <CalculatePidAdjustment+0xaa>
	}

    float error = target - current;
 80018c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	edc7 7a05 	vstr	s15, [r7, #20]
    float diff = error - pid->lastError;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	edc7 7a04 	vstr	s15, [r7, #16]
    pid->lastError = error;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	60da      	str	r2, [r3, #12]
    pid->cumulativeError += error;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80018f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	edc3 7a04 	vstr	s15, [r3, #16]

    return (pid->proportional * error) +
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	edd7 7a05 	vldr	s15, [r7, #20]
 800190c:	ee27 7a27 	vmul.f32	s14, s14, s15
           (pid->integral * pid->cumulativeError) +
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	edd3 6a01 	vldr	s13, [r3, #4]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edd3 7a04 	vldr	s15, [r3, #16]
 800191c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return (pid->proportional * error) +
 8001920:	ee37 7a27 	vadd.f32	s14, s14, s15
           (pid->differential * diff);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	edd3 6a02 	vldr	s13, [r3, #8]
 800192a:	edd7 7a04 	vldr	s15, [r7, #16]
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
           (pid->integral * pid->cumulativeError) +
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	00000000 	.word	0x00000000

08001948 <InitialisePanicButton>:
#include <main.h>
#include <stdio.h>
#include <inttypes.h>
#include <string.h>

void InitialisePanicButton() {
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	clearWarningsOnSecondsElapsed = 0;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <InitialisePanicButton+0x14>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000998 	.word	0x20000998

08001960 <ClearWarnings>:
	FlushAllMetrics();
	RecordWarningMessage(buffer);
	FlushAllMetrics();
}

void ClearWarnings() {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	if (clearWarningsOnSecondsElapsed > 0 && secondsElapsed >= clearWarningsOnSecondsElapsed) {
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <ClearWarnings+0x2c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <ClearWarnings+0x26>
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <ClearWarnings+0x30>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <ClearWarnings+0x2c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d306      	bcc.n	8001986 <ClearWarnings+0x26>
		TurnOff(ORANGE_LED);
 8001978:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800197c:	f7ff ff50 	bl	8001820 <TurnOff>
		clearWarningsOnSecondsElapsed = 0;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <ClearWarnings+0x2c>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
	}
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000998 	.word	0x20000998
 8001990:	200000ac 	.word	0x200000ac

08001994 <InitialisePWM>:
* Description  : This function initialize pwm.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialisePWM()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	/* set all of the pulse values to 0% */
	channel1Pulse = 1000;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <InitialisePWM+0x90>)
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <InitialisePWM+0x94>)
 800199c:	601a      	str	r2, [r3, #0]
	channel2Pulse = 1000;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <InitialisePWM+0x98>)
 80019a0:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <InitialisePWM+0x94>)
 80019a2:	601a      	str	r2, [r3, #0]
	channel3Pulse = 1000;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <InitialisePWM+0x9c>)
 80019a6:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <InitialisePWM+0x94>)
 80019a8:	601a      	str	r2, [r3, #0]
	channel4Pulse = 1000;
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <InitialisePWM+0xa0>)
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <InitialisePWM+0x94>)
 80019ae:	601a      	str	r2, [r3, #0]
	// Initial for all channel of timer 3 using PWM
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80019b0:	2100      	movs	r1, #0
 80019b2:	4821      	ldr	r0, [pc, #132]	; (8001a38 <InitialisePWM+0xa4>)
 80019b4:	f003 ff2c 	bl	8005810 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80019b8:	2104      	movs	r1, #4
 80019ba:	481f      	ldr	r0, [pc, #124]	; (8001a38 <InitialisePWM+0xa4>)
 80019bc:	f003 ff28 	bl	8005810 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80019c0:	2108      	movs	r1, #8
 80019c2:	481d      	ldr	r0, [pc, #116]	; (8001a38 <InitialisePWM+0xa4>)
 80019c4:	f003 ff24 	bl	8005810 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80019c8:	210c      	movs	r1, #12
 80019ca:	481b      	ldr	r0, [pc, #108]	; (8001a38 <InitialisePWM+0xa4>)
 80019cc:	f003 ff20 	bl	8005810 <HAL_TIM_PWM_Stop>

    HAL_TIM_PWM_Init(&htim3);
 80019d0:	4819      	ldr	r0, [pc, #100]	; (8001a38 <InitialisePWM+0xa4>)
 80019d2:	f003 feaa 	bl	800572a <HAL_TIM_PWM_Init>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019d6:	2100      	movs	r1, #0
 80019d8:	4817      	ldr	r0, [pc, #92]	; (8001a38 <InitialisePWM+0xa4>)
 80019da:	f003 fedb 	bl	8005794 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019de:	2104      	movs	r1, #4
 80019e0:	4815      	ldr	r0, [pc, #84]	; (8001a38 <InitialisePWM+0xa4>)
 80019e2:	f003 fed7 	bl	8005794 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019e6:	2108      	movs	r1, #8
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <InitialisePWM+0xa4>)
 80019ea:	f003 fed3 	bl	8005794 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80019ee:	210c      	movs	r1, #12
 80019f0:	4811      	ldr	r0, [pc, #68]	; (8001a38 <InitialisePWM+0xa4>)
 80019f2:	f003 fecf 	bl	8005794 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) 700);
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <InitialisePWM+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) 700);
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <InitialisePWM+0xa4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) 700);
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <InitialisePWM+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) 700);
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <InitialisePWM+0xa4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000994 	.word	0x20000994
 8001a28:	447a0000 	.word	0x447a0000
 8001a2c:	200009b0 	.word	0x200009b0
 8001a30:	200008f8 	.word	0x200008f8
 8001a34:	20000990 	.word	0x20000990
 8001a38:	200009e4 	.word	0x200009e4

08001a3c <SetTim3Channel1>:
* Function Name: SetTim3Channel1
* Description  : This function set pulse to channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel1(float pulse) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8001a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001a94 <SetTim3Channel1+0x58>
 8001a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	da00      	bge.n	8001a5a <SetTim3Channel1+0x1e>
		channel1Pulse = pulse;				// Update new data pulse of channel 1
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) pulse);		// Update value of capture/compare register 1
	}
}
 8001a58:	e015      	b.n	8001a86 <SetTim3Channel1+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8001a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001a98 <SetTim3Channel1+0x5c>
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d900      	bls.n	8001a6e <SetTim3Channel1+0x32>
}
 8001a6c:	e00b      	b.n	8001a86 <SetTim3Channel1+0x4a>
		channel1Pulse = pulse;				// Update new data pulse of channel 1
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <SetTim3Channel1+0x60>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) pulse);		// Update value of capture/compare register 1
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <SetTim3Channel1+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 2a90 	vmov	r2, s15
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	447a0000 	.word	0x447a0000
 8001a98:	44fa0000 	.word	0x44fa0000
 8001a9c:	20000994 	.word	0x20000994
 8001aa0:	200009e4 	.word	0x200009e4

08001aa4 <SetTim3Channel2>:
* Function Name: SetTim3Channel2
* Description  : This function set pulse to channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel2(float pulse) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8001aae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001afc <SetTim3Channel2+0x58>
 8001ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	da00      	bge.n	8001ac2 <SetTim3Channel2+0x1e>
		channel2Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) pulse);
	}
}
 8001ac0:	e015      	b.n	8001aee <SetTim3Channel2+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8001ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b00 <SetTim3Channel2+0x5c>
 8001aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d900      	bls.n	8001ad6 <SetTim3Channel2+0x32>
}
 8001ad4:	e00b      	b.n	8001aee <SetTim3Channel2+0x4a>
		channel2Pulse = pulse;
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <SetTim3Channel2+0x60>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) pulse);
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <SetTim3Channel2+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae8:	ee17 2a90 	vmov	r2, s15
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	447a0000 	.word	0x447a0000
 8001b00:	44fa0000 	.word	0x44fa0000
 8001b04:	200009b0 	.word	0x200009b0
 8001b08:	200009e4 	.word	0x200009e4

08001b0c <SetTim3Channel3>:
* Function Name: SetTim3Channel3
* Description  : This function set pulse to channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel3(float pulse) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8001b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b1a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b64 <SetTim3Channel3+0x58>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	da00      	bge.n	8001b2a <SetTim3Channel3+0x1e>
		channel3Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) pulse);
	}
}
 8001b28:	e015      	b.n	8001b56 <SetTim3Channel3+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8001b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b68 <SetTim3Channel3+0x5c>
 8001b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d900      	bls.n	8001b3e <SetTim3Channel3+0x32>
}
 8001b3c:	e00b      	b.n	8001b56 <SetTim3Channel3+0x4a>
		channel3Pulse = pulse;
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <SetTim3Channel3+0x60>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) pulse);
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <SetTim3Channel3+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b50:	ee17 2a90 	vmov	r2, s15
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	447a0000 	.word	0x447a0000
 8001b68:	44fa0000 	.word	0x44fa0000
 8001b6c:	200008f8 	.word	0x200008f8
 8001b70:	200009e4 	.word	0x200009e4

08001b74 <SetTim3Channel4>:
* Function Name: SetTim3Channel4
* Description  : This function set pulse to channel 4.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel4(float pulse) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8001b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b82:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001bcc <SetTim3Channel4+0x58>
 8001b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	da00      	bge.n	8001b92 <SetTim3Channel4+0x1e>
		channel4Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) pulse);
	}
}
 8001b90:	e015      	b.n	8001bbe <SetTim3Channel4+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8001b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b96:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001bd0 <SetTim3Channel4+0x5c>
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d900      	bls.n	8001ba6 <SetTim3Channel4+0x32>
}
 8001ba4:	e00b      	b.n	8001bbe <SetTim3Channel4+0x4a>
		channel4Pulse = pulse;
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <SetTim3Channel4+0x60>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) pulse);
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <SetTim3Channel4+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb8:	ee17 2a90 	vmov	r2, s15
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	447a0000 	.word	0x447a0000
 8001bd0:	44fa0000 	.word	0x44fa0000
 8001bd4:	20000990 	.word	0x20000990
 8001bd8:	200009e4 	.word	0x200009e4

08001bdc <UpdateTim3Channel1>:
* Function Name: UpdateTim3Channel1
* Description  : This function update pulse of channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel1(float pulse) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel1(channel1Pulse + pulse);
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <UpdateTim3Channel1+0x28>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	f7ff ff20 	bl	8001a3c <SetTim3Channel1>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000994 	.word	0x20000994

08001c08 <UpdateTim3Channel2>:
* Function Name: UpdateTim3Channel2
* Description  : This function update pulse of channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel2(float pulse) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel2(channel2Pulse + pulse);
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <UpdateTim3Channel2+0x28>)
 8001c14:	ed93 7a00 	vldr	s14, [r3]
 8001c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f7ff ff3e 	bl	8001aa4 <SetTim3Channel2>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200009b0 	.word	0x200009b0

08001c34 <UpdateTim3Channel3>:
* Function Name: UpdateTim3Channel3
* Description  : This function update pulse of channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel3(float pulse) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel3(channel3Pulse + pulse);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <UpdateTim3Channel3+0x28>)
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	f7ff ff5c 	bl	8001b0c <SetTim3Channel3>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200008f8 	.word	0x200008f8

08001c60 <UpdateTim3Channel4>:
* Function Name: UpdateTim3Channel4
* Description  : This function update pulse of channel 4.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel4(float pulse) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel4(channel4Pulse + pulse);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <UpdateTim3Channel4+0x28>)
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	f7ff ff7a 	bl	8001b74 <SetTim3Channel4>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000990 	.word	0x20000990

08001c8c <ReadTim3Channel1Pulse>:
* Function Name: ReadTim3Channel1Pulse
* Description  : This function read current value pulse channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel1Pulse() {
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
	return channel1Pulse;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <ReadTim3Channel1Pulse+0x18>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	ee07 3a90 	vmov	s15, r3
}
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000994 	.word	0x20000994

08001ca8 <ReadTim3Channel2Pulse>:
* Function Name: ReadTim3Channel2Pulse
* Description  : This function read current value pulse channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel2Pulse() {
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	return channel2Pulse;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <ReadTim3Channel2Pulse+0x18>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	ee07 3a90 	vmov	s15, r3
}
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200009b0 	.word	0x200009b0

08001cc4 <ReadTim3Channel3Pulse>:
* Function Name: ReadTim3Channel3Pulse
* Description  : This function read current value pulse channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel3Pulse() {
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return channel3Pulse;
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <ReadTim3Channel3Pulse+0x18>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	ee07 3a90 	vmov	s15, r3
}
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200008f8 	.word	0x200008f8

08001ce0 <ReadTim3Channel4Pulse>:
* Description  : This function read current value pulse channel 4.
* Arguments    : Pulse
* Return Value : None

******************************************************************************/
float ReadTim3Channel4Pulse() {
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	return channel4Pulse;
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <ReadTim3Channel4Pulse+0x18>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	ee07 3a90 	vmov	s15, r3
}
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000990 	.word	0x20000990

08001cfc <InitialisePWMChannel>:
* Description  : This function to initialize pwm channel.
* Arguments    : GPIO, pin, pinsource, channel.
* Return Value : Structure DutyCycle.
******************************************************************************/
DutyCycle InitialisePWMChannel(uint8_t channel)
{
 8001cfc:	b490      	push	{r4, r7}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
    struct DutyCycle dutyCycle;

    if (channel == 1) {
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d106      	bne.n	8001d1c <InitialisePWMChannel+0x20>
    	dutyCycle.set = &SetTim3Channel1;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <InitialisePWMChannel+0x74>)
 8001d10:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel1;
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <InitialisePWMChannel+0x78>)
 8001d14:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel1Pulse;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <InitialisePWMChannel+0x7c>)
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e01c      	b.n	8001d56 <InitialisePWMChannel+0x5a>
    } else if (channel == 2) {
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d106      	bne.n	8001d30 <InitialisePWMChannel+0x34>
    	dutyCycle.set = &SetTim3Channel2;
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <InitialisePWMChannel+0x80>)
 8001d24:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel2;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <InitialisePWMChannel+0x84>)
 8001d28:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel2Pulse;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <InitialisePWMChannel+0x88>)
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e012      	b.n	8001d56 <InitialisePWMChannel+0x5a>
    } else if (channel == 3) {
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d106      	bne.n	8001d44 <InitialisePWMChannel+0x48>
    	dutyCycle.set = &SetTim3Channel3;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <InitialisePWMChannel+0x8c>)
 8001d38:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel3;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <InitialisePWMChannel+0x90>)
 8001d3c:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel3Pulse;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <InitialisePWMChannel+0x94>)
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e008      	b.n	8001d56 <InitialisePWMChannel+0x5a>
    } else if (channel == 4) {
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d105      	bne.n	8001d56 <InitialisePWMChannel+0x5a>
    	dutyCycle.set = &SetTim3Channel4;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <InitialisePWMChannel+0x98>)
 8001d4c:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel4;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <InitialisePWMChannel+0x9c>)
 8001d50:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel4Pulse;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <InitialisePWMChannel+0xa0>)
 8001d54:	617b      	str	r3, [r7, #20]
    }

    // note that this will be copied - probably better off using a reference.
    return dutyCycle;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	461c      	mov	r4, r3
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc90      	pop	{r4, r7}
 8001d6e:	4770      	bx	lr
 8001d70:	08001a3d 	.word	0x08001a3d
 8001d74:	08001bdd 	.word	0x08001bdd
 8001d78:	08001c8d 	.word	0x08001c8d
 8001d7c:	08001aa5 	.word	0x08001aa5
 8001d80:	08001c09 	.word	0x08001c09
 8001d84:	08001ca9 	.word	0x08001ca9
 8001d88:	08001b0d 	.word	0x08001b0d
 8001d8c:	08001c35 	.word	0x08001c35
 8001d90:	08001cc5 	.word	0x08001cc5
 8001d94:	08001b75 	.word	0x08001b75
 8001d98:	08001c61 	.word	0x08001c61
 8001d9c:	08001ce1 	.word	0x08001ce1

08001da0 <InitialiseRemoteControls>:
* Function Name: InitialiseRemoteControls
* Description  : This function initialize remote controls.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialiseRemoteControls() {
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	/* throttle: all together now! power (collective pitch?)
	* Channel 3 on the RC receiver
	*/
	//PB.06
	throttle = &pwmInputTimer4;
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <InitialiseRemoteControls+0x98>)
 8001da6:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <InitialiseRemoteControls+0x9c>)
 8001da8:	601a      	str	r2, [r3, #0]
	throttle->hclckDivisor = 2.0f;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <InitialiseRemoteControls+0x98>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2202      	movs	r2, #2
 8001db0:	721a      	strb	r2, [r3, #8]
	throttle->dutyCycle = 0.0;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <InitialiseRemoteControls+0x98>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
	throttle->frequency = 0.0;
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <InitialiseRemoteControls+0x98>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]

	/* rudder: spin to the left or right on a flat plane
	* Channel 4 on the RC receiver
	*/
	//PA.00
	remotePidProportional = &pwmInputTimer5;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <InitialiseRemoteControls+0xa0>)
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <InitialiseRemoteControls+0xa4>)
 8001dca:	601a      	str	r2, [r3, #0]
	remotePidProportional->hclckDivisor = 2.0f;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <InitialiseRemoteControls+0xa0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	721a      	strb	r2, [r3, #8]
	remotePidProportional->dutyCycle = 0.0;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <InitialiseRemoteControls+0xa0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
	remotePidProportional->frequency = 0.0;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <InitialiseRemoteControls+0xa0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]

	/* Aileron: fly sideways left or right
	* Channel 1 on the RC receiver
	*/
	//PE.05
	remotePidIntegral = &pwmInputTimer9;
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <InitialiseRemoteControls+0xa8>)
 8001dea:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <InitialiseRemoteControls+0xac>)
 8001dec:	601a      	str	r2, [r3, #0]
	remotePidIntegral->hclckDivisor = 2.0f;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <InitialiseRemoteControls+0xa8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	721a      	strb	r2, [r3, #8]
	remotePidIntegral->dutyCycle = 0.0;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <InitialiseRemoteControls+0xa8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
	remotePidIntegral->frequency = 0.0;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <InitialiseRemoteControls+0xa8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]

	/* elevator: fly forwards or backwards
	* Channel 2 on the RC receiver
	*/
	//PB.14
	resetAngularPosition = &pwmInputTimer12;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <InitialiseRemoteControls+0xb0>)
 8001e0c:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <InitialiseRemoteControls+0xb4>)
 8001e0e:	601a      	str	r2, [r3, #0]
	resetAngularPosition->hclckDivisor = 2.0f;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <InitialiseRemoteControls+0xb0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	721a      	strb	r2, [r3, #8]
	resetAngularPosition->dutyCycle = 0.0;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <InitialiseRemoteControls+0xb0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
	resetAngularPosition->frequency = 0.0;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <InitialiseRemoteControls+0xb0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000968 	.word	0x20000968
 8001e3c:	200008ec 	.word	0x200008ec
 8001e40:	2000098c 	.word	0x2000098c
 8001e44:	20000970 	.word	0x20000970
 8001e48:	20000960 	.word	0x20000960
 8001e4c:	20000954 	.word	0x20000954
 8001e50:	2000096c 	.word	0x2000096c
 8001e54:	200009a0 	.word	0x200009a0

08001e58 <CalculatePercentageOfMaximum>:
* Arguments    : Dutycycle, frequency
* Return Value : Float
******************************************************************************/
/* note this makes assumptions about the minimum and maximum of duty cycles */
float CalculatePercentageOfMaximum(float dutyCycle, float frequency, \
  float max_num, float min_num) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e62:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e66:	ed87 1a01 	vstr	s2, [r7, #4]
 8001e6a:	edc7 1a00 	vstr	s3, [r7]
	/* how can I tell if something is NAN? */

	/*A duty cycle of 2ms is on for max_num% of the time @ 71Hz(13.8ms period)*/
	float maximum = (max_num / (1000 / frequency)) * 100;
 8001e6e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001f44 <CalculatePercentageOfMaximum+0xec>
 8001e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001f48 <CalculatePercentageOfMaximum+0xf0>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	edc7 7a07 	vstr	s15, [r7, #28]
	/*A duty cycle of 1ms is on for min_num% of the time @ 71Hz(13.8ms period)*/
	float minimum = (min_num / (1000 / frequency)) * 100;
 8001e8e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001f44 <CalculatePercentageOfMaximum+0xec>
 8001e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9a:	edd7 6a00 	vldr	s13, [r7]
 8001e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f48 <CalculatePercentageOfMaximum+0xf0>
 8001ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eaa:	edc7 7a06 	vstr	s15, [r7, #24]
	if (dutyCycle > maximum){
 8001eae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	dd01      	ble.n	8001ec4 <CalculatePercentageOfMaximum+0x6c>
		return 100.0;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <CalculatePercentageOfMaximum+0xf4>)
 8001ec2:	e035      	b.n	8001f30 <CalculatePercentageOfMaximum+0xd8>
	}
	else if (dutyCycle < minimum){
 8001ec4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	d502      	bpl.n	8001edc <CalculatePercentageOfMaximum+0x84>
		return 0;
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e029      	b.n	8001f30 <CalculatePercentageOfMaximum+0xd8>
	}
	else{
		float percentageOn = \
		  ((dutyCycle - minimum) / (maximum - minimum)) * 100.0;
 8001edc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ee4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ee8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ef0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
		float percentageOn = \
 8001ef8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001f48 <CalculatePercentageOfMaximum+0xf0>
 8001efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f00:	edc7 7a05 	vstr	s15, [r7, #20]
		if (percentageOn > 100.0) {
 8001f04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f08:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001f48 <CalculatePercentageOfMaximum+0xf0>
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	dd01      	ble.n	8001f1a <CalculatePercentageOfMaximum+0xc2>
			return 100.0;
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <CalculatePercentageOfMaximum+0xf4>)
 8001f18:	e00a      	b.n	8001f30 <CalculatePercentageOfMaximum+0xd8>
		}
		else if (percentageOn < 0.0) {
 8001f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d502      	bpl.n	8001f2e <CalculatePercentageOfMaximum+0xd6>
			return 0.0;
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e000      	b.n	8001f30 <CalculatePercentageOfMaximum+0xd8>
		}
		return percentageOn;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	ee07 3a90 	vmov	s15, r3
	}
}
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	447a0000 	.word	0x447a0000
 8001f48:	42c80000 	.word	0x42c80000
 8001f4c:	42c80000 	.word	0x42c80000

08001f50 <ReadRemoteThrottle>:
* Function Name: ReadRemoteThrottle
* Description  : This function calculate percentage of throttle.
* Arguments    : None
* Return Value : Float
******************************************************************************/
float ReadRemoteThrottle() {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	// Freq = 71, T = (1/71)*1000 = 14.084 ms
	// Max_num = T * max_duty% = (14.084 * 13.4)/100 = 1.88
	// Min_num = T * min_duty% = (14.084 * 6.325)/100 = 0.89
	return CalculatePercentageOfMaximum(throttle->dutyCycle, \
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <ReadRemoteThrottle+0x34>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	edd3 7a00 	vldr	s15, [r3]
	  throttle->frequency, 1.88, 0.89);
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <ReadRemoteThrottle+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
	return CalculatePercentageOfMaximum(throttle->dutyCycle, \
 8001f60:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f64:	eddf 1a08 	vldr	s3, [pc, #32]	; 8001f88 <ReadRemoteThrottle+0x38>
 8001f68:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8001f8c <ReadRemoteThrottle+0x3c>
 8001f6c:	eef0 0a47 	vmov.f32	s1, s14
 8001f70:	eeb0 0a67 	vmov.f32	s0, s15
 8001f74:	f7ff ff70 	bl	8001e58 <CalculatePercentageOfMaximum>
 8001f78:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000968 	.word	0x20000968
 8001f88:	3f63d70a 	.word	0x3f63d70a
 8001f8c:	3ff0a3d7 	.word	0x3ff0a3d7

08001f90 <modulo_inc>:
* Description  : This function increase value.
* Arguments    : Value and max value.
* Return Value : New value.
******************************************************************************/
unsigned int modulo_inc (const unsigned int value, const unsigned int modulus)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    unsigned int my_value = value + 1;	// Increase value
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    if (my_value >= modulus)			// Check value and modulus
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d301      	bcc.n	8001fac <modulo_inc+0x1c>
    {
      my_value  = 0;					// Reset value
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
    }
    return my_value;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <RingBufferPop>:
* Function Name: RingBufferPop
* Description  : This function pop data at tail.
* Arguments    : Struct buffer ring data.
* Return Value : None
******************************************************************************/
uint16_t RingBufferPop(RingBuffer *_this) {
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	// Check data is right or not ?
	if (_this->count <= 0) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	dc02      	bgt.n	8001fd2 <RingBufferPop+0x18>
		return -1;
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	e01b      	b.n	800200a <RingBufferPop+0x50>
	}

	// Get tail buffer
	uint16_t value = _this->buffer[_this->tail];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fde:	81fb      	strh	r3, [r7, #14]
	// Increase tail to next data can insert
	_this->tail = modulo_inc(_this->tail, RING_BUFFER_SIZE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8001fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ffd0 	bl	8001f90 <modulo_inc>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	// Decrease count
	--_this->count;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	return value;
 8002008:	89fb      	ldrh	r3, [r7, #14]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <RingBufferPut>:
* Function Name: RingBufferPut
* Description  : This function put new data at head.
* Arguments    : Struct buffer ring data.
* Return Value : None
******************************************************************************/
void RingBufferPut(RingBuffer *_this, uint16_t value) {
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]
	// Check count with max size buffer
	if (_this->count < RING_BUFFER_SIZE) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	da1a      	bge.n	8002060 <RingBufferPut+0x4e>
	  // Add new value
	  _this->buffer[_this->head] = value;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8879      	ldrh	r1, [r7, #2]
 8002034:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  // Increase head
	  _this->head = modulo_inc(_this->head, RING_BUFFER_SIZE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800203e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffa4 	bl	8001f90 <modulo_inc>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	  // Increase count
	  ++_this->count;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	}
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b0a9      	sub	sp, #164	; 0xa4
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206e:	f001 fbd1 	bl	8003814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002072:	f000 fc9d 	bl	80029b0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  // Initialize for Leds on board
  MX_GPIO_Init();
 8002076:	f001 f831 	bl	80030dc <MX_GPIO_Init>
  // Initialize for I2C communicate with sensor GY-85
  MX_I2C1_Init();
 800207a:	f000 fd03 	bl	8002a84 <MX_I2C1_Init>
  // Initialize for timer count mili second
  MX_TIM2_Init();
 800207e:	f000 fd2f 	bl	8002ae0 <MX_TIM2_Init>
  // Initialize for Timer control ESC with brushless motor
  MX_TIM3_Init();
 8002082:	f000 fd79 	bl	8002b78 <MX_TIM3_Init>
  //Initialize 4 channel Input_Capture signal from RX controller
  MX_TIM4_Init();
 8002086:	f000 fe0f 	bl	8002ca8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800208a:	f000 fe93 	bl	8002db4 <MX_TIM5_Init>
  MX_TIM9_Init();
 800208e:	f000 ff17 	bl	8002ec0 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002092:	f000 ff87 	bl	8002fa4 <MX_TIM12_Init>
  // Initialize UART communicate with CC2530 transfer data to server Laptop
  MX_UART4_Init();
 8002096:	f000 fff7 	bl	8003088 <MX_UART4_Init>
  // Enable timing to using delay function with DWDGT
  EnableTiming();
 800209a:	f7ff fa13 	bl	80014c4 <EnableTiming>

  /* USER CODE BEGIN 2 */
  // Set interrupt 4 timer for channel 1&2 with mode Input Capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800209e:	2100      	movs	r1, #0
 80020a0:	48a9      	ldr	r0, [pc, #676]	; (8002348 <main+0x2e0>)
 80020a2:	f003 fc43 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80020a6:	2100      	movs	r1, #0
 80020a8:	48a8      	ldr	r0, [pc, #672]	; (800234c <main+0x2e4>)
 80020aa:	f003 fc3f 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 80020ae:	2100      	movs	r1, #0
 80020b0:	48a7      	ldr	r0, [pc, #668]	; (8002350 <main+0x2e8>)
 80020b2:	f003 fc3b 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 80020b6:	2100      	movs	r1, #0
 80020b8:	48a6      	ldr	r0, [pc, #664]	; (8002354 <main+0x2ec>)
 80020ba:	f003 fc37 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80020be:	2104      	movs	r1, #4
 80020c0:	48a1      	ldr	r0, [pc, #644]	; (8002348 <main+0x2e0>)
 80020c2:	f003 fc33 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80020c6:	2104      	movs	r1, #4
 80020c8:	48a0      	ldr	r0, [pc, #640]	; (800234c <main+0x2e4>)
 80020ca:	f003 fc2f 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2);
 80020ce:	2104      	movs	r1, #4
 80020d0:	489f      	ldr	r0, [pc, #636]	; (8002350 <main+0x2e8>)
 80020d2:	f003 fc2b 	bl	800592c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_2);
 80020d6:	2104      	movs	r1, #4
 80020d8:	489e      	ldr	r0, [pc, #632]	; (8002354 <main+0x2ec>)
 80020da:	f003 fc27 	bl	800592c <HAL_TIM_IC_Start_IT>

  // Initialize panic
  InitialisePanicButton();
 80020de:	f7ff fc33 	bl	8001948 <InitialisePanicButton>
  TurnOn(ORANGE_LED);
 80020e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020e6:	f7ff fb89 	bl	80017fc <TurnOn>

  // Initialize timer tick 1 mili second
  HAL_TIM_Base_Start_IT(&htim2);
 80020ea:	489b      	ldr	r0, [pc, #620]	; (8002358 <main+0x2f0>)
 80020ec:	f003 faf9 	bl	80056e2 <HAL_TIM_Base_Start_IT>

  // Initialize PWM control ESC
  // Initialize PWM channel control ESC
	DutyCycle aProp = InitialisePWMChannel(1);
 80020f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe00 	bl	8001cfc <InitialisePWMChannel>
	DutyCycle cProp = InitialisePWMChannel(2);
 80020fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002100:	2102      	movs	r1, #2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fdfa 	bl	8001cfc <InitialisePWMChannel>
	DutyCycle eProp = InitialisePWMChannel(3);
 8002108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800210c:	2103      	movs	r1, #3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fdf4 	bl	8001cfc <InitialisePWMChannel>
	DutyCycle bProp = InitialisePWMChannel(4);
 8002114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002118:	2104      	movs	r1, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fdee 	bl	8001cfc <InitialisePWMChannel>
  InitialisePWM();
 8002120:	f7ff fc38 	bl	8001994 <InitialisePWM>
  WaitAFewMillis(3000);
 8002124:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002128:	f7ff fa10 	bl	800154c <WaitAFewMillis>

  //InitialiseI2C();	// PB.08 (SCL), PB.09 (SDA)
  Pid xAxisPid = InitialisePid(3, 0, 0);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800235c <main+0x2f4>
 8002134:	eddf 0a89 	vldr	s1, [pc, #548]	; 800235c <main+0x2f4>
 8002138:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fb81 	bl	8001844 <InitialisePid>
  Pid yAxisPid = InitialisePid(3, 0, 0);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800235c <main+0x2f4>
 8002148:	eddf 0a84 	vldr	s1, [pc, #528]	; 800235c <main+0x2f4>
 800214c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fb77 	bl	8001844 <InitialisePid>

  // Initialize remote control detail channel RC and pin refer to file
  InitialiseRemoteControls();
 8002156:	f7ff fe23 	bl	8001da0 <InitialiseRemoteControls>

  /* USER CODE END 2 */

  // Initialize InitialiseAngularPosition
  InitialiseAngularPosition();
 800215a:	f7ff f95f 	bl	800141c <InitialiseAngularPosition>

  // Identify change status initialize done, next step waiting arming quad
  TurnOff(ORANGE_LED);
 800215e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002162:	f7ff fb5d 	bl	8001820 <TurnOff>
  TurnOn(YELLOW_LED);
 8002166:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800216a:	f7ff fb47 	bl	80017fc <TurnOn>

  /* turn the motors off, until we get the go ahead from the user */
  uint8_t armingSequenceStep = ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t armingSequenceTimeLastStepExecuted = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  bProp.set(1000);
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8002360 <main+0x2f8>
 8002180:	4798      	blx	r3
  eProp.set(1000);
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002360 <main+0x2f8>
 8002188:	4798      	blx	r3
  cProp.set(1000);
 800218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8002360 <main+0x2f8>
 8002190:	4798      	blx	r3
  aProp.set(1000);
 8002192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002194:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002360 <main+0x2f8>
 8002198:	4798      	blx	r3

  while (armingSequenceStep != ARMING_SEQUENCE_ARMED || ARMING_SEQUENCE_IS_DISABLED) {
 800219a:	e04e      	b.n	800223a <main+0x1d2>
    float thrust = ReadRemoteThrottle();
 800219c:	f7ff fed8 	bl	8001f50 <ReadRemoteThrottle>
 80021a0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    if (secondsElapsed > armingSequenceTimeLastStepExecuted) {
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <main+0x2fc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d241      	bcs.n	8002234 <main+0x1cc>
      if ((armingSequenceStep == ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED) && (thrust == 0.0)) {
 80021b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10e      	bne.n	80021d6 <main+0x16e>
 80021b8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80021bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d107      	bne.n	80021d6 <main+0x16e>
        armingSequenceStep = ARMING_SEQUENCE_HIGH_THROTTLE_REQUIRED;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        armingSequenceTimeLastStepExecuted = secondsElapsed;
 80021cc:	4b65      	ldr	r3, [pc, #404]	; (8002364 <main+0x2fc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021d4:	e02e      	b.n	8002234 <main+0x1cc>
      }
      else if (armingSequenceStep == ARMING_SEQUENCE_HIGH_THROTTLE_REQUIRED && thrust == 100.0) {
 80021d6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d110      	bne.n	8002200 <main+0x198>
 80021de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80021e2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002368 <main+0x300>
 80021e6:	eef4 7a47 	vcmp.f32	s15, s14
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	d107      	bne.n	8002200 <main+0x198>
        armingSequenceStep = ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED_AGAIN;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        armingSequenceTimeLastStepExecuted = secondsElapsed;
 80021f6:	4b5b      	ldr	r3, [pc, #364]	; (8002364 <main+0x2fc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021fe:	e019      	b.n	8002234 <main+0x1cc>
      }
      else if (armingSequenceStep == ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED_AGAIN && thrust == 0.0) {
 8002200:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002204:	2b02      	cmp	r3, #2
 8002206:	d115      	bne.n	8002234 <main+0x1cc>
 8002208:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800220c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	d10e      	bne.n	8002234 <main+0x1cc>
        armingSequenceStep = ARMING_SEQUENCE_ARMED;
 8002216:	2303      	movs	r3, #3
 8002218:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        armingSequenceTimeLastStepExecuted = secondsElapsed;
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <main+0x2fc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        TurnOff(YELLOW_LED);
 8002224:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002228:	f7ff fafa 	bl	8001820 <TurnOff>
        TurnOn(BLUE_LED);
 800222c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002230:	f7ff fae4 	bl	80017fc <TurnOn>
      }
     }
     WaitAFewMillis(10);
 8002234:	200a      	movs	r0, #10
 8002236:	f7ff f989 	bl	800154c <WaitAFewMillis>
  while (armingSequenceStep != ARMING_SEQUENCE_ARMED || ARMING_SEQUENCE_IS_DISABLED) {
 800223a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800223e:	2b03      	cmp	r3, #3
 8002240:	d1ac      	bne.n	800219c <main+0x134>
  }

  uint8_t data_recevie[3]={0};
 8002242:	463b      	mov	r3, r7
 8002244:	2100      	movs	r1, #0
 8002246:	460a      	mov	r2, r1
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	460a      	mov	r2, r1
 800224c:	709a      	strb	r2, [r3, #2]
  uint16_t loopsPerSecond = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  uint32_t thisSecond = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//	  aileron = ReadRemotePidIntegral();
//	  elevator = ReadResetAngularPosition();
//	  HAL_UART_Receive(&huart4, data_recevie, sizeof(data_recevie), 10);
//	  if(data_recevie[0]=='O' && data_recevie[1]=='N')
//	  {
		  loopsPerSecond++;
 800225a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800225e:	3301      	adds	r3, #1
 8002260:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			ReadAngularPosition();
 8002264:	f7ff f8f6 	bl	8001454 <ReadAngularPosition>

			float thrust = ReadRemoteThrottle();
 8002268:	f7ff fe72 	bl	8001f50 <ReadRemoteThrottle>
 800226c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			float baseMotorSpeed = 0;
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			float motorAdjustment = 0;
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			float bMotorSpeed = 0.0;
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	673b      	str	r3, [r7, #112]	; 0x70
			float eMotorSpeed = 0.0;
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	66fb      	str	r3, [r7, #108]	; 0x6c
			float cMotorSpeed = 0.0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	66bb      	str	r3, [r7, #104]	; 0x68
			float aMotorSpeed = 0.0;
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	667b      	str	r3, [r7, #100]	; 0x64
			float xAdjustment = 0.0;
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			float yAdjustment = 0.0;
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			if ((armingSequenceStep != ARMING_SEQUENCE_ARMED || ARMING_SEQUENCE_IS_DISABLED) && secondsElapsed > armingSequenceTimeLastStepExecuted) {
 80022a8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d05d      	beq.n	800236c <main+0x304>
 80022b0:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <main+0x2fc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d257      	bcs.n	800236c <main+0x304>
				if (armingSequenceStep == ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED && thrust == 0.0) {
 80022bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10e      	bne.n	80022e2 <main+0x27a>
 80022c4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80022c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d107      	bne.n	80022e2 <main+0x27a>
					armingSequenceStep = ARMING_SEQUENCE_HIGH_THROTTLE_REQUIRED;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					armingSequenceTimeLastStepExecuted = secondsElapsed;
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <main+0x2fc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022e0:	e031      	b.n	8002346 <main+0x2de>

				} else if (armingSequenceStep == ARMING_SEQUENCE_HIGH_THROTTLE_REQUIRED && thrust == 100.0) {
 80022e2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d110      	bne.n	800230c <main+0x2a4>
 80022ea:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80022ee:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002368 <main+0x300>
 80022f2:	eef4 7a47 	vcmp.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d107      	bne.n	800230c <main+0x2a4>
					armingSequenceStep = ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED_AGAIN;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					armingSequenceTimeLastStepExecuted = secondsElapsed;
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <main+0x2fc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800230a:	e01c      	b.n	8002346 <main+0x2de>

				} else if (armingSequenceStep == ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED_AGAIN && thrust == 0.0) {
 800230c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002310:	2b02      	cmp	r3, #2
 8002312:	f040 81a5 	bne.w	8002660 <main+0x5f8>
 8002316:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800231a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	f040 819d 	bne.w	8002660 <main+0x5f8>
					armingSequenceStep = ARMING_SEQUENCE_ARMED;
 8002326:	2303      	movs	r3, #3
 8002328:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					armingSequenceTimeLastStepExecuted = secondsElapsed;
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <main+0x2fc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					TurnOff(YELLOW_LED);
 8002334:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002338:	f7ff fa72 	bl	8001820 <TurnOff>
					TurnOn(BLUE_LED);
 800233c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002340:	f7ff fa5c 	bl	80017fc <TurnOn>
				if (armingSequenceStep == ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED && thrust == 0.0) {
 8002344:	e18c      	b.n	8002660 <main+0x5f8>
 8002346:	e18b      	b.n	8002660 <main+0x5f8>
 8002348:	20000a24 	.word	0x20000a24
 800234c:	20000a64 	.word	0x20000a64
 8002350:	20000aa4 	.word	0x20000aa4
 8002354:	20000b64 	.word	0x20000b64
 8002358:	20000b24 	.word	0x20000b24
 800235c:	00000000 	.word	0x00000000
 8002360:	447a0000 	.word	0x447a0000
 8002364:	200000ac 	.word	0x200000ac
 8002368:	42c80000 	.word	0x42c80000
				}
			} else if (armingSequenceStep == ARMING_SEQUENCE_ARMED) {
 800236c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002370:	2b03      	cmp	r3, #3
 8002372:	f040 8176 	bne.w	8002662 <main+0x5fa>
				xAdjustment = CalculatePidAdjustment(&xAxisPid, angularPosition.x, 0.0);
 8002376:	4bae      	ldr	r3, [pc, #696]	; (8002630 <main+0x5c8>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	eddf 0aac 	vldr	s1, [pc, #688]	; 8002634 <main+0x5cc>
 8002384:	eeb0 0a67 	vmov.f32	s0, s15
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fa7f 	bl	800188c <CalculatePidAdjustment>
 800238e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
				yAdjustment = CalculatePidAdjustment(&yAxisPid, angularPosition.y, 0.0);
 8002392:	4ba7      	ldr	r3, [pc, #668]	; (8002630 <main+0x5c8>)
 8002394:	edd3 7a01 	vldr	s15, [r3, #4]
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8002634 <main+0x5cc>
 800239e:	eeb0 0a67 	vmov.f32	s0, s15
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fa72 	bl	800188c <CalculatePidAdjustment>
 80023a8:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80

				if (xAdjustment < PID_MINIMUM_BOUND) { xAdjustment = PID_MINIMUM_BOUND; }
 80023ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80023b0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002638 <main+0x5d0>
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d502      	bpl.n	80023c4 <main+0x35c>
 80023be:	4b9f      	ldr	r3, [pc, #636]	; (800263c <main+0x5d4>)
 80023c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				if (xAdjustment > PID_MAXIMUM_BOUND) { xAdjustment = PID_MAXIMUM_BOUND; }
 80023c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80023c8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002640 <main+0x5d8>
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd02      	ble.n	80023dc <main+0x374>
 80023d6:	4b9b      	ldr	r3, [pc, #620]	; (8002644 <main+0x5dc>)
 80023d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				if (yAdjustment < PID_MINIMUM_BOUND) { yAdjustment = PID_MINIMUM_BOUND; }
 80023dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80023e0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8002638 <main+0x5d0>
 80023e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d502      	bpl.n	80023f4 <main+0x38c>
 80023ee:	4b93      	ldr	r3, [pc, #588]	; (800263c <main+0x5d4>)
 80023f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if (yAdjustment > PID_MAXIMUM_BOUND) { yAdjustment = PID_MAXIMUM_BOUND; }
 80023f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80023f8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002640 <main+0x5d8>
 80023fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	dd02      	ble.n	800240c <main+0x3a4>
 8002406:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <main+0x5dc>)
 8002408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				if (thrust == 0.0) {
 800240c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002410:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	d110      	bne.n	800243c <main+0x3d4>
					/* always turn it off when the throttle is zero, independent of throttle constants */
					bProp.set(1000);
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8002648 <main+0x5e0>
 8002420:	4798      	blx	r3
					eProp.set(1000);
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002648 <main+0x5e0>
 8002428:	4798      	blx	r3
					cProp.set(1000);
 800242a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8002648 <main+0x5e0>
 8002430:	4798      	blx	r3
					aProp.set(1000);
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002434:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002648 <main+0x5e0>
 8002438:	4798      	blx	r3
 800243a:	e112      	b.n	8002662 <main+0x5fa>
				} else {
					/* throttle is converted to a range of -50 to +50 */
					baseMotorSpeed = MOTOR_SPEED_REQUIRED_FOR_LIFT + (THROTTLE_SENSITIVITY * (thrust - 50.0));
 800243c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800243e:	f7fe f87b 	bl	8000538 <__aeabi_f2d>
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	4b81      	ldr	r3, [pc, #516]	; (800264c <main+0x5e4>)
 8002448:	f7fd ff16 	bl	8000278 <__aeabi_dsub>
 800244c:	4603      	mov	r3, r0
 800244e:	460c      	mov	r4, r1
 8002450:	4618      	mov	r0, r3
 8002452:	4621      	mov	r1, r4
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <main+0x5e8>)
 800245a:	f7fe f8c5 	bl	80005e8 <__aeabi_dmul>
 800245e:	4603      	mov	r3, r0
 8002460:	460c      	mov	r4, r1
 8002462:	4618      	mov	r0, r3
 8002464:	4621      	mov	r1, r4
 8002466:	a370      	add	r3, pc, #448	; (adr r3, 8002628 <main+0x5c0>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f7fd ff06 	bl	800027c <__adddf3>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4618      	mov	r0, r3
 8002476:	4621      	mov	r1, r4
 8002478:	f7fe fb66 	bl	8000b48 <__aeabi_d2f>
 800247c:	4603      	mov	r3, r0
 800247e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

					bMotorSpeed = baseMotorSpeed + yAdjustment;
 8002482:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002486:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
					eMotorSpeed = baseMotorSpeed - yAdjustment;
 8002492:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002496:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800249a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
					cMotorSpeed = baseMotorSpeed + xAdjustment;
 80024a2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80024a6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
					aMotorSpeed = baseMotorSpeed - xAdjustment;
 80024b2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80024b6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

					/* adjust all motor speeds if one motor is outside motor speed bounds */
					/* this is a deliberate choice to prioritise desired angular position over desired thrust */
					float smallestMotorSpeed = MAXIMUM_MOTOR_SPEED;
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <main+0x5ec>)
 80024c4:	67fb      	str	r3, [r7, #124]	; 0x7c
					float largestMotorSpeed = MINIMUM_MOTOR_SPEED;
 80024c6:	4b64      	ldr	r3, [pc, #400]	; (8002658 <main+0x5f0>)
 80024c8:	67bb      	str	r3, [r7, #120]	; 0x78

					if (bMotorSpeed < smallestMotorSpeed) { smallestMotorSpeed = bMotorSpeed; }
 80024ca:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80024ce:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80024d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024da:	d501      	bpl.n	80024e0 <main+0x478>
 80024dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024de:	67fb      	str	r3, [r7, #124]	; 0x7c
					if (bMotorSpeed > largestMotorSpeed) { largestMotorSpeed = bMotorSpeed; }
 80024e0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80024e4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd01      	ble.n	80024f6 <main+0x48e>
 80024f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f4:	67bb      	str	r3, [r7, #120]	; 0x78
					if (eMotorSpeed < smallestMotorSpeed) { smallestMotorSpeed = eMotorSpeed; }
 80024f6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80024fa:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80024fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	d501      	bpl.n	800250c <main+0x4a4>
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	67fb      	str	r3, [r7, #124]	; 0x7c
					if (eMotorSpeed > largestMotorSpeed) { largestMotorSpeed = eMotorSpeed; }
 800250c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002510:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd01      	ble.n	8002522 <main+0x4ba>
 800251e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002520:	67bb      	str	r3, [r7, #120]	; 0x78
					if (cMotorSpeed < smallestMotorSpeed) { smallestMotorSpeed = cMotorSpeed; }
 8002522:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002526:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d501      	bpl.n	8002538 <main+0x4d0>
 8002534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002536:	67fb      	str	r3, [r7, #124]	; 0x7c
					if (cMotorSpeed > largestMotorSpeed) { largestMotorSpeed = cMotorSpeed; }
 8002538:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800253c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd01      	ble.n	800254e <main+0x4e6>
 800254a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254c:	67bb      	str	r3, [r7, #120]	; 0x78
					if (aMotorSpeed < smallestMotorSpeed) { smallestMotorSpeed = aMotorSpeed; }
 800254e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002552:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	d501      	bpl.n	8002564 <main+0x4fc>
 8002560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002562:	67fb      	str	r3, [r7, #124]	; 0x7c
					if (aMotorSpeed > largestMotorSpeed) { largestMotorSpeed = aMotorSpeed; }
 8002564:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002568:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	dd01      	ble.n	800257a <main+0x512>
 8002576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002578:	67bb      	str	r3, [r7, #120]	; 0x78

					if (smallestMotorSpeed < MINIMUM_MOTOR_SPEED) {
 800257a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800257e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002648 <main+0x5e0>
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	d508      	bpl.n	800259e <main+0x536>
						motorAdjustment = MINIMUM_MOTOR_SPEED - smallestMotorSpeed;
 800258c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002648 <main+0x5e0>
 8002590:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800259c:	e010      	b.n	80025c0 <main+0x558>
					} else if (largestMotorSpeed > MAXIMUM_MOTOR_SPEED) {
 800259e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80025a2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800265c <main+0x5f4>
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	dd07      	ble.n	80025c0 <main+0x558>
						motorAdjustment = MAXIMUM_MOTOR_SPEED - largestMotorSpeed;
 80025b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800265c <main+0x5f4>
 80025b4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
					}

					/* apply adjusted motor speeds to the motors */
					bMotorSpeed = bMotorSpeed + motorAdjustment;
 80025c0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80025c4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025cc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
					eMotorSpeed = eMotorSpeed + motorAdjustment;
 80025d0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80025d4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
					cMotorSpeed = cMotorSpeed + motorAdjustment;
 80025e0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025e4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80025e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ec:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
					aMotorSpeed = aMotorSpeed + motorAdjustment;
 80025f0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80025f4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

					bProp.set(bMotorSpeed);
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8002606:	4798      	blx	r3
					eProp.set(eMotorSpeed);
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 800260e:	4798      	blx	r3
					cProp.set(cMotorSpeed);
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8002616:	4798      	blx	r3
					aProp.set(aMotorSpeed);
 8002618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261a:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800261e:	4798      	blx	r3
 8002620:	e01f      	b.n	8002662 <main+0x5fa>
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	00000000 	.word	0x00000000
 800262c:	40933800 	.word	0x40933800
 8002630:	20000980 	.word	0x20000980
 8002634:	00000000 	.word	0x00000000
 8002638:	c2c80000 	.word	0xc2c80000
 800263c:	c2c80000 	.word	0xc2c80000
 8002640:	42c80000 	.word	0x42c80000
 8002644:	42c80000 	.word	0x42c80000
 8002648:	447a0000 	.word	0x447a0000
 800264c:	40490000 	.word	0x40490000
 8002650:	40440000 	.word	0x40440000
 8002654:	44fa0000 	.word	0x44fa0000
 8002658:	447a0000 	.word	0x447a0000
 800265c:	44fa0000 	.word	0x44fa0000
				if (armingSequenceStep == ARMING_SEQUENCE_LOW_THROTTLE_REQUIRED && thrust == 0.0) {
 8002660:	bf00      	nop
				}
			}

			if (thisSecond != secondsElapsed) {
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <main+0x6ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800266a:	429a      	cmp	r2, r3
 800266c:	d041      	beq.n	80026f2 <main+0x68a>
				uint8_t loopReference = rand() & 0xFF;
 800266e:	f004 ffb9 	bl	80075e4 <rand>
 8002672:	4603      	mov	r3, r0
 8002674:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
//				RecordFloatMetric(METRIC_PROPELLOR_C_SPEED, loopReference, cMotorSpeed);
//				RecordFloatMetric(METRIC_PROPELLOR_A_SPEED, loopReference, aMotorSpeed);
//				RecordFloatMetric(METRIC_PID_X_ADJUSTMENT, loopReference, xAdjustment);
//				RecordFloatMetric(METRIC_PID_Y_ADJUSTMENT, loopReference, yAdjustment);
//				RecordFloatMetric(METRIC_REMOTE_PID_PROPORTIONAL, loopReference, xAxisPid.proportional);
				RecordFloatMetric(METRIC_REMOTE_THROTTLE, loopReference, thrust);
 8002678:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800267c:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8002680:	4619      	mov	r1, r3
 8002682:	2011      	movs	r0, #17
 8002684:	f7fe fe74 	bl	8001370 <RecordFloatMetric>
				RecordFloatMetric(METRIC_ACCELEROMETER_X_POSITION, loopReference, accelerometerReading.x);
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <main+0x6b0>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	4619      	mov	r1, r3
 8002698:	2007      	movs	r0, #7
 800269a:	f7fe fe69 	bl	8001370 <RecordFloatMetric>
				RecordFloatMetric(METRIC_ACCELEROMETER_Y_POSITION, loopReference, accelerometerReading.y);
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <main+0x6b0>)
 80026a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80026a8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ac:	4619      	mov	r1, r3
 80026ae:	2008      	movs	r0, #8
 80026b0:	f7fe fe5e 	bl	8001370 <RecordFloatMetric>
//				RecordIntegerMetric(METRIC_ACCELEROMETER_SAMPLE_RATE, loopReference, accelerometerReading.readings);
//				RecordFloatMetric(METRIC_ANGULAR_X_POSITION, loopReference, angularPosition.x);
//				RecordFloatMetric(METRIC_ANGULAR_Y_POSITION, loopReference, angularPosition.y);
//				RecordFloatMetric(METRIC_ANGULAR_Z_POSITION, loopReference, angularPosition.z);
//				RecordIntegerMetric(METRIC_METRICS_BUFFER_SIZE, loopReference, metricsRingBuffer.count);
				RecordFloatMetric(METRIC_DEBUG_VALUE_1, loopReference, baseMotorSpeed);
 80026b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80026b8:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 80026bc:	4619      	mov	r1, r3
 80026be:	2017      	movs	r0, #23
 80026c0:	f7fe fe56 	bl	8001370 <RecordFloatMetric>
				RecordFloatMetric(METRIC_DEBUG_VALUE_2, loopReference, motorAdjustment);
 80026c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80026c8:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80026cc:	4619      	mov	r1, r3
 80026ce:	2018      	movs	r0, #24
 80026d0:	f7fe fe4e 	bl	8001370 <RecordFloatMetric>

				loopsPerSecond = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
				accelerometerReading.readings = 0;
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <main+0x6b0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
				gyroscopeReading.readings = 0;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <main+0x6b4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
				thisSecond = secondsElapsed;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <main+0x6ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				ClearWarnings();
 80026ee:	f7ff f937 	bl	8001960 <ClearWarnings>
			}

			if (intermediateMillis % ANALYTICS_FLUSH_FREQUENCY == 0) {
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <main+0x6b8>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <main+0x6bc>)
 80026f8:	fba3 1302 	umull	r1, r3, r3, r2
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2bc7      	cmp	r3, #199	; 0xc7
 800270a:	f63f ada6 	bhi.w	800225a <main+0x1f2>
				FlushMetrics();
 800270e:	f7fe fe5d 	bl	80013cc <FlushMetrics>
  {
 8002712:	e5a2      	b.n	800225a <main+0x1f2>
 8002714:	200000ac 	.word	0x200000ac
 8002718:	200009b4 	.word	0x200009b4
 800271c:	200000bc 	.word	0x200000bc
 8002720:	200009dc 	.word	0x200009dc
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief Callback function delay 1 mili second
  * @param stucture of htime
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	// Check correct timer 2
	if(htim->Instance == htim2.Instance){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d11d      	bne.n	8002778 <HAL_TIM_PeriodElapsedCallback+0x50>
		intermediateMillis++;					// Increase milisecond
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002744:	6013      	str	r3, [r2, #0]
		if (intermediateMillis % 1000 == 0) {
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800274c:	fba3 1302 	umull	r1, r3, r3, r2
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x42>
			secondsElapsed++;					// Increase second
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002768:	6013      	str	r3, [r2, #0]
		}

		// After 49 days, what to do? Kaboom! Until we require something better.
		// Check if milisecond max is 0xffffffff (UINT_LEAST32_MAX)
		if (intermediateMillis == UINT_LEAST32_MAX) {
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d101      	bne.n	8002778 <HAL_TIM_PeriodElapsedCallback+0x50>
			HardFault_Handler();				//Call function in stm32f4xx_it.h to monitor to user
 8002774:	f000 ff89 	bl	800368a <HardFault_Handler>
		}
	}
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000b24 	.word	0x20000b24
 8002784:	200009dc 	.word	0x200009dc
 8002788:	10624dd3 	.word	0x10624dd3
 800278c:	200000ac 	.word	0x200000ac

08002790 <HAL_TIM_IC_CaptureCallback>:
  * @brief Callback function for pwm input
  * @param stucture of htime
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	uint32_t IC1Value = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
	uint32_t IC2Value = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
	float updatedDutyCycle = 0;
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
	float updatedFrequency = 0;
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7f1b      	ldrb	r3, [r3, #28]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 80e8 	bne.w	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
	{
		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80027b6:	2100      	movs	r1, #0
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f003 fc83 	bl	80060c4 <HAL_TIM_ReadCapturedValue>
 80027be:	6138      	str	r0, [r7, #16]
		if(IC1Value!=0)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80df 	beq.w	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
		{
			IC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80027c8:	2104      	movs	r1, #4
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f003 fc7a 	bl	80060c4 <HAL_TIM_ReadCapturedValue>
 80027d0:	60f8      	str	r0, [r7, #12]
			updatedDutyCycle = ((IC2Value*100.0f)/IC1Value);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800298c <HAL_TIM_IC_CaptureCallback+0x1fc>
 80027e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f2:	edc7 7a02 	vstr	s15, [r7, #8]
			if (htim->Instance == htim4.Instance){
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_TIM_IC_CaptureCallback+0x200>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d114      	bne.n	800282c <HAL_TIM_IC_CaptureCallback+0x9c>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer4.hclckDivisor)) \
 8002802:	f002 ff0f 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b62      	ldr	r3, [pc, #392]	; (8002994 <HAL_TIM_IC_CaptureCallback+0x204>)
 800280a:	7a1b      	ldrb	r3, [r3, #8]
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	edc7 7a05 	vstr	s15, [r7, #20]
 800282a:	e04f      	b.n	80028cc <HAL_TIM_IC_CaptureCallback+0x13c>
			}
			else if (htim->Instance == htim5.Instance){
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d114      	bne.n	8002862 <HAL_TIM_IC_CaptureCallback+0xd2>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer5.hclckDivisor)) \
 8002838:	f002 fef4 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002840:	7a1b      	ldrb	r3, [r3, #8]
 8002842:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285c:	edc7 7a05 	vstr	s15, [r7, #20]
 8002860:	e034      	b.n	80028cc <HAL_TIM_IC_CaptureCallback+0x13c>
			}
			else if (htim->Instance == htim9.Instance){
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d114      	bne.n	8002898 <HAL_TIM_IC_CaptureCallback+0x108>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer9.hclckDivisor)) \
 800286e:	f002 fed9 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002876:	7a1b      	ldrb	r3, [r3, #8]
 8002878:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002892:	edc7 7a05 	vstr	s15, [r7, #20]
 8002896:	e019      	b.n	80028cc <HAL_TIM_IC_CaptureCallback+0x13c>
			}
			else if (htim->Instance == htim12.Instance){
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x218>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d113      	bne.n	80028cc <HAL_TIM_IC_CaptureCallback+0x13c>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer12.hclckDivisor)) \
 80028a4:	f002 febe 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b40      	ldr	r3, [pc, #256]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x21c>)
 80028ac:	7a1b      	ldrb	r3, [r3, #8]
 80028ae:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	edc7 7a05 	vstr	s15, [r7, #20]
			}
			/* eliminate noise that is more than twice the previous duty cycle */
			if (isnan(updatedDutyCycle)
 80028cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80028d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	d652      	bvs.n	8002984 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| isnan(updatedFrequency)
 80028de:	ed97 7a05 	vldr	s14, [r7, #20]
 80028e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80028e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d649      	bvs.n	8002984 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| updatedDutyCycle <= 0.0
 80028f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	d942      	bls.n	8002984 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| updatedFrequency <= 0.0
 80028fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	d93b      	bls.n	8002984 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| IC1Value == IC2Value){
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d037      	beq.n	8002984 <HAL_TIM_IC_CaptureCallback+0x1f4>
				return;
			}
			if (htim->Instance == htim4.Instance){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_TIM_IC_CaptureCallback+0x200>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_TIM_IC_CaptureCallback+0x19e>
				pwmInputTimer4.dutyCycle = updatedDutyCycle;
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6013      	str	r3, [r2, #0]
				pwmInputTimer4.frequency = updatedFrequency;
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	6053      	str	r3, [r2, #4]
 800292c:	e02b      	b.n	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
			}
			else if (htim->Instance == htim5.Instance){
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_TIM_IC_CaptureCallback+0x1b8>
				pwmInputTimer5.dutyCycle = updatedDutyCycle;
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_TIM_IC_CaptureCallback+0x20c>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6013      	str	r3, [r2, #0]
				pwmInputTimer5.frequency = updatedFrequency;
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6053      	str	r3, [r2, #4]
 8002946:	e01e      	b.n	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
			}
			else if (htim->Instance == htim9.Instance){
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_TIM_IC_CaptureCallback+0x210>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d10a      	bne.n	800296a <HAL_TIM_IC_CaptureCallback+0x1da>
				pwmInputTimer9.dutyCycle = updatedDutyCycle;
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6013      	str	r3, [r2, #0]
				pwmInputTimer9.frequency = updatedFrequency*2;
 800295a:	edd7 7a05 	vldr	s15, [r7, #20]
 800295e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002964:	edc3 7a01 	vstr	s15, [r3, #4]
 8002968:	e00d      	b.n	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
			}
			else if (htim->Instance == htim12.Instance){
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d107      	bne.n	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
				pwmInputTimer12.dutyCycle = updatedDutyCycle;
 8002976:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6013      	str	r3, [r2, #0]
				pwmInputTimer12.frequency = updatedFrequency;
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x21c>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6053      	str	r3, [r2, #4]
 8002982:	e000      	b.n	8002986 <HAL_TIM_IC_CaptureCallback+0x1f6>
				return;
 8002984:	bf00      	nop
		else
		{
			/* Do nothing */
		}
	}
}
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	42c80000 	.word	0x42c80000
 8002990:	20000a24 	.word	0x20000a24
 8002994:	200008ec 	.word	0x200008ec
 8002998:	20000a64 	.word	0x20000a64
 800299c:	20000970 	.word	0x20000970
 80029a0:	20000aa4 	.word	0x20000aa4
 80029a4:	20000954 	.word	0x20000954
 80029a8:	20000b64 	.word	0x20000b64
 80029ac:	200009a0 	.word	0x200009a0

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	; 0x50
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	2230      	movs	r2, #48	; 0x30
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fe08 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <SystemClock_Config+0xcc>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <SystemClock_Config+0xcc>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <SystemClock_Config+0xcc>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <SystemClock_Config+0xd0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <SystemClock_Config+0xd0>)
 80029fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <SystemClock_Config+0xd0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a16:	2302      	movs	r3, #2
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a20:	2304      	movs	r3, #4
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a24:	23a8      	movs	r3, #168	; 0xa8
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 f9c7 	bl	8004dc8 <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a40:	f000 fbc8 	bl	80031d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	2105      	movs	r1, #5
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fc20 	bl	80052a8 <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a6e:	f000 fbb1 	bl	80031d4 <Error_Handler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3750      	adds	r7, #80	; 0x50
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <MX_I2C1_Init+0x54>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <MX_I2C1_Init+0x58>)
 8002a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <MX_I2C1_Init+0x50>)
 8002ac2:	f001 f9df 	bl	8003e84 <HAL_I2C_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002acc:	f000 fb82 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200008fc 	.word	0x200008fc
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	00061a80 	.word	0x00061a80

08002ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af4:	463b      	mov	r3, r7
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b06:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b14:	2209      	movs	r2, #9
 8002b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b24:	4813      	ldr	r0, [pc, #76]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b26:	f002 fdb1 	bl	800568c <HAL_TIM_Base_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b30:	f000 fb50 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480c      	ldr	r0, [pc, #48]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b42:	f003 f9c5 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b4c:	f000 fb42 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b58:	463b      	mov	r3, r7
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_TIM2_Init+0x94>)
 8002b5e:	f003 ffd3 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b68:	f000 fb34 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000b24 	.word	0x20000b24

08002b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	f107 0320 	add.w	r3, r7, #32
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
 8002ba4:	615a      	str	r2, [r3, #20]
 8002ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002baa:	4a3e      	ldr	r2, [pc, #248]	; (8002ca4 <MX_TIM3_Init+0x12c>)
 8002bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002bae:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bb0:	2253      	movs	r2, #83	; 0x53
 8002bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bbc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bce:	4834      	ldr	r0, [pc, #208]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bd0:	f002 fd5c 	bl	800568c <HAL_TIM_Base_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bda:	f000 fafb 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be8:	4619      	mov	r1, r3
 8002bea:	482d      	ldr	r0, [pc, #180]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bec:	f003 f970 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bf6:	f000 faed 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bfa:	4829      	ldr	r0, [pc, #164]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002bfc:	f002 fd95 	bl	800572a <HAL_TIM_PWM_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c06:	f000 fae5 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c12:	f107 0320 	add.w	r3, r7, #32
 8002c16:	4619      	mov	r1, r3
 8002c18:	4821      	ldr	r0, [pc, #132]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002c1a:	f003 ff75 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c24:	f000 fad6 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c28:	2360      	movs	r3, #96	; 0x60
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002c42:	f003 f87f 	bl	8005d44 <HAL_TIM_PWM_ConfigChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002c4c:	f000 fac2 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2204      	movs	r2, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002c58:	f003 f874 	bl	8005d44 <HAL_TIM_PWM_ConfigChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002c62:	f000 fab7 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2208      	movs	r2, #8
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002c6e:	f003 f869 	bl	8005d44 <HAL_TIM_PWM_ConfigChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002c78:	f000 faac 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	220c      	movs	r2, #12
 8002c80:	4619      	mov	r1, r3
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002c84:	f003 f85e 	bl	8005d44 <HAL_TIM_PWM_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002c8e:	f000 faa1 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c92:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <MX_TIM3_Init+0x128>)
 8002c94:	f000 fc50 	bl	8003538 <HAL_TIM_MspPostInit>

}
 8002c98:	bf00      	nop
 8002c9a:	3738      	adds	r7, #56	; 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200009e4 	.word	0x200009e4
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <MX_TIM4_Init+0x104>)
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <MX_TIM4_Init+0x108>)
 8002cd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <MX_TIM4_Init+0x104>)
 8002cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ce0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b32      	ldr	r3, [pc, #200]	; (8002dac <MX_TIM4_Init+0x104>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <MX_TIM4_Init+0x104>)
 8002cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <MX_TIM4_Init+0x104>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <MX_TIM4_Init+0x104>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cfc:	482b      	ldr	r0, [pc, #172]	; (8002dac <MX_TIM4_Init+0x104>)
 8002cfe:	f002 fcc5 	bl	800568c <HAL_TIM_Base_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002d08:	f000 fa64 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002d0c:	4827      	ldr	r0, [pc, #156]	; (8002dac <MX_TIM4_Init+0x104>)
 8002d0e:	f002 fdd7 	bl	80058c0 <HAL_TIM_IC_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002d18:	f000 fa5c 	bl	80031d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002d20:	2350      	movs	r3, #80	; 0x50
 8002d22:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	4619      	mov	r1, r3
 8002d32:	481e      	ldr	r0, [pc, #120]	; (8002dac <MX_TIM4_Init+0x104>)
 8002d34:	f003 f983 	bl	800603e <HAL_TIM_SlaveConfigSynchro>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002d3e:	f000 fa49 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4816      	ldr	r0, [pc, #88]	; (8002dac <MX_TIM4_Init+0x104>)
 8002d52:	f003 fed9 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8002d5c:	f000 fa3a 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d64:	2301      	movs	r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2200      	movs	r2, #0
 8002d74:	4619      	mov	r1, r3
 8002d76:	480d      	ldr	r0, [pc, #52]	; (8002dac <MX_TIM4_Init+0x104>)
 8002d78:	f002 ff48 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8002d82:	f000 fa27 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d86:	2302      	movs	r3, #2
 8002d88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	2204      	movs	r2, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <MX_TIM4_Init+0x104>)
 8002d96:	f002 ff39 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8002da0:	f000 fa18 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	3730      	adds	r7, #48	; 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000a24 	.word	0x20000a24
 8002db0:	40000800 	.word	0x40000800

08002db4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
 8002dc8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002de0:	4b35      	ldr	r3, [pc, #212]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002de2:	4a36      	ldr	r2, [pc, #216]	; (8002ebc <MX_TIM5_Init+0x108>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002de8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff;
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dfa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e08:	482b      	ldr	r0, [pc, #172]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002e0a:	f002 fc3f 	bl	800568c <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8002e14:	f000 f9de 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002e18:	4827      	ldr	r0, [pc, #156]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002e1a:	f002 fd51 	bl	80058c0 <HAL_TIM_IC_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002e24:	f000 f9d6 	bl	80031d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002e28:	2304      	movs	r3, #4
 8002e2a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002e2c:	2350      	movs	r3, #80	; 0x50
 8002e2e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481e      	ldr	r0, [pc, #120]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002e40:	f003 f8fd 	bl	800603e <HAL_TIM_SlaveConfigSynchro>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002e4a:	f000 f9c3 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4816      	ldr	r0, [pc, #88]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002e5e:	f003 fe53 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8002e68:	f000 f9b4 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e70:	2301      	movs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4619      	mov	r1, r3
 8002e82:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002e84:	f002 fec2 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8002e8e:	f000 f9a1 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002e92:	2302      	movs	r3, #2
 8002e94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002e96:	2302      	movs	r3, #2
 8002e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_TIM5_Init+0x104>)
 8002ea2:	f002 feb3 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM5_Init+0xfc>
  {
    Error_Handler();
 8002eac:	f000 f992 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002eb0:	bf00      	nop
 8002eb2:	3730      	adds	r7, #48	; 0x30
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000a64 	.word	0x20000a64
 8002ebc:	40000c00 	.word	0x40000c00

08002ec0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <MX_TIM9_Init+0xe0>)
 8002ee6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 999;
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002eea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eee:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xffff;
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002f0a:	4824      	ldr	r0, [pc, #144]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f0c:	f002 fbbe 	bl	800568c <HAL_TIM_Base_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8002f16:	f000 f95d 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002f1a:	4820      	ldr	r0, [pc, #128]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f1c:	f002 fcd0 	bl	80058c0 <HAL_TIM_IC_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM9_Init+0x6a>
  {
    Error_Handler();
 8002f26:	f000 f955 	bl	80031d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002f2e:	2350      	movs	r3, #80	; 0x50
 8002f30:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4816      	ldr	r0, [pc, #88]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f42:	f003 f87c 	bl	800603e <HAL_TIM_SlaveConfigSynchro>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM9_Init+0x90>
  {
    Error_Handler();
 8002f4c:	f000 f942 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f54:	2301      	movs	r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	2200      	movs	r2, #0
 8002f64:	4619      	mov	r1, r3
 8002f66:	480d      	ldr	r0, [pc, #52]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f68:	f002 fe50 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM9_Init+0xb6>
  {
    Error_Handler();
 8002f72:	f000 f92f 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f76:	2302      	movs	r3, #2
 8002f78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2204      	movs	r2, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_TIM9_Init+0xdc>)
 8002f86:	f002 fe41 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM9_Init+0xd4>
  {
    Error_Handler();
 8002f90:	f000 f920 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	3728      	adds	r7, #40	; 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000aa4 	.word	0x20000aa4
 8002fa0:	40014000 	.word	0x40014000

08002fa4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <MX_TIM12_Init+0xe0>)
 8002fca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 999;
 8002fcc:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002fce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff;
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002fee:	4824      	ldr	r0, [pc, #144]	; (8003080 <MX_TIM12_Init+0xdc>)
 8002ff0:	f002 fb4c 	bl	800568c <HAL_TIM_Base_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8002ffa:	f000 f8eb 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002ffe:	4820      	ldr	r0, [pc, #128]	; (8003080 <MX_TIM12_Init+0xdc>)
 8003000:	f002 fc5e 	bl	80058c0 <HAL_TIM_IC_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM12_Init+0x6a>
  {
    Error_Handler();
 800300a:	f000 f8e3 	bl	80031d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800300e:	2304      	movs	r3, #4
 8003010:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003012:	2350      	movs	r3, #80	; 0x50
 8003014:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	4619      	mov	r1, r3
 8003024:	4816      	ldr	r0, [pc, #88]	; (8003080 <MX_TIM12_Init+0xdc>)
 8003026:	f003 f80a 	bl	800603e <HAL_TIM_SlaveConfigSynchro>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM12_Init+0x90>
  {
    Error_Handler();
 8003030:	f000 f8d0 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003034:	2300      	movs	r3, #0
 8003036:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003038:	2301      	movs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2200      	movs	r2, #0
 8003048:	4619      	mov	r1, r3
 800304a:	480d      	ldr	r0, [pc, #52]	; (8003080 <MX_TIM12_Init+0xdc>)
 800304c:	f002 fdde 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM12_Init+0xb6>
  {
    Error_Handler();
 8003056:	f000 f8bd 	bl	80031d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800305a:	2302      	movs	r3, #2
 800305c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800305e:	2302      	movs	r3, #2
 8003060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	2204      	movs	r2, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <MX_TIM12_Init+0xdc>)
 800306a:	f002 fdcf 	bl	8005c0c <HAL_TIM_IC_ConfigChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM12_Init+0xd4>
  {
    Error_Handler();
 8003074:	f000 f8ae 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003078:	bf00      	nop
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000b64 	.word	0x20000b64
 8003084:	40001800 	.word	0x40001800

08003088 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <MX_UART4_Init+0x4c>)
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <MX_UART4_Init+0x50>)
 8003090:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <MX_UART4_Init+0x4c>)
 8003094:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003098:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <MX_UART4_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <MX_UART4_Init+0x4c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <MX_UART4_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <MX_UART4_Init+0x4c>)
 80030ae:	220c      	movs	r2, #12
 80030b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <MX_UART4_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <MX_UART4_Init+0x4c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <MX_UART4_Init+0x4c>)
 80030c0:	f003 fdb2 	bl	8006c28 <HAL_UART_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80030ca:	f000 f883 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000ae4 	.word	0x20000ae4
 80030d8:	40004c00 	.word	0x40004c00

080030dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	; 0x30
 80030e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	4b35      	ldr	r3, [pc, #212]	; (80031cc <MX_GPIO_Init+0xf0>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <MX_GPIO_Init+0xf0>)
 80030fc:	f043 0310 	orr.w	r3, r3, #16
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b32      	ldr	r3, [pc, #200]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a2d      	ldr	r2, [pc, #180]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <MX_GPIO_Init+0xf0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <MX_GPIO_Init+0xf0>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <MX_GPIO_Init+0xf0>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <MX_GPIO_Init+0xf0>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80031a0:	480b      	ldr	r0, [pc, #44]	; (80031d0 <MX_GPIO_Init+0xf4>)
 80031a2:	f000 fe55 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80031a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80031aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	4619      	mov	r1, r3
 80031be:	4804      	ldr	r0, [pc, #16]	; (80031d0 <MX_GPIO_Init+0xf4>)
 80031c0:	f000 fcac 	bl	8003b1c <HAL_GPIO_Init>

}
 80031c4:	bf00      	nop
 80031c6:	3730      	adds	r7, #48	; 0x30
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020c00 	.word	0x40020c00

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_MspInit+0x4c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_MspInit+0x4c>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_MspInit+0x4c>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_MspInit+0x4c>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_MspInit+0x4c>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800

08003234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_I2C_MspInit+0x84>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12c      	bne.n	80032b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_I2C_MspInit+0x88>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_I2C_MspInit+0x88>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_I2C_MspInit+0x88>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003278:	2312      	movs	r3, #18
 800327a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800327c:	2301      	movs	r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003284:	2304      	movs	r3, #4
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4619      	mov	r1, r3
 800328e:	480c      	ldr	r0, [pc, #48]	; (80032c0 <HAL_I2C_MspInit+0x8c>)
 8003290:	f000 fc44 	bl	8003b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_I2C_MspInit+0x88>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_I2C_MspInit+0x88>)
 800329e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032a2:	6413      	str	r3, [r2, #64]	; 0x40
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_I2C_MspInit+0x88>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032b0:	bf00      	nop
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40005400 	.word	0x40005400
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020400 	.word	0x40020400

080032c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b092      	sub	sp, #72	; 0x48
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d116      	bne.n	8003314 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ea:	4b8a      	ldr	r3, [pc, #552]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a89      	ldr	r2, [pc, #548]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b87      	ldr	r3, [pc, #540]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	201c      	movs	r0, #28
 8003308:	f000 fbd1 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800330c:	201c      	movs	r0, #28
 800330e:	f000 fbea 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003312:	e0fb      	b.n	800350c <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM3)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a7f      	ldr	r2, [pc, #508]	; (8003518 <HAL_TIM_Base_MspInit+0x254>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10e      	bne.n	800333c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003322:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	4a7b      	ldr	r2, [pc, #492]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6413      	str	r3, [r2, #64]	; 0x40
 800332e:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800333a:	e0e7      	b.n	800350c <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM4)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a76      	ldr	r2, [pc, #472]	; (800351c <HAL_TIM_Base_MspInit+0x258>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d134      	bne.n	80033b0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
 800334a:	4b72      	ldr	r3, [pc, #456]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a71      	ldr	r2, [pc, #452]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b6f      	ldr	r3, [pc, #444]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a6a      	ldr	r2, [pc, #424]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800337e:	2340      	movs	r3, #64	; 0x40
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800338e:	2302      	movs	r3, #2
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003396:	4619      	mov	r1, r3
 8003398:	4861      	ldr	r0, [pc, #388]	; (8003520 <HAL_TIM_Base_MspInit+0x25c>)
 800339a:	f000 fbbf 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	201e      	movs	r0, #30
 80033a4:	f000 fb83 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033a8:	201e      	movs	r0, #30
 80033aa:	f000 fb9c 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 80033ae:	e0ad      	b.n	800350c <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM5)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_TIM_Base_MspInit+0x260>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d134      	bne.n	8003424 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80033c4:	f043 0308 	orr.w	r3, r3, #8
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b52      	ldr	r3, [pc, #328]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	4b4e      	ldr	r3, [pc, #312]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a4d      	ldr	r2, [pc, #308]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033f2:	2301      	movs	r3, #1
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003402:	2302      	movs	r3, #2
 8003404:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800340a:	4619      	mov	r1, r3
 800340c:	4846      	ldr	r0, [pc, #280]	; (8003528 <HAL_TIM_Base_MspInit+0x264>)
 800340e:	f000 fb85 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2100      	movs	r1, #0
 8003416:	2032      	movs	r0, #50	; 0x32
 8003418:	f000 fb49 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800341c:	2032      	movs	r0, #50	; 0x32
 800341e:	f000 fb62 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 8003422:	e073      	b.n	800350c <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM9)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a40      	ldr	r2, [pc, #256]	; (800352c <HAL_TIM_Base_MspInit+0x268>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d134      	bne.n	8003498 <HAL_TIM_Base_MspInit+0x1d4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	4b38      	ldr	r3, [pc, #224]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a37      	ldr	r2, [pc, #220]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a30      	ldr	r2, [pc, #192]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 8003454:	f043 0310 	orr.w	r3, r3, #16
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003466:	2320      	movs	r3, #32
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003472:	2303      	movs	r3, #3
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003476:	2303      	movs	r3, #3
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800347a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800347e:	4619      	mov	r1, r3
 8003480:	482b      	ldr	r0, [pc, #172]	; (8003530 <HAL_TIM_Base_MspInit+0x26c>)
 8003482:	f000 fb4b 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	2018      	movs	r0, #24
 800348c:	f000 fb0f 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003490:	2018      	movs	r0, #24
 8003492:	f000 fb28 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 8003496:	e039      	b.n	800350c <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM12)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a25      	ldr	r2, [pc, #148]	; (8003534 <HAL_TIM_Base_MspInit+0x270>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d134      	bne.n	800350c <HAL_TIM_Base_MspInit+0x248>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80034ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_TIM_Base_MspInit+0x250>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e8:	2303      	movs	r3, #3
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80034ec:	2309      	movs	r3, #9
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034f4:	4619      	mov	r1, r3
 80034f6:	480a      	ldr	r0, [pc, #40]	; (8003520 <HAL_TIM_Base_MspInit+0x25c>)
 80034f8:	f000 fb10 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2100      	movs	r1, #0
 8003500:	202b      	movs	r0, #43	; 0x2b
 8003502:	f000 fad4 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003506:	202b      	movs	r0, #43	; 0x2b
 8003508:	f000 faed 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 800350c:	bf00      	nop
 800350e:	3748      	adds	r7, #72	; 0x48
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40020400 	.word	0x40020400
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40020000 	.word	0x40020000
 800352c:	40014000 	.word	0x40014000
 8003530:	40021000 	.word	0x40021000
 8003534:	40001800 	.word	0x40001800

08003538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a21      	ldr	r2, [pc, #132]	; (80035dc <HAL_TIM_MspPostInit+0xa4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d13b      	bne.n	80035d2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_TIM_MspPostInit+0xa8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_TIM_MspPostInit+0xa8>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_TIM_MspPostInit+0xa8>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_TIM_MspPostInit+0xa8>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_TIM_MspPostInit+0xa8>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_TIM_MspPostInit+0xa8>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003592:	23c0      	movs	r3, #192	; 0xc0
 8003594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003596:	2302      	movs	r3, #2
 8003598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359e:	2303      	movs	r3, #3
 80035a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035a2:	2302      	movs	r3, #2
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	4619      	mov	r1, r3
 80035ac:	480d      	ldr	r0, [pc, #52]	; (80035e4 <HAL_TIM_MspPostInit+0xac>)
 80035ae:	f000 fab5 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035b2:	2303      	movs	r3, #3
 80035b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035c2:	2302      	movs	r3, #2
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4619      	mov	r1, r3
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <HAL_TIM_MspPostInit+0xb0>)
 80035ce:	f000 faa5 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	; 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40020000 	.word	0x40020000
 80035e8:	40020400 	.word	0x40020400

080035ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_UART_MspInit+0x84>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12c      	bne.n	8003668 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_UART_MspInit+0x88>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_UART_MspInit+0x88>)
 8003618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_UART_MspInit+0x88>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_UART_MspInit+0x88>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_UART_MspInit+0x88>)
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_UART_MspInit+0x88>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003646:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003650:	2301      	movs	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003654:	2303      	movs	r3, #3
 8003656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003658:	2308      	movs	r3, #8
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	4805      	ldr	r0, [pc, #20]	; (8003678 <HAL_UART_MspInit+0x8c>)
 8003664:	f000 fa5a 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003668:	bf00      	nop
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40004c00 	.word	0x40004c00
 8003674:	40023800 	.word	0x40023800
 8003678:	40020800 	.word	0x40020800

0800367c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <HardFault_Handler+0x4>

08003690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <MemManage_Handler+0x4>

08003696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d0:	f000 f8f2 	bl	80038b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80036de:	f002 f98d 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000aa4 	.word	0x20000aa4

080036ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <TIM2_IRQHandler+0x10>)
 80036f2:	f002 f983 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000b24 	.word	0x20000b24

08003700 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <TIM4_IRQHandler+0x10>)
 8003706:	f002 f979 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000a24 	.word	0x20000a24

08003714 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800371a:	f002 f96f 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000b64 	.word	0x20000b64

08003728 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <TIM5_IRQHandler+0x10>)
 800372e:	f002 f965 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000a64 	.word	0x20000a64

0800373c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <_sbrk+0x50>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <_sbrk+0x16>
		heap_end = &end;
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <_sbrk+0x50>)
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <_sbrk+0x54>)
 8003750:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <_sbrk+0x50>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <_sbrk+0x50>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	466a      	mov	r2, sp
 8003762:	4293      	cmp	r3, r2
 8003764:	d907      	bls.n	8003776 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003766:	f003 ff0b 	bl	8007580 <__errno>
 800376a:	4602      	mov	r2, r0
 800376c:	230c      	movs	r3, #12
 800376e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e006      	b.n	8003784 <_sbrk+0x48>
	}

	heap_end += incr;
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <_sbrk+0x50>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	4a03      	ldr	r2, [pc, #12]	; (800378c <_sbrk+0x50>)
 8003780:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200000a0 	.word	0x200000a0
 8003790:	20000bb0 	.word	0x20000bb0

08003794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <SystemInit+0x28>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <SystemInit+0x28>)
 80037a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <SystemInit+0x28>)
 80037aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ae:	609a      	str	r2, [r3, #8]
#endif
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037c6:	e003      	b.n	80037d0 <LoopCopyDataInit>

080037c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ce:	3104      	adds	r1, #4

080037d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037d0:	480b      	ldr	r0, [pc, #44]	; (8003800 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037d8:	d3f6      	bcc.n	80037c8 <CopyDataInit>
  ldr  r2, =_sbss
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037dc:	e002      	b.n	80037e4 <LoopFillZerobss>

080037de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037e0:	f842 3b04 	str.w	r3, [r2], #4

080037e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037e8:	d3f9      	bcc.n	80037de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037ea:	f7ff ffd3 	bl	8003794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ee:	f003 fecd 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f2:	f7fe fc39 	bl	8002068 <main>
  bx  lr    
 80037f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037fc:	080084b8 	.word	0x080084b8
  ldr  r0, =_sdata
 8003800:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003804:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003808:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800380c:	20000bac 	.word	0x20000bac

08003810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC_IRQHandler>
	...

08003814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_Init+0x40>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <HAL_Init+0x40>)
 800381e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_Init+0x40>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_Init+0x40>)
 800382a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_Init+0x40>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <HAL_Init+0x40>)
 8003836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800383c:	2003      	movs	r0, #3
 800383e:	f000 f92b 	bl	8003a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003842:	2000      	movs	r0, #0
 8003844:	f000 f808 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003848:	f7ff fccc 	bl	80031e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00

08003858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_InitTick+0x54>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_InitTick+0x58>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f943 	bl	8003b02 <HAL_SYSTICK_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00e      	b.n	80038a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0f      	cmp	r3, #15
 800388a:	d80a      	bhi.n	80038a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800388c:	2200      	movs	r2, #0
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f000 f90b 	bl	8003aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003898:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <HAL_InitTick+0x5c>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	20000014 	.word	0x20000014
 80038b4:	20000010 	.word	0x20000010

080038b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_IncTick+0x20>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_IncTick+0x24>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_IncTick+0x24>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000014 	.word	0x20000014
 80038dc:	20000ba4 	.word	0x20000ba4

080038e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return uwTick;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_GetTick+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000ba4 	.word	0x20000ba4

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392a:	4a04      	ldr	r2, [pc, #16]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <__NVIC_EnableIRQ+0x38>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000e100 	.word	0xe000e100

08003998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	db0a      	blt.n	80039c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	490c      	ldr	r1, [pc, #48]	; (80039e4 <__NVIC_SetPriority+0x4c>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c0:	e00a      	b.n	80039d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4908      	ldr	r1, [pc, #32]	; (80039e8 <__NVIC_SetPriority+0x50>)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3b04      	subs	r3, #4
 80039d0:	0112      	lsls	r2, r2, #4
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	440b      	add	r3, r1
 80039d6:	761a      	strb	r2, [r3, #24]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf28      	it	cs
 8003a0a:	2304      	movcs	r3, #4
 8003a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d902      	bls.n	8003a1c <NVIC_EncodePriority+0x30>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3b03      	subs	r3, #3
 8003a1a:	e000      	b.n	8003a1e <NVIC_EncodePriority+0x32>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	401a      	ands	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a34:	f04f 31ff 	mov.w	r1, #4294967295
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43d9      	mvns	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	4313      	orrs	r3, r2
         );
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a64:	d301      	bcc.n	8003a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00f      	b.n	8003a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <SysTick_Config+0x40>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a72:	210f      	movs	r1, #15
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f7ff ff8e 	bl	8003998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <SysTick_Config+0x40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <SysTick_Config+0x40>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	e000e010 	.word	0xe000e010

08003a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff29 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac0:	f7ff ff3e 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f7ff ff8e 	bl	80039ec <NVIC_EncodePriority>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff5d 	bl	8003998 <__NVIC_SetPriority>
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff31 	bl	800395c <__NVIC_EnableIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ffa2 	bl	8003a54 <SysTick_Config>
 8003b10:	4603      	mov	r3, r0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e16b      	b.n	8003e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f040 815a 	bne.w	8003e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d00b      	beq.n	8003b76 <HAL_GPIO_Init+0x5a>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d007      	beq.n	8003b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b6a:	2b11      	cmp	r3, #17
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b12      	cmp	r3, #18
 8003b74:	d130      	bne.n	8003bd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0201 	and.w	r2, r3, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0xfc>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b12      	cmp	r3, #18
 8003c16:	d123      	bne.n	8003c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	08da      	lsrs	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3208      	adds	r2, #8
 8003c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	220f      	movs	r2, #15
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	69b9      	ldr	r1, [r7, #24]
 8003c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80b4 	beq.w	8003e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_GPIO_Init+0x308>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	4a5e      	ldr	r2, [pc, #376]	; (8003e24 <HAL_GPIO_Init+0x308>)
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <HAL_GPIO_Init+0x308>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cbe:	4a5a      	ldr	r2, [pc, #360]	; (8003e28 <HAL_GPIO_Init+0x30c>)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a51      	ldr	r2, [pc, #324]	; (8003e2c <HAL_GPIO_Init+0x310>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02b      	beq.n	8003d42 <HAL_GPIO_Init+0x226>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a50      	ldr	r2, [pc, #320]	; (8003e30 <HAL_GPIO_Init+0x314>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d025      	beq.n	8003d3e <HAL_GPIO_Init+0x222>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4f      	ldr	r2, [pc, #316]	; (8003e34 <HAL_GPIO_Init+0x318>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <HAL_GPIO_Init+0x21e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4e      	ldr	r2, [pc, #312]	; (8003e38 <HAL_GPIO_Init+0x31c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x21a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4d      	ldr	r2, [pc, #308]	; (8003e3c <HAL_GPIO_Init+0x320>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x216>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4c      	ldr	r2, [pc, #304]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x212>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <HAL_GPIO_Init+0x328>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x20e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4a      	ldr	r2, [pc, #296]	; (8003e48 <HAL_GPIO_Init+0x32c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x20a>
 8003d22:	2307      	movs	r3, #7
 8003d24:	e00e      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d26:	2308      	movs	r3, #8
 8003d28:	e00c      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d2a:	2306      	movs	r3, #6
 8003d2c:	e00a      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d2e:	2305      	movs	r3, #5
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d42:	2300      	movs	r3, #0
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d54:	4934      	ldr	r1, [pc, #208]	; (8003e28 <HAL_GPIO_Init+0x30c>)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d62:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d86:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d8c:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db6:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e04:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	f67f ae90 	bls.w	8003b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3724      	adds	r7, #36	; 0x24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	40020400 	.word	0x40020400
 8003e34:	40020800 	.word	0x40020800
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40021400 	.word	0x40021400
 8003e44:	40021800 	.word	0x40021800
 8003e48:	40021c00 	.word	0x40021c00
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e6c:	e003      	b.n	8003e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	041a      	lsls	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e11f      	b.n	80040d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff f9c2 	bl	8003234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f001 fba8 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8003eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a7b      	ldr	r2, [pc, #492]	; (80040e0 <HAL_I2C_Init+0x25c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d807      	bhi.n	8003f08 <HAL_I2C_Init+0x84>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_I2C_Init+0x260>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf94      	ite	ls
 8003f00:	2301      	movls	r3, #1
 8003f02:	2300      	movhi	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e006      	b.n	8003f16 <HAL_I2C_Init+0x92>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a77      	ldr	r2, [pc, #476]	; (80040e8 <HAL_I2C_Init+0x264>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bf94      	ite	ls
 8003f10:	2301      	movls	r3, #1
 8003f12:	2300      	movhi	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0db      	b.n	80040d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a72      	ldr	r2, [pc, #456]	; (80040ec <HAL_I2C_Init+0x268>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0c9b      	lsrs	r3, r3, #18
 8003f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a64      	ldr	r2, [pc, #400]	; (80040e0 <HAL_I2C_Init+0x25c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d802      	bhi.n	8003f58 <HAL_I2C_Init+0xd4>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3301      	adds	r3, #1
 8003f56:	e009      	b.n	8003f6c <HAL_I2C_Init+0xe8>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	4a63      	ldr	r2, [pc, #396]	; (80040f0 <HAL_I2C_Init+0x26c>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	099b      	lsrs	r3, r3, #6
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4956      	ldr	r1, [pc, #344]	; (80040e0 <HAL_I2C_Init+0x25c>)
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	d80d      	bhi.n	8003fa8 <HAL_I2C_Init+0x124>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e59      	subs	r1, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	bf38      	it	cc
 8003fa4:	2304      	movcc	r3, #4
 8003fa6:	e04f      	b.n	8004048 <HAL_I2C_Init+0x1c4>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d111      	bne.n	8003fd4 <HAL_I2C_Init+0x150>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e012      	b.n	8003ffa <HAL_I2C_Init+0x176>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e58      	subs	r0, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	0099      	lsls	r1, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Init+0x17e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e022      	b.n	8004048 <HAL_I2C_Init+0x1c4>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_I2C_Init+0x1a4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e58      	subs	r0, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	440b      	add	r3, r1
 8004018:	fbb0 f3f3 	udiv	r3, r0, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	e00f      	b.n	8004048 <HAL_I2C_Init+0x1c4>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	6809      	ldr	r1, [r1, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6911      	ldr	r1, [r2, #16]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	430b      	orrs	r3, r1
 800408a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	000186a0 	.word	0x000186a0
 80040e4:	001e847f 	.word	0x001e847f
 80040e8:	003d08ff 	.word	0x003d08ff
 80040ec:	431bde83 	.word	0x431bde83
 80040f0:	10624dd3 	.word	0x10624dd3

080040f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	461a      	mov	r2, r3
 8004100:	460b      	mov	r3, r1
 8004102:	817b      	strh	r3, [r7, #10]
 8004104:	4613      	mov	r3, r2
 8004106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff fbea 	bl	80038e0 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b20      	cmp	r3, #32
 8004118:	f040 80e0 	bne.w	80042dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2319      	movs	r3, #25
 8004122:	2201      	movs	r2, #1
 8004124:	4970      	ldr	r1, [pc, #448]	; (80042e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fc70 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
 8004134:	e0d3      	b.n	80042de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_I2C_Master_Transmit+0x50>
 8004140:	2302      	movs	r3, #2
 8004142:	e0cc      	b.n	80042de <HAL_I2C_Master_Transmit+0x1ea>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b01      	cmp	r3, #1
 8004158:	d007      	beq.n	800416a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2221      	movs	r2, #33	; 0x21
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2210      	movs	r2, #16
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	893a      	ldrh	r2, [r7, #8]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a50      	ldr	r2, [pc, #320]	; (80042ec <HAL_I2C_Master_Transmit+0x1f8>)
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041ac:	8979      	ldrh	r1, [r7, #10]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fac2 	bl	800473c <I2C_MasterRequestWrite>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e08d      	b.n	80042de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041d8:	e066      	b.n	80042a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fcea 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06b      	b.n	80042de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11b      	bne.n	800427c <HAL_I2C_Master_Transmit+0x188>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	d017      	beq.n	800427c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	6a39      	ldr	r1, [r7, #32]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fcda 	bl	8004c3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e01a      	b.n	80042de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d194      	bne.n	80041da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	00100002 	.word	0x00100002
 80042ec:	ffff0000 	.word	0xffff0000

080042f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430a:	f7ff fae9 	bl	80038e0 <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	f040 8208 	bne.w	800472e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2319      	movs	r3, #25
 8004324:	2201      	movs	r2, #1
 8004326:	497b      	ldr	r1, [pc, #492]	; (8004514 <HAL_I2C_Mem_Read+0x224>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fb6f 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	e1fb      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Mem_Read+0x56>
 8004342:	2302      	movs	r3, #2
 8004344:	e1f4      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	; 0x22
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a5b      	ldr	r2, [pc, #364]	; (8004518 <HAL_I2C_Mem_Read+0x228>)
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ae:	88f8      	ldrh	r0, [r7, #6]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	8979      	ldrh	r1, [r7, #10]
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4603      	mov	r3, r0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fa3e 	bl	8004840 <I2C_RequestMemoryRead>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1b0      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d113      	bne.n	80043fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e184      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	2b01      	cmp	r3, #1
 8004404:	d11b      	bne.n	800443e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e164      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	2b02      	cmp	r3, #2
 8004444:	d11b      	bne.n	800447e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004454:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	e144      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004494:	e138      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	2b03      	cmp	r3, #3
 800449c:	f200 80f1 	bhi.w	8004682 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d123      	bne.n	80044f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fc05 	bl	8004cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e139      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ee:	e10b      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d14e      	bne.n	8004596 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	2200      	movs	r2, #0
 8004500:	4906      	ldr	r1, [pc, #24]	; (800451c <HAL_I2C_Mem_Read+0x22c>)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fa82 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e10e      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
 8004512:	bf00      	nop
 8004514:	00100002 	.word	0x00100002
 8004518:	ffff0000 	.word	0xffff0000
 800451c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004594:	e0b8      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2200      	movs	r2, #0
 800459e:	4966      	ldr	r1, [pc, #408]	; (8004738 <HAL_I2C_Mem_Read+0x448>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa33 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0bf      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2200      	movs	r2, #0
 80045fa:	494f      	ldr	r1, [pc, #316]	; (8004738 <HAL_I2C_Mem_Read+0x448>)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fa05 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e091      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004680:	e042      	b.n	8004708 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fb18 	bl	8004cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e04c      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d118      	bne.n	8004708 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f aec2 	bne.w	8004496 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3728      	adds	r7, #40	; 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	00010004 	.word	0x00010004

0800473c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	460b      	mov	r3, r1
 800474a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d006      	beq.n	8004766 <I2C_MasterRequestWrite+0x2a>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d003      	beq.n	8004766 <I2C_MasterRequestWrite+0x2a>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004764:	d108      	bne.n	8004778 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e00b      	b.n	8004790 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b12      	cmp	r3, #18
 800477e:	d107      	bne.n	8004790 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f935 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e035      	b.n	800482e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ca:	d108      	bne.n	80047de <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047cc:	897b      	ldrh	r3, [r7, #10]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047da:	611a      	str	r2, [r3, #16]
 80047dc:	e01b      	b.n	8004816 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	11db      	asrs	r3, r3, #7
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f003 0306 	and.w	r3, r3, #6
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f063 030f 	orn	r3, r3, #15
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	490f      	ldr	r1, [pc, #60]	; (8004838 <I2C_MasterRequestWrite+0xfc>)
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f95c 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e010      	b.n	800482e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800480c:	897b      	ldrh	r3, [r7, #10]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4908      	ldr	r1, [pc, #32]	; (800483c <I2C_MasterRequestWrite+0x100>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f94c 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	00010008 	.word	0x00010008
 800483c:	00010002 	.word	0x00010002

08004840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	460b      	mov	r3, r1
 8004854:	813b      	strh	r3, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	2200      	movs	r2, #0
 8004882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8c0 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0a9      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ac:	897b      	ldrh	r3, [r7, #10]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	4951      	ldr	r1, [pc, #324]	; (8004a08 <I2C_RequestMemoryRead+0x1c8>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8f9 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e096      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	6a39      	ldr	r1, [r7, #32]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f963 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d107      	bne.n	8004910 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e075      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800491a:	893b      	ldrh	r3, [r7, #8]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	611a      	str	r2, [r3, #16]
 8004924:	e021      	b.n	800496a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004926:	893b      	ldrh	r3, [r7, #8]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	b29b      	uxth	r3, r3
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	6a39      	ldr	r1, [r7, #32]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f93d 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b04      	cmp	r3, #4
 800494a:	d107      	bne.n	800495c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e04f      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004960:	893b      	ldrh	r3, [r7, #8]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	6a39      	ldr	r1, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f922 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b04      	cmp	r3, #4
 8004980:	d107      	bne.n	8004992 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e034      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f82a 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e013      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049d8:	897b      	ldrh	r3, [r7, #10]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	6a3a      	ldr	r2, [r7, #32]
 80049ec:	4906      	ldr	r1, [pc, #24]	; (8004a08 <I2C_RequestMemoryRead+0x1c8>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f863 	bl	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	00010002 	.word	0x00010002

08004a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	e025      	b.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d021      	beq.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fe ff5b 	bl	80038e0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e023      	b.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10d      	bne.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	e00c      	b.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d0b6      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac8:	e051      	b.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d123      	bne.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e046      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d021      	beq.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fe fed9 	bl	80038e0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d116      	bne.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e020      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e00b      	b.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d18d      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc4:	e02d      	b.n	8004c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f8ce 	bl	8004d68 <I2C_IsAcknowledgeFailed>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e02d      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d021      	beq.n	8004c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fe fe7f 	bl	80038e0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e007      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b80      	cmp	r3, #128	; 0x80
 8004c2e:	d1ca      	bne.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c46:	e02d      	b.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f88d 	bl	8004d68 <I2C_IsAcknowledgeFailed>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e02d      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d021      	beq.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fe fe3e 	bl	80038e0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d116      	bne.n	8004ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e007      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d1ca      	bne.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc8:	e042      	b.n	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d119      	bne.n	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0210 	mvn.w	r2, #16
 8004ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e029      	b.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7fe fde8 	bl	80038e0 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e007      	b.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d1b5      	bne.n	8004cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d11b      	bne.n	8004db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e25b      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d075      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de6:	4ba3      	ldr	r3, [pc, #652]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d00c      	beq.n	8004e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004df2:	4ba0      	ldr	r3, [pc, #640]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d112      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfe:	4b9d      	ldr	r3, [pc, #628]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4b99      	ldr	r3, [pc, #612]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05b      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x108>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d157      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e236      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x74>
 8004e2e:	4b91      	ldr	r3, [pc, #580]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a90      	ldr	r2, [pc, #576]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e01d      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x98>
 8004e46:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a8a      	ldr	r2, [pc, #552]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a87      	ldr	r2, [pc, #540]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e60:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a83      	ldr	r2, [pc, #524]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a80      	ldr	r2, [pc, #512]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d013      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fe fd2e 	bl	80038e0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fe fd2a 	bl	80038e0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1fb      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0xc0>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fe fd1a 	bl	80038e0 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fe fd16 	bl	80038e0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e1e7      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec2:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xe8>
 8004ece:	e000      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d063      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ede:	4b65      	ldr	r3, [pc, #404]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eea:	4b62      	ldr	r3, [pc, #392]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d11c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d116      	bne.n	8004f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_RCC_OscConfig+0x152>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e1bb      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1a:	4b56      	ldr	r3, [pc, #344]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4952      	ldr	r1, [pc, #328]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2e:	e03a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f38:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCC_OscConfig+0x2b0>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fe fccf 	bl	80038e0 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f46:	f7fe fccb 	bl	80038e0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e19c      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f58:	4b46      	ldr	r3, [pc, #280]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f64:	4b43      	ldr	r3, [pc, #268]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4940      	ldr	r1, [pc, #256]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]
 8004f78:	e015      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7a:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <HAL_RCC_OscConfig+0x2b0>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe fcae 	bl	80038e0 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f88:	f7fe fcaa 	bl	80038e0 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e17b      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d030      	beq.n	8005014 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d016      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fba:	4b30      	ldr	r3, [pc, #192]	; (800507c <HAL_RCC_OscConfig+0x2b4>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fe fc8e 	bl	80038e0 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc8:	f7fe fc8a 	bl	80038e0 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e15b      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x200>
 8004fe6:	e015      	b.n	8005014 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe8:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_RCC_OscConfig+0x2b4>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fee:	f7fe fc77 	bl	80038e0 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff6:	f7fe fc73 	bl	80038e0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e144      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a0 	beq.w	8005162 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	4a0e      	ldr	r2, [pc, #56]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	6413      	str	r3, [r2, #64]	; 0x40
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x2b8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d121      	bne.n	80050a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_RCC_OscConfig+0x2b8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a07      	ldr	r2, [pc, #28]	; (8005080 <HAL_RCC_OscConfig+0x2b8>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506a:	f7fe fc39 	bl	80038e0 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005070:	e011      	b.n	8005096 <HAL_RCC_OscConfig+0x2ce>
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	42470000 	.word	0x42470000
 800507c:	42470e80 	.word	0x42470e80
 8005080:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005084:	f7fe fc2c 	bl	80038e0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0fd      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	4b81      	ldr	r3, [pc, #516]	; (800529c <HAL_RCC_OscConfig+0x4d4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d106      	bne.n	80050b8 <HAL_RCC_OscConfig+0x2f0>
 80050aa:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	; 0x70
 80050b6:	e01c      	b.n	80050f2 <HAL_RCC_OscConfig+0x32a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d10c      	bne.n	80050da <HAL_RCC_OscConfig+0x312>
 80050c0:	4b77      	ldr	r3, [pc, #476]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a76      	ldr	r2, [pc, #472]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050c6:	f043 0304 	orr.w	r3, r3, #4
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
 80050cc:	4b74      	ldr	r3, [pc, #464]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a73      	ldr	r2, [pc, #460]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	e00b      	b.n	80050f2 <HAL_RCC_OscConfig+0x32a>
 80050da:	4b71      	ldr	r3, [pc, #452]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a70      	ldr	r2, [pc, #448]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	4b6e      	ldr	r3, [pc, #440]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a6d      	ldr	r2, [pc, #436]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d015      	beq.n	8005126 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fe fbf1 	bl	80038e0 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fe fbed 	bl	80038e0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0bc      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ee      	beq.n	8005102 <HAL_RCC_OscConfig+0x33a>
 8005124:	e014      	b.n	8005150 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005126:	f7fe fbdb 	bl	80038e0 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fe fbd7 	bl	80038e0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	; 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e0a6      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ee      	bne.n	800512e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4a51      	ldr	r2, [pc, #324]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8092 	beq.w	8005290 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800516c:	4b4c      	ldr	r3, [pc, #304]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d05c      	beq.n	8005232 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d141      	bne.n	8005204 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005180:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_RCC_OscConfig+0x4dc>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fe fbab 	bl	80038e0 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518e:	f7fe fba7 	bl	80038e0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e078      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a0:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	019b      	lsls	r3, r3, #6
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	3b01      	subs	r3, #1
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	4933      	ldr	r1, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d6:	4b33      	ldr	r3, [pc, #204]	; (80052a4 <HAL_RCC_OscConfig+0x4dc>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fe fb80 	bl	80038e0 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fe fb7c 	bl	80038e0 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e04d      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f6:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x41c>
 8005202:	e045      	b.n	8005290 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <HAL_RCC_OscConfig+0x4dc>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fe fb69 	bl	80038e0 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005212:	f7fe fb65 	bl	80038e0 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e036      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x44a>
 8005230:	e02e      	b.n	8005290 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e029      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	429a      	cmp	r2, r3
 8005250:	d11c      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d115      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005266:	4013      	ands	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800526c:	4293      	cmp	r3, r2
 800526e:	d10d      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40007000 	.word	0x40007000
 80052a0:	40023800 	.word	0x40023800
 80052a4:	42470060 	.word	0x42470060

080052a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0cc      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d90c      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b65      	ldr	r3, [pc, #404]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b63      	ldr	r3, [pc, #396]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0b8      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d020      	beq.n	8005332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052fc:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a58      	ldr	r2, [pc, #352]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005314:	4b53      	ldr	r3, [pc, #332]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a52      	ldr	r2, [pc, #328]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800531e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005320:	4b50      	ldr	r3, [pc, #320]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	494d      	ldr	r1, [pc, #308]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d044      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005346:	4b47      	ldr	r3, [pc, #284]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d119      	bne.n	8005386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e07f      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d003      	beq.n	8005366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005362:	2b03      	cmp	r3, #3
 8005364:	d107      	bne.n	8005376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e06f      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005376:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e067      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f023 0203 	bic.w	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4934      	ldr	r1, [pc, #208]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005398:	f7fe faa2 	bl	80038e0 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a0:	f7fe fa9e 	bl	80038e0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e04f      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 020c 	and.w	r2, r3, #12
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d1eb      	bne.n	80053a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d20c      	bcs.n	80053f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b20      	ldr	r3, [pc, #128]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e032      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4916      	ldr	r1, [pc, #88]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	490e      	ldr	r1, [pc, #56]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800542e:	f000 f821 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8005432:	4601      	mov	r1, r0
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <HAL_RCC_ClockConfig+0x1c0>)
 8005440:	5cd3      	ldrb	r3, [r2, r3]
 8005442:	fa21 f303 	lsr.w	r3, r1, r3
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <HAL_RCC_ClockConfig+0x1c8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fe fa02 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40023c00 	.word	0x40023c00
 8005464:	40023800 	.word	0x40023800
 8005468:	08008414 	.word	0x08008414
 800546c:	2000000c 	.word	0x2000000c
 8005470:	20000010 	.word	0x20000010

08005474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	2300      	movs	r3, #0
 8005484:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800548a:	4b63      	ldr	r3, [pc, #396]	; (8005618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b04      	cmp	r3, #4
 8005494:	d007      	beq.n	80054a6 <HAL_RCC_GetSysClockFreq+0x32>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d008      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x38>
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 80b4 	bne.w	8005608 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054a0:	4b5e      	ldr	r3, [pc, #376]	; (800561c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054a2:	60bb      	str	r3, [r7, #8]
       break;
 80054a4:	e0b3      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054a6:	4b5e      	ldr	r3, [pc, #376]	; (8005620 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80054a8:	60bb      	str	r3, [r7, #8]
      break;
 80054aa:	e0b0      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054ac:	4b5a      	ldr	r3, [pc, #360]	; (8005618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b6:	4b58      	ldr	r3, [pc, #352]	; (8005618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04a      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c2:	4b55      	ldr	r3, [pc, #340]	; (8005618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	f04f 0400 	mov.w	r4, #0
 80054cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	ea03 0501 	and.w	r5, r3, r1
 80054d8:	ea04 0602 	and.w	r6, r4, r2
 80054dc:	4629      	mov	r1, r5
 80054de:	4632      	mov	r2, r6
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	0154      	lsls	r4, r2, #5
 80054ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054ee:	014b      	lsls	r3, r1, #5
 80054f0:	4619      	mov	r1, r3
 80054f2:	4622      	mov	r2, r4
 80054f4:	1b49      	subs	r1, r1, r5
 80054f6:	eb62 0206 	sbc.w	r2, r2, r6
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	f04f 0400 	mov.w	r4, #0
 8005502:	0194      	lsls	r4, r2, #6
 8005504:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005508:	018b      	lsls	r3, r1, #6
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	eb64 0402 	sbc.w	r4, r4, r2
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	00e2      	lsls	r2, r4, #3
 800551a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800551e:	00d9      	lsls	r1, r3, #3
 8005520:	460b      	mov	r3, r1
 8005522:	4614      	mov	r4, r2
 8005524:	195b      	adds	r3, r3, r5
 8005526:	eb44 0406 	adc.w	r4, r4, r6
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	0262      	lsls	r2, r4, #9
 8005534:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005538:	0259      	lsls	r1, r3, #9
 800553a:	460b      	mov	r3, r1
 800553c:	4614      	mov	r4, r2
 800553e:	4618      	mov	r0, r3
 8005540:	4621      	mov	r1, r4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f04f 0400 	mov.w	r4, #0
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	f7fb fb4c 	bl	8000be8 <__aeabi_uldivmod>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e049      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005558:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	f04f 0400 	mov.w	r4, #0
 8005562:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	ea03 0501 	and.w	r5, r3, r1
 800556e:	ea04 0602 	and.w	r6, r4, r2
 8005572:	4629      	mov	r1, r5
 8005574:	4632      	mov	r2, r6
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	f04f 0400 	mov.w	r4, #0
 800557e:	0154      	lsls	r4, r2, #5
 8005580:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005584:	014b      	lsls	r3, r1, #5
 8005586:	4619      	mov	r1, r3
 8005588:	4622      	mov	r2, r4
 800558a:	1b49      	subs	r1, r1, r5
 800558c:	eb62 0206 	sbc.w	r2, r2, r6
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	0194      	lsls	r4, r2, #6
 800559a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800559e:	018b      	lsls	r3, r1, #6
 80055a0:	1a5b      	subs	r3, r3, r1
 80055a2:	eb64 0402 	sbc.w	r4, r4, r2
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	00e2      	lsls	r2, r4, #3
 80055b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055b4:	00d9      	lsls	r1, r3, #3
 80055b6:	460b      	mov	r3, r1
 80055b8:	4614      	mov	r4, r2
 80055ba:	195b      	adds	r3, r3, r5
 80055bc:	eb44 0406 	adc.w	r4, r4, r6
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	02a2      	lsls	r2, r4, #10
 80055ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055ce:	0299      	lsls	r1, r3, #10
 80055d0:	460b      	mov	r3, r1
 80055d2:	4614      	mov	r4, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	4621      	mov	r1, r4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f04f 0400 	mov.w	r4, #0
 80055de:	461a      	mov	r2, r3
 80055e0:	4623      	mov	r3, r4
 80055e2:	f7fb fb01 	bl	8000be8 <__aeabi_uldivmod>
 80055e6:	4603      	mov	r3, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	3301      	adds	r3, #1
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	60bb      	str	r3, [r7, #8]
      break;
 8005606:	e002      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800560a:	60bb      	str	r3, [r7, #8]
      break;
 800560c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560e:	68bb      	ldr	r3, [r7, #8]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	00f42400 	.word	0x00f42400
 8005620:	007a1200 	.word	0x007a1200

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <HAL_RCC_GetHCLKFreq+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	2000000c 	.word	0x2000000c

0800563c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005640:	f7ff fff0 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005644:	4601      	mov	r1, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0a9b      	lsrs	r3, r3, #10
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4a03      	ldr	r2, [pc, #12]	; (8005660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	08008424 	.word	0x08008424

08005664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005668:	f7ff ffdc 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 800566c:	4601      	mov	r1, r0
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	0b5b      	lsrs	r3, r3, #13
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	08008424 	.word	0x08008424

0800568c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e01d      	b.n	80056da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fd fe06 	bl	80032c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 fd5c 	bl	8006188 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d007      	beq.n	800571c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e01d      	b.n	8005778 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f815 	bl	8005780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f000 fd0d 	bl	8006188 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2201      	movs	r2, #1
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 f988 	bl	8006abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_TIM_PWM_Start+0x74>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x2c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a14      	ldr	r2, [pc, #80]	; (800580c <HAL_TIM_PWM_Start+0x78>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_PWM_Start+0x30>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_TIM_PWM_Start+0x32>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d007      	beq.n	80057fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f94a 	bl	8006abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <HAL_TIM_PWM_Stop+0xa8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIM_PWM_Stop+0x2c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a21      	ldr	r2, [pc, #132]	; (80058bc <HAL_TIM_PWM_Stop+0xac>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d101      	bne.n	8005840 <HAL_TIM_PWM_Stop+0x30>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <HAL_TIM_PWM_Stop+0x32>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d017      	beq.n	8005876 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10f      	bne.n	8005876 <HAL_TIM_PWM_Stop+0x66>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	f240 4344 	movw	r3, #1092	; 0x444
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <HAL_TIM_PWM_Stop+0x66>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10f      	bne.n	80058a6 <HAL_TIM_PWM_Stop+0x96>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	f240 4344 	movw	r3, #1092	; 0x444
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <HAL_TIM_PWM_Stop+0x96>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40010400 	.word	0x40010400

080058c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e01d      	b.n	800590e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f815 	bl	8005916 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 fc42 	bl	8006188 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d841      	bhi.n	80059c0 <HAL_TIM_IC_Start_IT+0x94>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <HAL_TIM_IC_Start_IT+0x18>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005979 	.word	0x08005979
 8005948:	080059c1 	.word	0x080059c1
 800594c:	080059c1 	.word	0x080059c1
 8005950:	080059c1 	.word	0x080059c1
 8005954:	0800598b 	.word	0x0800598b
 8005958:	080059c1 	.word	0x080059c1
 800595c:	080059c1 	.word	0x080059c1
 8005960:	080059c1 	.word	0x080059c1
 8005964:	0800599d 	.word	0x0800599d
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059c1 	.word	0x080059c1
 8005970:	080059c1 	.word	0x080059c1
 8005974:	080059af 	.word	0x080059af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0202 	orr.w	r2, r2, #2
 8005986:	60da      	str	r2, [r3, #12]
      break;
 8005988:	e01b      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0204 	orr.w	r2, r2, #4
 8005998:	60da      	str	r2, [r3, #12]
      break;
 800599a:	e012      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0208 	orr.w	r2, r2, #8
 80059aa:	60da      	str	r2, [r3, #12]
      break;
 80059ac:	e009      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0210 	orr.w	r2, r2, #16
 80059bc:	60da      	str	r2, [r3, #12]
      break;
 80059be:	e000      	b.n	80059c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80059c0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f876 	bl	8006abc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d007      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0202 	mvn.w	r2, #2
 8005a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc fea6 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fb80 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fb87 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d122      	bne.n	8005aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0204 	mvn.w	r2, #4
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fc fe7c 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fb56 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fb5d 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0208 	mvn.w	r2, #8
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fc fe52 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fb2c 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb33 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0210 	mvn.w	r2, #16
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc fe28 	bl	8002790 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fb02 	bl	800614c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fb09 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10e      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d107      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0201 	mvn.w	r2, #1
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc fdd4 	bl	8002728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d10e      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b80      	cmp	r3, #128	; 0x80
 8005b9a:	d107      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 f834 	bl	8006c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d107      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 face 	bl	8006174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d10e      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0220 	mvn.w	r2, #32
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fffe 	bl	8006c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e08a      	b.n	8005d3c <HAL_TIM_IC_ConfigChannel+0x130>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11b      	bne.n	8005c74 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f000 fd72 	bl	8006734 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 020c 	bic.w	r2, r2, #12
 8005c5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	619a      	str	r2, [r3, #24]
 8005c72:	e05a      	b.n	8005d2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d11c      	bne.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 fdf6 	bl	800687a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6999      	ldr	r1, [r3, #24]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	021a      	lsls	r2, r3, #8
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	619a      	str	r2, [r3, #24]
 8005cb2:	e03a      	b.n	8005d2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d11b      	bne.n	8005cf2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6819      	ldr	r1, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f000 fe43 	bl	8006954 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 020c 	bic.w	r2, r2, #12
 8005cdc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69d9      	ldr	r1, [r3, #28]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	61da      	str	r2, [r3, #28]
 8005cf0:	e01b      	b.n	8005d2a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f000 fe63 	bl	80069cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69d9      	ldr	r1, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	021a      	lsls	r2, r3, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e0b4      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	f200 809f 	bhi.w	8005eb4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005db1 	.word	0x08005db1
 8005d80:	08005eb5 	.word	0x08005eb5
 8005d84:	08005eb5 	.word	0x08005eb5
 8005d88:	08005eb5 	.word	0x08005eb5
 8005d8c:	08005df1 	.word	0x08005df1
 8005d90:	08005eb5 	.word	0x08005eb5
 8005d94:	08005eb5 	.word	0x08005eb5
 8005d98:	08005eb5 	.word	0x08005eb5
 8005d9c:	08005e33 	.word	0x08005e33
 8005da0:	08005eb5 	.word	0x08005eb5
 8005da4:	08005eb5 	.word	0x08005eb5
 8005da8:	08005eb5 	.word	0x08005eb5
 8005dac:	08005e73 	.word	0x08005e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fa86 	bl	80062c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0208 	orr.w	r2, r2, #8
 8005dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0204 	bic.w	r2, r2, #4
 8005dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	619a      	str	r2, [r3, #24]
      break;
 8005dee:	e062      	b.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fad6 	bl	80063a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6999      	ldr	r1, [r3, #24]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	021a      	lsls	r2, r3, #8
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	619a      	str	r2, [r3, #24]
      break;
 8005e30:	e041      	b.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fb2b 	bl	8006494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0208 	orr.w	r2, r2, #8
 8005e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0204 	bic.w	r2, r2, #4
 8005e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69d9      	ldr	r1, [r3, #28]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	61da      	str	r2, [r3, #28]
      break;
 8005e70:	e021      	b.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fb7f 	bl	800657c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69d9      	ldr	r1, [r3, #28]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	021a      	lsls	r2, r3, #8
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	61da      	str	r2, [r3, #28]
      break;
 8005eb2:	e000      	b.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005eb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_ConfigClockSource+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e0a6      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x166>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d067      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0x120>
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d80b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x6c>
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d073      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x140>
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d802      	bhi.n	8005f32 <HAL_TIM_ConfigClockSource+0x62>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d06f      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f30:	e078      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d06c      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x140>
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d06a      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f3a:	e073      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f3c:	2b70      	cmp	r3, #112	; 0x70
 8005f3e:	d00d      	beq.n	8005f5c <HAL_TIM_ConfigClockSource+0x8c>
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d804      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x7e>
 8005f44:	2b50      	cmp	r3, #80	; 0x50
 8005f46:	d033      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0xe0>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d041      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f4c:	e06a      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f52:	d066      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x152>
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d017      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f5a:	e063      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6899      	ldr	r1, [r3, #8]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f000 fd86 	bl	8006a7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
      break;
 8005f88:	e04c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f000 fd6f 	bl	8006a7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e039      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f000 fc2d 	bl	800681c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2150      	movs	r1, #80	; 0x50
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fd3c 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8005fce:	e029      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f000 fc89 	bl	80068f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2160      	movs	r1, #96	; 0x60
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fd2c 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8005fee:	e019      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6859      	ldr	r1, [r3, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f000 fc0d 	bl	800681c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2140      	movs	r1, #64	; 0x40
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fd1c 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 800600e:	e009      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f000 fd13 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006020:	e000      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006052:	2302      	movs	r3, #2
 8006054:	e031      	b.n	80060ba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fadd 	bl	8006628 <TIM_SlaveTimer_SetConfig>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e018      	b.n	80060ba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006096:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d831      	bhi.n	800613c <HAL_TIM_ReadCapturedValue+0x78>
 80060d8:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	08006115 	.word	0x08006115
 80060e4:	0800613d 	.word	0x0800613d
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	0800613d 	.word	0x0800613d
 80060f0:	0800611f 	.word	0x0800611f
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	08006129 	.word	0x08006129
 8006104:	0800613d 	.word	0x0800613d
 8006108:	0800613d 	.word	0x0800613d
 800610c:	0800613d 	.word	0x0800613d
 8006110:	08006133 	.word	0x08006133
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	60fb      	str	r3, [r7, #12]

      break;
 800611c:	e00f      	b.n	800613e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	60fb      	str	r3, [r7, #12]

      break;
 8006126:	e00a      	b.n	800613e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	60fb      	str	r3, [r7, #12]

      break;
 8006130:	e005      	b.n	800613e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	60fb      	str	r3, [r7, #12]

      break;
 800613a:	e000      	b.n	800613e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800613c:	bf00      	nop
  }

  return tmpreg;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a40      	ldr	r2, [pc, #256]	; (800629c <TIM_Base_SetConfig+0x114>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a6:	d00f      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3d      	ldr	r2, [pc, #244]	; (80062a0 <TIM_Base_SetConfig+0x118>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a3c      	ldr	r2, [pc, #240]	; (80062a4 <TIM_Base_SetConfig+0x11c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a3b      	ldr	r2, [pc, #236]	; (80062a8 <TIM_Base_SetConfig+0x120>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3a      	ldr	r2, [pc, #232]	; (80062ac <TIM_Base_SetConfig+0x124>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2f      	ldr	r2, [pc, #188]	; (800629c <TIM_Base_SetConfig+0x114>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d027      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2c      	ldr	r2, [pc, #176]	; (80062a0 <TIM_Base_SetConfig+0x118>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d023      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2b      	ldr	r2, [pc, #172]	; (80062a4 <TIM_Base_SetConfig+0x11c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01f      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2a      	ldr	r2, [pc, #168]	; (80062a8 <TIM_Base_SetConfig+0x120>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a29      	ldr	r2, [pc, #164]	; (80062ac <TIM_Base_SetConfig+0x124>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d017      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <TIM_Base_SetConfig+0x128>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a27      	ldr	r2, [pc, #156]	; (80062b4 <TIM_Base_SetConfig+0x12c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00f      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <TIM_Base_SetConfig+0x130>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a25      	ldr	r2, [pc, #148]	; (80062bc <TIM_Base_SetConfig+0x134>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <TIM_Base_SetConfig+0x138>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a23      	ldr	r2, [pc, #140]	; (80062c4 <TIM_Base_SetConfig+0x13c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d108      	bne.n	800624c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <TIM_Base_SetConfig+0x114>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_Base_SetConfig+0xf8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <TIM_Base_SetConfig+0x124>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d103      	bne.n	8006288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	615a      	str	r2, [r3, #20]
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40010400 	.word	0x40010400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800
 80062bc:	40001800 	.word	0x40001800
 80062c0:	40001c00 	.word	0x40001c00
 80062c4:	40002000 	.word	0x40002000

080062c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0201 	bic.w	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0303 	bic.w	r3, r3, #3
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 0302 	bic.w	r3, r3, #2
 8006310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <TIM_OC1_SetConfig+0xd8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC1_SetConfig+0x64>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a1f      	ldr	r2, [pc, #124]	; (80063a4 <TIM_OC1_SetConfig+0xdc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10c      	bne.n	8006346 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0308 	bic.w	r3, r3, #8
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 0304 	bic.w	r3, r3, #4
 8006344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <TIM_OC1_SetConfig+0xd8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_OC1_SetConfig+0x8e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <TIM_OC1_SetConfig+0xdc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d111      	bne.n	800637a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800635c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	621a      	str	r2, [r3, #32]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f023 0210 	bic.w	r2, r3, #16
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a22      	ldr	r2, [pc, #136]	; (800648c <TIM_OC2_SetConfig+0xe4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC2_SetConfig+0x68>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a21      	ldr	r2, [pc, #132]	; (8006490 <TIM_OC2_SetConfig+0xe8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10d      	bne.n	800642c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <TIM_OC2_SetConfig+0xe4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC2_SetConfig+0x94>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a16      	ldr	r2, [pc, #88]	; (8006490 <TIM_OC2_SetConfig+0xe8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d113      	bne.n	8006464 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <TIM_OC3_SetConfig+0xe0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC3_SetConfig+0x66>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a20      	ldr	r2, [pc, #128]	; (8006578 <TIM_OC3_SetConfig+0xe4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10d      	bne.n	8006516 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a16      	ldr	r2, [pc, #88]	; (8006574 <TIM_OC3_SetConfig+0xe0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_OC3_SetConfig+0x92>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a15      	ldr	r2, [pc, #84]	; (8006578 <TIM_OC3_SetConfig+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d113      	bne.n	800654e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800652c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	621a      	str	r2, [r3, #32]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40010000 	.word	0x40010000
 8006578:	40010400 	.word	0x40010400

0800657c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	031b      	lsls	r3, r3, #12
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a12      	ldr	r2, [pc, #72]	; (8006620 <TIM_OC4_SetConfig+0xa4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_OC4_SetConfig+0x68>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a11      	ldr	r2, [pc, #68]	; (8006624 <TIM_OC4_SetConfig+0xa8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d109      	bne.n	80065f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0307 	bic.w	r3, r3, #7
 8006652:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b30      	cmp	r3, #48	; 0x30
 800666c:	d05c      	beq.n	8006728 <TIM_SlaveTimer_SetConfig+0x100>
 800666e:	2b30      	cmp	r3, #48	; 0x30
 8006670:	d806      	bhi.n	8006680 <TIM_SlaveTimer_SetConfig+0x58>
 8006672:	2b10      	cmp	r3, #16
 8006674:	d058      	beq.n	8006728 <TIM_SlaveTimer_SetConfig+0x100>
 8006676:	2b20      	cmp	r3, #32
 8006678:	d056      	beq.n	8006728 <TIM_SlaveTimer_SetConfig+0x100>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d054      	beq.n	8006728 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800667e:	e054      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006680:	2b50      	cmp	r3, #80	; 0x50
 8006682:	d03d      	beq.n	8006700 <TIM_SlaveTimer_SetConfig+0xd8>
 8006684:	2b50      	cmp	r3, #80	; 0x50
 8006686:	d802      	bhi.n	800668e <TIM_SlaveTimer_SetConfig+0x66>
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d010      	beq.n	80066ae <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800668c:	e04d      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800668e:	2b60      	cmp	r3, #96	; 0x60
 8006690:	d040      	beq.n	8006714 <TIM_SlaveTimer_SetConfig+0xec>
 8006692:	2b70      	cmp	r3, #112	; 0x70
 8006694:	d000      	beq.n	8006698 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006696:	e048      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68d9      	ldr	r1, [r3, #12]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f000 f9e8 	bl	8006a7c <TIM_ETR_SetConfig>
      break;
 80066ac:	e03d      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d101      	bne.n	80066ba <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e038      	b.n	800672c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a1a      	ldr	r2, [r3, #32]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	621a      	str	r2, [r3, #32]
      break;
 80066fe:	e014      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6899      	ldr	r1, [r3, #8]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	461a      	mov	r2, r3
 800670e:	f000 f885 	bl	800681c <TIM_TI1_ConfigInputStage>
      break;
 8006712:	e00a      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6899      	ldr	r1, [r3, #8]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	461a      	mov	r2, r3
 8006722:	f000 f8e7 	bl	80068f4 <TIM_TI2_ConfigInputStage>
      break;
 8006726:	e000      	b.n	800672a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006728:	bf00      	nop
  }
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f023 0201 	bic.w	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <TIM_TI1_SetConfig+0xcc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01b      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d017      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a25      	ldr	r2, [pc, #148]	; (8006804 <TIM_TI1_SetConfig+0xd0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_TI1_SetConfig+0xd4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <TIM_TI1_SetConfig+0xd8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a22      	ldr	r2, [pc, #136]	; (8006810 <TIM_TI1_SetConfig+0xdc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a21      	ldr	r2, [pc, #132]	; (8006814 <TIM_TI1_SetConfig+0xe0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_TI1_SetConfig+0x66>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a20      	ldr	r2, [pc, #128]	; (8006818 <TIM_TI1_SetConfig+0xe4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d101      	bne.n	800679e <TIM_TI1_SetConfig+0x6a>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <TIM_TI1_SetConfig+0x6c>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e003      	b.n	80067be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f003 030a 	and.w	r3, r3, #10
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800
 800680c:	40000c00 	.word	0x40000c00
 8006810:	40010400 	.word	0x40010400
 8006814:	40014000 	.word	0x40014000
 8006818:	40001800 	.word	0x40001800

0800681c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0201 	bic.w	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 030a 	bic.w	r3, r3, #10
 8006858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f023 0210 	bic.w	r2, r3, #16
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	031b      	lsls	r3, r3, #12
 80068be:	b29b      	uxth	r3, r3
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f023 0210 	bic.w	r2, r3, #16
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800691e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	031b      	lsls	r3, r3, #12
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006990:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	b2db      	uxtb	r3, r3
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80069a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	031b      	lsls	r3, r3, #12
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	031b      	lsls	r3, r3, #12
 8006a24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f043 0307 	orr.w	r3, r3, #7
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	021a      	lsls	r2, r3, #8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2201      	movs	r2, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1a      	ldr	r2, [r3, #32]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e05a      	b.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d022      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6c:	d01d      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d018      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1a      	ldr	r2, [pc, #104]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00e      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d009      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d004      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a15      	ldr	r2, [pc, #84]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e03f      	b.n	8006cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fc fccc 	bl	80035ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	; 0x24
 8006c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f90b 	bl	8006e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b088      	sub	sp, #32
 8006cc6:	af02      	add	r7, sp, #8
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	f040 8083 	bne.w	8006dea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_UART_Transmit+0x2e>
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e07b      	b.n	8006dec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Transmit+0x40>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e074      	b.n	8006dec <HAL_UART_Transmit+0x12a>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2221      	movs	r2, #33	; 0x21
 8006d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d18:	f7fc fde2 	bl	80038e0 <HAL_GetTick>
 8006d1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006d32:	e042      	b.n	8006dba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	d122      	bne.n	8006d92 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2200      	movs	r2, #0
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f84c 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e042      	b.n	8006dec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	3302      	adds	r3, #2
 8006d86:	60bb      	str	r3, [r7, #8]
 8006d88:	e017      	b.n	8006dba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	e013      	b.n	8006dba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f829 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e01f      	b.n	8006dec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	60ba      	str	r2, [r7, #8]
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1b7      	bne.n	8006d34 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2140      	movs	r1, #64	; 0x40
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f810 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e006      	b.n	8006dec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e04:	e02c      	b.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d028      	beq.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e14:	f7fc fd64 	bl	80038e0 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d21d      	bcs.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e00f      	b.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d0c3      	beq.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006eca:	f023 030c 	bic.w	r3, r3, #12
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef6:	f040 818b 	bne.w	8007210 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4ac1      	ldr	r2, [pc, #772]	; (8007204 <UART_SetConfig+0x37c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d005      	beq.n	8006f10 <UART_SetConfig+0x88>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4abf      	ldr	r2, [pc, #764]	; (8007208 <UART_SetConfig+0x380>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	f040 80bd 	bne.w	800708a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f10:	f7fe fba8 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006f14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	461d      	mov	r5, r3
 8006f1a:	f04f 0600 	mov.w	r6, #0
 8006f1e:	46a8      	mov	r8, r5
 8006f20:	46b1      	mov	r9, r6
 8006f22:	eb18 0308 	adds.w	r3, r8, r8
 8006f26:	eb49 0409 	adc.w	r4, r9, r9
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	46a1      	mov	r9, r4
 8006f2e:	eb18 0805 	adds.w	r8, r8, r5
 8006f32:	eb49 0906 	adc.w	r9, r9, r6
 8006f36:	f04f 0100 	mov.w	r1, #0
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f4a:	4688      	mov	r8, r1
 8006f4c:	4691      	mov	r9, r2
 8006f4e:	eb18 0005 	adds.w	r0, r8, r5
 8006f52:	eb49 0106 	adc.w	r1, r9, r6
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	f04f 0600 	mov.w	r6, #0
 8006f60:	196b      	adds	r3, r5, r5
 8006f62:	eb46 0406 	adc.w	r4, r6, r6
 8006f66:	461a      	mov	r2, r3
 8006f68:	4623      	mov	r3, r4
 8006f6a:	f7f9 fe3d 	bl	8000be8 <__aeabi_uldivmod>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	460c      	mov	r4, r1
 8006f72:	461a      	mov	r2, r3
 8006f74:	4ba5      	ldr	r3, [pc, #660]	; (800720c <UART_SetConfig+0x384>)
 8006f76:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	461d      	mov	r5, r3
 8006f84:	f04f 0600 	mov.w	r6, #0
 8006f88:	46a9      	mov	r9, r5
 8006f8a:	46b2      	mov	sl, r6
 8006f8c:	eb19 0309 	adds.w	r3, r9, r9
 8006f90:	eb4a 040a 	adc.w	r4, sl, sl
 8006f94:	4699      	mov	r9, r3
 8006f96:	46a2      	mov	sl, r4
 8006f98:	eb19 0905 	adds.w	r9, r9, r5
 8006f9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	4692      	mov	sl, r2
 8006fb8:	eb19 0005 	adds.w	r0, r9, r5
 8006fbc:	eb4a 0106 	adc.w	r1, sl, r6
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	461d      	mov	r5, r3
 8006fc6:	f04f 0600 	mov.w	r6, #0
 8006fca:	196b      	adds	r3, r5, r5
 8006fcc:	eb46 0406 	adc.w	r4, r6, r6
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4623      	mov	r3, r4
 8006fd4:	f7f9 fe08 	bl	8000be8 <__aeabi_uldivmod>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b8b      	ldr	r3, [pc, #556]	; (800720c <UART_SetConfig+0x384>)
 8006fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	2164      	movs	r1, #100	; 0x64
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	3332      	adds	r3, #50	; 0x32
 8006ff2:	4a86      	ldr	r2, [pc, #536]	; (800720c <UART_SetConfig+0x384>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007000:	4498      	add	r8, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	461d      	mov	r5, r3
 8007006:	f04f 0600 	mov.w	r6, #0
 800700a:	46a9      	mov	r9, r5
 800700c:	46b2      	mov	sl, r6
 800700e:	eb19 0309 	adds.w	r3, r9, r9
 8007012:	eb4a 040a 	adc.w	r4, sl, sl
 8007016:	4699      	mov	r9, r3
 8007018:	46a2      	mov	sl, r4
 800701a:	eb19 0905 	adds.w	r9, r9, r5
 800701e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007022:	f04f 0100 	mov.w	r1, #0
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800702e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007036:	4689      	mov	r9, r1
 8007038:	4692      	mov	sl, r2
 800703a:	eb19 0005 	adds.w	r0, r9, r5
 800703e:	eb4a 0106 	adc.w	r1, sl, r6
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	461d      	mov	r5, r3
 8007048:	f04f 0600 	mov.w	r6, #0
 800704c:	196b      	adds	r3, r5, r5
 800704e:	eb46 0406 	adc.w	r4, r6, r6
 8007052:	461a      	mov	r2, r3
 8007054:	4623      	mov	r3, r4
 8007056:	f7f9 fdc7 	bl	8000be8 <__aeabi_uldivmod>
 800705a:	4603      	mov	r3, r0
 800705c:	460c      	mov	r4, r1
 800705e:	461a      	mov	r2, r3
 8007060:	4b6a      	ldr	r3, [pc, #424]	; (800720c <UART_SetConfig+0x384>)
 8007062:	fba3 1302 	umull	r1, r3, r3, r2
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	2164      	movs	r1, #100	; 0x64
 800706a:	fb01 f303 	mul.w	r3, r1, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	3332      	adds	r3, #50	; 0x32
 8007074:	4a65      	ldr	r2, [pc, #404]	; (800720c <UART_SetConfig+0x384>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	f003 0207 	and.w	r2, r3, #7
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4442      	add	r2, r8
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	e26f      	b.n	800756a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800708a:	f7fe fad7 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 800708e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	461d      	mov	r5, r3
 8007094:	f04f 0600 	mov.w	r6, #0
 8007098:	46a8      	mov	r8, r5
 800709a:	46b1      	mov	r9, r6
 800709c:	eb18 0308 	adds.w	r3, r8, r8
 80070a0:	eb49 0409 	adc.w	r4, r9, r9
 80070a4:	4698      	mov	r8, r3
 80070a6:	46a1      	mov	r9, r4
 80070a8:	eb18 0805 	adds.w	r8, r8, r5
 80070ac:	eb49 0906 	adc.w	r9, r9, r6
 80070b0:	f04f 0100 	mov.w	r1, #0
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070c4:	4688      	mov	r8, r1
 80070c6:	4691      	mov	r9, r2
 80070c8:	eb18 0005 	adds.w	r0, r8, r5
 80070cc:	eb49 0106 	adc.w	r1, r9, r6
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	461d      	mov	r5, r3
 80070d6:	f04f 0600 	mov.w	r6, #0
 80070da:	196b      	adds	r3, r5, r5
 80070dc:	eb46 0406 	adc.w	r4, r6, r6
 80070e0:	461a      	mov	r2, r3
 80070e2:	4623      	mov	r3, r4
 80070e4:	f7f9 fd80 	bl	8000be8 <__aeabi_uldivmod>
 80070e8:	4603      	mov	r3, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	461a      	mov	r2, r3
 80070ee:	4b47      	ldr	r3, [pc, #284]	; (800720c <UART_SetConfig+0x384>)
 80070f0:	fba3 2302 	umull	r2, r3, r3, r2
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	461d      	mov	r5, r3
 80070fe:	f04f 0600 	mov.w	r6, #0
 8007102:	46a9      	mov	r9, r5
 8007104:	46b2      	mov	sl, r6
 8007106:	eb19 0309 	adds.w	r3, r9, r9
 800710a:	eb4a 040a 	adc.w	r4, sl, sl
 800710e:	4699      	mov	r9, r3
 8007110:	46a2      	mov	sl, r4
 8007112:	eb19 0905 	adds.w	r9, r9, r5
 8007116:	eb4a 0a06 	adc.w	sl, sl, r6
 800711a:	f04f 0100 	mov.w	r1, #0
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800712a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800712e:	4689      	mov	r9, r1
 8007130:	4692      	mov	sl, r2
 8007132:	eb19 0005 	adds.w	r0, r9, r5
 8007136:	eb4a 0106 	adc.w	r1, sl, r6
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	461d      	mov	r5, r3
 8007140:	f04f 0600 	mov.w	r6, #0
 8007144:	196b      	adds	r3, r5, r5
 8007146:	eb46 0406 	adc.w	r4, r6, r6
 800714a:	461a      	mov	r2, r3
 800714c:	4623      	mov	r3, r4
 800714e:	f7f9 fd4b 	bl	8000be8 <__aeabi_uldivmod>
 8007152:	4603      	mov	r3, r0
 8007154:	460c      	mov	r4, r1
 8007156:	461a      	mov	r2, r3
 8007158:	4b2c      	ldr	r3, [pc, #176]	; (800720c <UART_SetConfig+0x384>)
 800715a:	fba3 1302 	umull	r1, r3, r3, r2
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2164      	movs	r1, #100	; 0x64
 8007162:	fb01 f303 	mul.w	r3, r1, r3
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	3332      	adds	r3, #50	; 0x32
 800716c:	4a27      	ldr	r2, [pc, #156]	; (800720c <UART_SetConfig+0x384>)
 800716e:	fba2 2303 	umull	r2, r3, r2, r3
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800717a:	4498      	add	r8, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	461d      	mov	r5, r3
 8007180:	f04f 0600 	mov.w	r6, #0
 8007184:	46a9      	mov	r9, r5
 8007186:	46b2      	mov	sl, r6
 8007188:	eb19 0309 	adds.w	r3, r9, r9
 800718c:	eb4a 040a 	adc.w	r4, sl, sl
 8007190:	4699      	mov	r9, r3
 8007192:	46a2      	mov	sl, r4
 8007194:	eb19 0905 	adds.w	r9, r9, r5
 8007198:	eb4a 0a06 	adc.w	sl, sl, r6
 800719c:	f04f 0100 	mov.w	r1, #0
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071b0:	4689      	mov	r9, r1
 80071b2:	4692      	mov	sl, r2
 80071b4:	eb19 0005 	adds.w	r0, r9, r5
 80071b8:	eb4a 0106 	adc.w	r1, sl, r6
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	461d      	mov	r5, r3
 80071c2:	f04f 0600 	mov.w	r6, #0
 80071c6:	196b      	adds	r3, r5, r5
 80071c8:	eb46 0406 	adc.w	r4, r6, r6
 80071cc:	461a      	mov	r2, r3
 80071ce:	4623      	mov	r3, r4
 80071d0:	f7f9 fd0a 	bl	8000be8 <__aeabi_uldivmod>
 80071d4:	4603      	mov	r3, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	461a      	mov	r2, r3
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <UART_SetConfig+0x384>)
 80071dc:	fba3 1302 	umull	r1, r3, r3, r2
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	2164      	movs	r1, #100	; 0x64
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	3332      	adds	r3, #50	; 0x32
 80071ee:	4a07      	ldr	r2, [pc, #28]	; (800720c <UART_SetConfig+0x384>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 0207 	and.w	r2, r3, #7
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4442      	add	r2, r8
 8007200:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007202:	e1b2      	b.n	800756a <UART_SetConfig+0x6e2>
 8007204:	40011000 	.word	0x40011000
 8007208:	40011400 	.word	0x40011400
 800720c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4ad7      	ldr	r2, [pc, #860]	; (8007574 <UART_SetConfig+0x6ec>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d005      	beq.n	8007226 <UART_SetConfig+0x39e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4ad6      	ldr	r2, [pc, #856]	; (8007578 <UART_SetConfig+0x6f0>)
 8007220:	4293      	cmp	r3, r2
 8007222:	f040 80d1 	bne.w	80073c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007226:	f7fe fa1d 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 800722a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	469a      	mov	sl, r3
 8007230:	f04f 0b00 	mov.w	fp, #0
 8007234:	46d0      	mov	r8, sl
 8007236:	46d9      	mov	r9, fp
 8007238:	eb18 0308 	adds.w	r3, r8, r8
 800723c:	eb49 0409 	adc.w	r4, r9, r9
 8007240:	4698      	mov	r8, r3
 8007242:	46a1      	mov	r9, r4
 8007244:	eb18 080a 	adds.w	r8, r8, sl
 8007248:	eb49 090b 	adc.w	r9, r9, fp
 800724c:	f04f 0100 	mov.w	r1, #0
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007258:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800725c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007260:	4688      	mov	r8, r1
 8007262:	4691      	mov	r9, r2
 8007264:	eb1a 0508 	adds.w	r5, sl, r8
 8007268:	eb4b 0609 	adc.w	r6, fp, r9
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	f04f 0400 	mov.w	r4, #0
 800727e:	0094      	lsls	r4, r2, #2
 8007280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007284:	008b      	lsls	r3, r1, #2
 8007286:	461a      	mov	r2, r3
 8007288:	4623      	mov	r3, r4
 800728a:	4628      	mov	r0, r5
 800728c:	4631      	mov	r1, r6
 800728e:	f7f9 fcab 	bl	8000be8 <__aeabi_uldivmod>
 8007292:	4603      	mov	r3, r0
 8007294:	460c      	mov	r4, r1
 8007296:	461a      	mov	r2, r3
 8007298:	4bb8      	ldr	r3, [pc, #736]	; (800757c <UART_SetConfig+0x6f4>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	469b      	mov	fp, r3
 80072a8:	f04f 0c00 	mov.w	ip, #0
 80072ac:	46d9      	mov	r9, fp
 80072ae:	46e2      	mov	sl, ip
 80072b0:	eb19 0309 	adds.w	r3, r9, r9
 80072b4:	eb4a 040a 	adc.w	r4, sl, sl
 80072b8:	4699      	mov	r9, r3
 80072ba:	46a2      	mov	sl, r4
 80072bc:	eb19 090b 	adds.w	r9, r9, fp
 80072c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072c4:	f04f 0100 	mov.w	r1, #0
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072d8:	4689      	mov	r9, r1
 80072da:	4692      	mov	sl, r2
 80072dc:	eb1b 0509 	adds.w	r5, fp, r9
 80072e0:	eb4c 060a 	adc.w	r6, ip, sl
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4619      	mov	r1, r3
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	f04f 0400 	mov.w	r4, #0
 80072f6:	0094      	lsls	r4, r2, #2
 80072f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072fc:	008b      	lsls	r3, r1, #2
 80072fe:	461a      	mov	r2, r3
 8007300:	4623      	mov	r3, r4
 8007302:	4628      	mov	r0, r5
 8007304:	4631      	mov	r1, r6
 8007306:	f7f9 fc6f 	bl	8000be8 <__aeabi_uldivmod>
 800730a:	4603      	mov	r3, r0
 800730c:	460c      	mov	r4, r1
 800730e:	461a      	mov	r2, r3
 8007310:	4b9a      	ldr	r3, [pc, #616]	; (800757c <UART_SetConfig+0x6f4>)
 8007312:	fba3 1302 	umull	r1, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	2164      	movs	r1, #100	; 0x64
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	3332      	adds	r3, #50	; 0x32
 8007324:	4a95      	ldr	r2, [pc, #596]	; (800757c <UART_SetConfig+0x6f4>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007330:	4498      	add	r8, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	469b      	mov	fp, r3
 8007336:	f04f 0c00 	mov.w	ip, #0
 800733a:	46d9      	mov	r9, fp
 800733c:	46e2      	mov	sl, ip
 800733e:	eb19 0309 	adds.w	r3, r9, r9
 8007342:	eb4a 040a 	adc.w	r4, sl, sl
 8007346:	4699      	mov	r9, r3
 8007348:	46a2      	mov	sl, r4
 800734a:	eb19 090b 	adds.w	r9, r9, fp
 800734e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007352:	f04f 0100 	mov.w	r1, #0
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800735e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007362:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007366:	4689      	mov	r9, r1
 8007368:	4692      	mov	sl, r2
 800736a:	eb1b 0509 	adds.w	r5, fp, r9
 800736e:	eb4c 060a 	adc.w	r6, ip, sl
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0200 	mov.w	r2, #0
 800737c:	f04f 0300 	mov.w	r3, #0
 8007380:	f04f 0400 	mov.w	r4, #0
 8007384:	0094      	lsls	r4, r2, #2
 8007386:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800738a:	008b      	lsls	r3, r1, #2
 800738c:	461a      	mov	r2, r3
 800738e:	4623      	mov	r3, r4
 8007390:	4628      	mov	r0, r5
 8007392:	4631      	mov	r1, r6
 8007394:	f7f9 fc28 	bl	8000be8 <__aeabi_uldivmod>
 8007398:	4603      	mov	r3, r0
 800739a:	460c      	mov	r4, r1
 800739c:	461a      	mov	r2, r3
 800739e:	4b77      	ldr	r3, [pc, #476]	; (800757c <UART_SetConfig+0x6f4>)
 80073a0:	fba3 1302 	umull	r1, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	2164      	movs	r1, #100	; 0x64
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	3332      	adds	r3, #50	; 0x32
 80073b2:	4a72      	ldr	r2, [pc, #456]	; (800757c <UART_SetConfig+0x6f4>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f003 020f 	and.w	r2, r3, #15
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4442      	add	r2, r8
 80073c4:	609a      	str	r2, [r3, #8]
 80073c6:	e0d0      	b.n	800756a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80073c8:	f7fe f938 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 80073cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	469a      	mov	sl, r3
 80073d2:	f04f 0b00 	mov.w	fp, #0
 80073d6:	46d0      	mov	r8, sl
 80073d8:	46d9      	mov	r9, fp
 80073da:	eb18 0308 	adds.w	r3, r8, r8
 80073de:	eb49 0409 	adc.w	r4, r9, r9
 80073e2:	4698      	mov	r8, r3
 80073e4:	46a1      	mov	r9, r4
 80073e6:	eb18 080a 	adds.w	r8, r8, sl
 80073ea:	eb49 090b 	adc.w	r9, r9, fp
 80073ee:	f04f 0100 	mov.w	r1, #0
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007402:	4688      	mov	r8, r1
 8007404:	4691      	mov	r9, r2
 8007406:	eb1a 0508 	adds.w	r5, sl, r8
 800740a:	eb4b 0609 	adc.w	r6, fp, r9
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	4619      	mov	r1, r3
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	f04f 0400 	mov.w	r4, #0
 8007420:	0094      	lsls	r4, r2, #2
 8007422:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007426:	008b      	lsls	r3, r1, #2
 8007428:	461a      	mov	r2, r3
 800742a:	4623      	mov	r3, r4
 800742c:	4628      	mov	r0, r5
 800742e:	4631      	mov	r1, r6
 8007430:	f7f9 fbda 	bl	8000be8 <__aeabi_uldivmod>
 8007434:	4603      	mov	r3, r0
 8007436:	460c      	mov	r4, r1
 8007438:	461a      	mov	r2, r3
 800743a:	4b50      	ldr	r3, [pc, #320]	; (800757c <UART_SetConfig+0x6f4>)
 800743c:	fba3 2302 	umull	r2, r3, r3, r2
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	469b      	mov	fp, r3
 800744a:	f04f 0c00 	mov.w	ip, #0
 800744e:	46d9      	mov	r9, fp
 8007450:	46e2      	mov	sl, ip
 8007452:	eb19 0309 	adds.w	r3, r9, r9
 8007456:	eb4a 040a 	adc.w	r4, sl, sl
 800745a:	4699      	mov	r9, r3
 800745c:	46a2      	mov	sl, r4
 800745e:	eb19 090b 	adds.w	r9, r9, fp
 8007462:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007466:	f04f 0100 	mov.w	r1, #0
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800747a:	4689      	mov	r9, r1
 800747c:	4692      	mov	sl, r2
 800747e:	eb1b 0509 	adds.w	r5, fp, r9
 8007482:	eb4c 060a 	adc.w	r6, ip, sl
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	f04f 0400 	mov.w	r4, #0
 8007498:	0094      	lsls	r4, r2, #2
 800749a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800749e:	008b      	lsls	r3, r1, #2
 80074a0:	461a      	mov	r2, r3
 80074a2:	4623      	mov	r3, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	4631      	mov	r1, r6
 80074a8:	f7f9 fb9e 	bl	8000be8 <__aeabi_uldivmod>
 80074ac:	4603      	mov	r3, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b32      	ldr	r3, [pc, #200]	; (800757c <UART_SetConfig+0x6f4>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	; 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	3332      	adds	r3, #50	; 0x32
 80074c6:	4a2d      	ldr	r2, [pc, #180]	; (800757c <UART_SetConfig+0x6f4>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074d2:	4498      	add	r8, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	469b      	mov	fp, r3
 80074d8:	f04f 0c00 	mov.w	ip, #0
 80074dc:	46d9      	mov	r9, fp
 80074de:	46e2      	mov	sl, ip
 80074e0:	eb19 0309 	adds.w	r3, r9, r9
 80074e4:	eb4a 040a 	adc.w	r4, sl, sl
 80074e8:	4699      	mov	r9, r3
 80074ea:	46a2      	mov	sl, r4
 80074ec:	eb19 090b 	adds.w	r9, r9, fp
 80074f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074f4:	f04f 0100 	mov.w	r1, #0
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007508:	4689      	mov	r9, r1
 800750a:	4692      	mov	sl, r2
 800750c:	eb1b 0509 	adds.w	r5, fp, r9
 8007510:	eb4c 060a 	adc.w	r6, ip, sl
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4619      	mov	r1, r3
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	f04f 0400 	mov.w	r4, #0
 8007526:	0094      	lsls	r4, r2, #2
 8007528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800752c:	008b      	lsls	r3, r1, #2
 800752e:	461a      	mov	r2, r3
 8007530:	4623      	mov	r3, r4
 8007532:	4628      	mov	r0, r5
 8007534:	4631      	mov	r1, r6
 8007536:	f7f9 fb57 	bl	8000be8 <__aeabi_uldivmod>
 800753a:	4603      	mov	r3, r0
 800753c:	460c      	mov	r4, r1
 800753e:	461a      	mov	r2, r3
 8007540:	4b0e      	ldr	r3, [pc, #56]	; (800757c <UART_SetConfig+0x6f4>)
 8007542:	fba3 1302 	umull	r1, r3, r3, r2
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	2164      	movs	r1, #100	; 0x64
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	3332      	adds	r3, #50	; 0x32
 8007554:	4a09      	ldr	r2, [pc, #36]	; (800757c <UART_SetConfig+0x6f4>)
 8007556:	fba2 2303 	umull	r2, r3, r2, r3
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	f003 020f 	and.w	r2, r3, #15
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4442      	add	r2, r8
 8007566:	609a      	str	r2, [r3, #8]
}
 8007568:	e7ff      	b.n	800756a <UART_SetConfig+0x6e2>
 800756a:	bf00      	nop
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007574:	40011000 	.word	0x40011000
 8007578:	40011400 	.word	0x40011400
 800757c:	51eb851f 	.word	0x51eb851f

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	; (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000018 	.word	0x20000018

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4e0d      	ldr	r6, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1ba4      	subs	r4, r4, r6
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2500      	movs	r5, #0
 8007598:	42a5      	cmp	r5, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4e0b      	ldr	r6, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 ff18 	bl	80083d4 <_init>
 80075a4:	1ba4      	subs	r4, r4, r6
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2500      	movs	r5, #0
 80075aa:	42a5      	cmp	r5, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075b4:	4798      	blx	r3
 80075b6:	3501      	adds	r5, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075be:	4798      	blx	r3
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	080084b0 	.word	0x080084b0
 80075c8:	080084b0 	.word	0x080084b0
 80075cc:	080084b0 	.word	0x080084b0
 80075d0:	080084b4 	.word	0x080084b4

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <rand>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <rand+0x50>)
 80075e8:	681c      	ldr	r4, [r3, #0]
 80075ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075ec:	b97b      	cbnz	r3, 800760e <rand+0x2a>
 80075ee:	2018      	movs	r0, #24
 80075f0:	f000 f84c 	bl	800768c <malloc>
 80075f4:	4a10      	ldr	r2, [pc, #64]	; (8007638 <rand+0x54>)
 80075f6:	4b11      	ldr	r3, [pc, #68]	; (800763c <rand+0x58>)
 80075f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80075fa:	e9c0 2300 	strd	r2, r3, [r0]
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <rand+0x5c>)
 8007600:	6083      	str	r3, [r0, #8]
 8007602:	230b      	movs	r3, #11
 8007604:	8183      	strh	r3, [r0, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	2300      	movs	r3, #0
 800760a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800760e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007610:	480c      	ldr	r0, [pc, #48]	; (8007644 <rand+0x60>)
 8007612:	690a      	ldr	r2, [r1, #16]
 8007614:	694b      	ldr	r3, [r1, #20]
 8007616:	4c0c      	ldr	r4, [pc, #48]	; (8007648 <rand+0x64>)
 8007618:	4350      	muls	r0, r2
 800761a:	fb04 0003 	mla	r0, r4, r3, r0
 800761e:	fba2 2304 	umull	r2, r3, r2, r4
 8007622:	4403      	add	r3, r0
 8007624:	1c54      	adds	r4, r2, #1
 8007626:	f143 0500 	adc.w	r5, r3, #0
 800762a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800762e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	20000018 	.word	0x20000018
 8007638:	abcd330e 	.word	0xabcd330e
 800763c:	e66d1234 	.word	0xe66d1234
 8007640:	0005deec 	.word	0x0005deec
 8007644:	5851f42d 	.word	0x5851f42d
 8007648:	4c957f2d 	.word	0x4c957f2d

0800764c <siprintf>:
 800764c:	b40e      	push	{r1, r2, r3}
 800764e:	b500      	push	{lr}
 8007650:	b09c      	sub	sp, #112	; 0x70
 8007652:	ab1d      	add	r3, sp, #116	; 0x74
 8007654:	9002      	str	r0, [sp, #8]
 8007656:	9006      	str	r0, [sp, #24]
 8007658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800765c:	4809      	ldr	r0, [pc, #36]	; (8007684 <siprintf+0x38>)
 800765e:	9107      	str	r1, [sp, #28]
 8007660:	9104      	str	r1, [sp, #16]
 8007662:	4909      	ldr	r1, [pc, #36]	; (8007688 <siprintf+0x3c>)
 8007664:	f853 2b04 	ldr.w	r2, [r3], #4
 8007668:	9105      	str	r1, [sp, #20]
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	a902      	add	r1, sp, #8
 8007670:	f000 f916 	bl	80078a0 <_svfiprintf_r>
 8007674:	9b02      	ldr	r3, [sp, #8]
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	b01c      	add	sp, #112	; 0x70
 800767c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007680:	b003      	add	sp, #12
 8007682:	4770      	bx	lr
 8007684:	20000018 	.word	0x20000018
 8007688:	ffff0208 	.word	0xffff0208

0800768c <malloc>:
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <malloc+0xc>)
 800768e:	4601      	mov	r1, r0
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	f000 b851 	b.w	8007738 <_malloc_r>
 8007696:	bf00      	nop
 8007698:	20000018 	.word	0x20000018

0800769c <_free_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4605      	mov	r5, r0
 80076a0:	2900      	cmp	r1, #0
 80076a2:	d045      	beq.n	8007730 <_free_r+0x94>
 80076a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a8:	1f0c      	subs	r4, r1, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfb8      	it	lt
 80076ae:	18e4      	addlt	r4, r4, r3
 80076b0:	f000 fbaa 	bl	8007e08 <__malloc_lock>
 80076b4:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <_free_r+0x98>)
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	4610      	mov	r0, r2
 80076ba:	b933      	cbnz	r3, 80076ca <_free_r+0x2e>
 80076bc:	6063      	str	r3, [r4, #4]
 80076be:	6014      	str	r4, [r2, #0]
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c6:	f000 bba0 	b.w	8007e0a <__malloc_unlock>
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	d90c      	bls.n	80076e8 <_free_r+0x4c>
 80076ce:	6821      	ldr	r1, [r4, #0]
 80076d0:	1862      	adds	r2, r4, r1
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bf04      	itt	eq
 80076d6:	681a      	ldreq	r2, [r3, #0]
 80076d8:	685b      	ldreq	r3, [r3, #4]
 80076da:	6063      	str	r3, [r4, #4]
 80076dc:	bf04      	itt	eq
 80076de:	1852      	addeq	r2, r2, r1
 80076e0:	6022      	streq	r2, [r4, #0]
 80076e2:	6004      	str	r4, [r0, #0]
 80076e4:	e7ec      	b.n	80076c0 <_free_r+0x24>
 80076e6:	4613      	mov	r3, r2
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	b10a      	cbz	r2, 80076f0 <_free_r+0x54>
 80076ec:	42a2      	cmp	r2, r4
 80076ee:	d9fa      	bls.n	80076e6 <_free_r+0x4a>
 80076f0:	6819      	ldr	r1, [r3, #0]
 80076f2:	1858      	adds	r0, r3, r1
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d10b      	bne.n	8007710 <_free_r+0x74>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	4401      	add	r1, r0
 80076fc:	1858      	adds	r0, r3, r1
 80076fe:	4282      	cmp	r2, r0
 8007700:	6019      	str	r1, [r3, #0]
 8007702:	d1dd      	bne.n	80076c0 <_free_r+0x24>
 8007704:	6810      	ldr	r0, [r2, #0]
 8007706:	6852      	ldr	r2, [r2, #4]
 8007708:	605a      	str	r2, [r3, #4]
 800770a:	4401      	add	r1, r0
 800770c:	6019      	str	r1, [r3, #0]
 800770e:	e7d7      	b.n	80076c0 <_free_r+0x24>
 8007710:	d902      	bls.n	8007718 <_free_r+0x7c>
 8007712:	230c      	movs	r3, #12
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	e7d3      	b.n	80076c0 <_free_r+0x24>
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	1821      	adds	r1, r4, r0
 800771c:	428a      	cmp	r2, r1
 800771e:	bf04      	itt	eq
 8007720:	6811      	ldreq	r1, [r2, #0]
 8007722:	6852      	ldreq	r2, [r2, #4]
 8007724:	6062      	str	r2, [r4, #4]
 8007726:	bf04      	itt	eq
 8007728:	1809      	addeq	r1, r1, r0
 800772a:	6021      	streq	r1, [r4, #0]
 800772c:	605c      	str	r4, [r3, #4]
 800772e:	e7c7      	b.n	80076c0 <_free_r+0x24>
 8007730:	bd38      	pop	{r3, r4, r5, pc}
 8007732:	bf00      	nop
 8007734:	200000a4 	.word	0x200000a4

08007738 <_malloc_r>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	1ccd      	adds	r5, r1, #3
 800773c:	f025 0503 	bic.w	r5, r5, #3
 8007740:	3508      	adds	r5, #8
 8007742:	2d0c      	cmp	r5, #12
 8007744:	bf38      	it	cc
 8007746:	250c      	movcc	r5, #12
 8007748:	2d00      	cmp	r5, #0
 800774a:	4606      	mov	r6, r0
 800774c:	db01      	blt.n	8007752 <_malloc_r+0x1a>
 800774e:	42a9      	cmp	r1, r5
 8007750:	d903      	bls.n	800775a <_malloc_r+0x22>
 8007752:	230c      	movs	r3, #12
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	2000      	movs	r0, #0
 8007758:	bd70      	pop	{r4, r5, r6, pc}
 800775a:	f000 fb55 	bl	8007e08 <__malloc_lock>
 800775e:	4a21      	ldr	r2, [pc, #132]	; (80077e4 <_malloc_r+0xac>)
 8007760:	6814      	ldr	r4, [r2, #0]
 8007762:	4621      	mov	r1, r4
 8007764:	b991      	cbnz	r1, 800778c <_malloc_r+0x54>
 8007766:	4c20      	ldr	r4, [pc, #128]	; (80077e8 <_malloc_r+0xb0>)
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	b91b      	cbnz	r3, 8007774 <_malloc_r+0x3c>
 800776c:	4630      	mov	r0, r6
 800776e:	f000 fb17 	bl	8007da0 <_sbrk_r>
 8007772:	6020      	str	r0, [r4, #0]
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f000 fb12 	bl	8007da0 <_sbrk_r>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d124      	bne.n	80077ca <_malloc_r+0x92>
 8007780:	230c      	movs	r3, #12
 8007782:	6033      	str	r3, [r6, #0]
 8007784:	4630      	mov	r0, r6
 8007786:	f000 fb40 	bl	8007e0a <__malloc_unlock>
 800778a:	e7e4      	b.n	8007756 <_malloc_r+0x1e>
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	1b5b      	subs	r3, r3, r5
 8007790:	d418      	bmi.n	80077c4 <_malloc_r+0x8c>
 8007792:	2b0b      	cmp	r3, #11
 8007794:	d90f      	bls.n	80077b6 <_malloc_r+0x7e>
 8007796:	600b      	str	r3, [r1, #0]
 8007798:	50cd      	str	r5, [r1, r3]
 800779a:	18cc      	adds	r4, r1, r3
 800779c:	4630      	mov	r0, r6
 800779e:	f000 fb34 	bl	8007e0a <__malloc_unlock>
 80077a2:	f104 000b 	add.w	r0, r4, #11
 80077a6:	1d23      	adds	r3, r4, #4
 80077a8:	f020 0007 	bic.w	r0, r0, #7
 80077ac:	1ac3      	subs	r3, r0, r3
 80077ae:	d0d3      	beq.n	8007758 <_malloc_r+0x20>
 80077b0:	425a      	negs	r2, r3
 80077b2:	50e2      	str	r2, [r4, r3]
 80077b4:	e7d0      	b.n	8007758 <_malloc_r+0x20>
 80077b6:	428c      	cmp	r4, r1
 80077b8:	684b      	ldr	r3, [r1, #4]
 80077ba:	bf16      	itet	ne
 80077bc:	6063      	strne	r3, [r4, #4]
 80077be:	6013      	streq	r3, [r2, #0]
 80077c0:	460c      	movne	r4, r1
 80077c2:	e7eb      	b.n	800779c <_malloc_r+0x64>
 80077c4:	460c      	mov	r4, r1
 80077c6:	6849      	ldr	r1, [r1, #4]
 80077c8:	e7cc      	b.n	8007764 <_malloc_r+0x2c>
 80077ca:	1cc4      	adds	r4, r0, #3
 80077cc:	f024 0403 	bic.w	r4, r4, #3
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d005      	beq.n	80077e0 <_malloc_r+0xa8>
 80077d4:	1a21      	subs	r1, r4, r0
 80077d6:	4630      	mov	r0, r6
 80077d8:	f000 fae2 	bl	8007da0 <_sbrk_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	d0cf      	beq.n	8007780 <_malloc_r+0x48>
 80077e0:	6025      	str	r5, [r4, #0]
 80077e2:	e7db      	b.n	800779c <_malloc_r+0x64>
 80077e4:	200000a4 	.word	0x200000a4
 80077e8:	200000a8 	.word	0x200000a8

080077ec <__ssputs_r>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	688e      	ldr	r6, [r1, #8]
 80077f2:	429e      	cmp	r6, r3
 80077f4:	4682      	mov	sl, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	4690      	mov	r8, r2
 80077fa:	4699      	mov	r9, r3
 80077fc:	d837      	bhi.n	800786e <__ssputs_r+0x82>
 80077fe:	898a      	ldrh	r2, [r1, #12]
 8007800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007804:	d031      	beq.n	800786a <__ssputs_r+0x7e>
 8007806:	6825      	ldr	r5, [r4, #0]
 8007808:	6909      	ldr	r1, [r1, #16]
 800780a:	1a6f      	subs	r7, r5, r1
 800780c:	6965      	ldr	r5, [r4, #20]
 800780e:	2302      	movs	r3, #2
 8007810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007814:	fb95 f5f3 	sdiv	r5, r5, r3
 8007818:	f109 0301 	add.w	r3, r9, #1
 800781c:	443b      	add	r3, r7
 800781e:	429d      	cmp	r5, r3
 8007820:	bf38      	it	cc
 8007822:	461d      	movcc	r5, r3
 8007824:	0553      	lsls	r3, r2, #21
 8007826:	d530      	bpl.n	800788a <__ssputs_r+0x9e>
 8007828:	4629      	mov	r1, r5
 800782a:	f7ff ff85 	bl	8007738 <_malloc_r>
 800782e:	4606      	mov	r6, r0
 8007830:	b950      	cbnz	r0, 8007848 <__ssputs_r+0x5c>
 8007832:	230c      	movs	r3, #12
 8007834:	f8ca 3000 	str.w	r3, [sl]
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007848:	463a      	mov	r2, r7
 800784a:	6921      	ldr	r1, [r4, #16]
 800784c:	f000 fab8 	bl	8007dc0 <memcpy>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	6126      	str	r6, [r4, #16]
 800785e:	6165      	str	r5, [r4, #20]
 8007860:	443e      	add	r6, r7
 8007862:	1bed      	subs	r5, r5, r7
 8007864:	6026      	str	r6, [r4, #0]
 8007866:	60a5      	str	r5, [r4, #8]
 8007868:	464e      	mov	r6, r9
 800786a:	454e      	cmp	r6, r9
 800786c:	d900      	bls.n	8007870 <__ssputs_r+0x84>
 800786e:	464e      	mov	r6, r9
 8007870:	4632      	mov	r2, r6
 8007872:	4641      	mov	r1, r8
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	f000 faae 	bl	8007dd6 <memmove>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	1b9b      	subs	r3, r3, r6
 800787e:	60a3      	str	r3, [r4, #8]
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	441e      	add	r6, r3
 8007884:	6026      	str	r6, [r4, #0]
 8007886:	2000      	movs	r0, #0
 8007888:	e7dc      	b.n	8007844 <__ssputs_r+0x58>
 800788a:	462a      	mov	r2, r5
 800788c:	f000 fabe 	bl	8007e0c <_realloc_r>
 8007890:	4606      	mov	r6, r0
 8007892:	2800      	cmp	r0, #0
 8007894:	d1e2      	bne.n	800785c <__ssputs_r+0x70>
 8007896:	6921      	ldr	r1, [r4, #16]
 8007898:	4650      	mov	r0, sl
 800789a:	f7ff feff 	bl	800769c <_free_r>
 800789e:	e7c8      	b.n	8007832 <__ssputs_r+0x46>

080078a0 <_svfiprintf_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	461d      	mov	r5, r3
 80078a6:	898b      	ldrh	r3, [r1, #12]
 80078a8:	061f      	lsls	r7, r3, #24
 80078aa:	b09d      	sub	sp, #116	; 0x74
 80078ac:	4680      	mov	r8, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	4616      	mov	r6, r2
 80078b2:	d50f      	bpl.n	80078d4 <_svfiprintf_r+0x34>
 80078b4:	690b      	ldr	r3, [r1, #16]
 80078b6:	b96b      	cbnz	r3, 80078d4 <_svfiprintf_r+0x34>
 80078b8:	2140      	movs	r1, #64	; 0x40
 80078ba:	f7ff ff3d 	bl	8007738 <_malloc_r>
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	6120      	str	r0, [r4, #16]
 80078c2:	b928      	cbnz	r0, 80078d0 <_svfiprintf_r+0x30>
 80078c4:	230c      	movs	r3, #12
 80078c6:	f8c8 3000 	str.w	r3, [r8]
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	e0c8      	b.n	8007a62 <_svfiprintf_r+0x1c2>
 80078d0:	2340      	movs	r3, #64	; 0x40
 80078d2:	6163      	str	r3, [r4, #20]
 80078d4:	2300      	movs	r3, #0
 80078d6:	9309      	str	r3, [sp, #36]	; 0x24
 80078d8:	2320      	movs	r3, #32
 80078da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078de:	2330      	movs	r3, #48	; 0x30
 80078e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078e4:	9503      	str	r5, [sp, #12]
 80078e6:	f04f 0b01 	mov.w	fp, #1
 80078ea:	4637      	mov	r7, r6
 80078ec:	463d      	mov	r5, r7
 80078ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078f2:	b10b      	cbz	r3, 80078f8 <_svfiprintf_r+0x58>
 80078f4:	2b25      	cmp	r3, #37	; 0x25
 80078f6:	d13e      	bne.n	8007976 <_svfiprintf_r+0xd6>
 80078f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80078fc:	d00b      	beq.n	8007916 <_svfiprintf_r+0x76>
 80078fe:	4653      	mov	r3, sl
 8007900:	4632      	mov	r2, r6
 8007902:	4621      	mov	r1, r4
 8007904:	4640      	mov	r0, r8
 8007906:	f7ff ff71 	bl	80077ec <__ssputs_r>
 800790a:	3001      	adds	r0, #1
 800790c:	f000 80a4 	beq.w	8007a58 <_svfiprintf_r+0x1b8>
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	4453      	add	r3, sl
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	783b      	ldrb	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 809d 	beq.w	8007a58 <_svfiprintf_r+0x1b8>
 800791e:	2300      	movs	r3, #0
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	9307      	str	r3, [sp, #28]
 800792c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007930:	931a      	str	r3, [sp, #104]	; 0x68
 8007932:	462f      	mov	r7, r5
 8007934:	2205      	movs	r2, #5
 8007936:	f817 1b01 	ldrb.w	r1, [r7], #1
 800793a:	4850      	ldr	r0, [pc, #320]	; (8007a7c <_svfiprintf_r+0x1dc>)
 800793c:	f7f8 fc48 	bl	80001d0 <memchr>
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	b9d0      	cbnz	r0, 800797a <_svfiprintf_r+0xda>
 8007944:	06d9      	lsls	r1, r3, #27
 8007946:	bf44      	itt	mi
 8007948:	2220      	movmi	r2, #32
 800794a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800794e:	071a      	lsls	r2, r3, #28
 8007950:	bf44      	itt	mi
 8007952:	222b      	movmi	r2, #43	; 0x2b
 8007954:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007958:	782a      	ldrb	r2, [r5, #0]
 800795a:	2a2a      	cmp	r2, #42	; 0x2a
 800795c:	d015      	beq.n	800798a <_svfiprintf_r+0xea>
 800795e:	9a07      	ldr	r2, [sp, #28]
 8007960:	462f      	mov	r7, r5
 8007962:	2000      	movs	r0, #0
 8007964:	250a      	movs	r5, #10
 8007966:	4639      	mov	r1, r7
 8007968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796c:	3b30      	subs	r3, #48	; 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d94d      	bls.n	8007a0e <_svfiprintf_r+0x16e>
 8007972:	b1b8      	cbz	r0, 80079a4 <_svfiprintf_r+0x104>
 8007974:	e00f      	b.n	8007996 <_svfiprintf_r+0xf6>
 8007976:	462f      	mov	r7, r5
 8007978:	e7b8      	b.n	80078ec <_svfiprintf_r+0x4c>
 800797a:	4a40      	ldr	r2, [pc, #256]	; (8007a7c <_svfiprintf_r+0x1dc>)
 800797c:	1a80      	subs	r0, r0, r2
 800797e:	fa0b f000 	lsl.w	r0, fp, r0
 8007982:	4318      	orrs	r0, r3
 8007984:	9004      	str	r0, [sp, #16]
 8007986:	463d      	mov	r5, r7
 8007988:	e7d3      	b.n	8007932 <_svfiprintf_r+0x92>
 800798a:	9a03      	ldr	r2, [sp, #12]
 800798c:	1d11      	adds	r1, r2, #4
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	9103      	str	r1, [sp, #12]
 8007992:	2a00      	cmp	r2, #0
 8007994:	db01      	blt.n	800799a <_svfiprintf_r+0xfa>
 8007996:	9207      	str	r2, [sp, #28]
 8007998:	e004      	b.n	80079a4 <_svfiprintf_r+0x104>
 800799a:	4252      	negs	r2, r2
 800799c:	f043 0302 	orr.w	r3, r3, #2
 80079a0:	9207      	str	r2, [sp, #28]
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	783b      	ldrb	r3, [r7, #0]
 80079a6:	2b2e      	cmp	r3, #46	; 0x2e
 80079a8:	d10c      	bne.n	80079c4 <_svfiprintf_r+0x124>
 80079aa:	787b      	ldrb	r3, [r7, #1]
 80079ac:	2b2a      	cmp	r3, #42	; 0x2a
 80079ae:	d133      	bne.n	8007a18 <_svfiprintf_r+0x178>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	9203      	str	r2, [sp, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfb8      	it	lt
 80079bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80079c0:	3702      	adds	r7, #2
 80079c2:	9305      	str	r3, [sp, #20]
 80079c4:	4d2e      	ldr	r5, [pc, #184]	; (8007a80 <_svfiprintf_r+0x1e0>)
 80079c6:	7839      	ldrb	r1, [r7, #0]
 80079c8:	2203      	movs	r2, #3
 80079ca:	4628      	mov	r0, r5
 80079cc:	f7f8 fc00 	bl	80001d0 <memchr>
 80079d0:	b138      	cbz	r0, 80079e2 <_svfiprintf_r+0x142>
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	1b40      	subs	r0, r0, r5
 80079d6:	fa03 f000 	lsl.w	r0, r3, r0
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	4303      	orrs	r3, r0
 80079de:	3701      	adds	r7, #1
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	7839      	ldrb	r1, [r7, #0]
 80079e4:	4827      	ldr	r0, [pc, #156]	; (8007a84 <_svfiprintf_r+0x1e4>)
 80079e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ea:	2206      	movs	r2, #6
 80079ec:	1c7e      	adds	r6, r7, #1
 80079ee:	f7f8 fbef 	bl	80001d0 <memchr>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d038      	beq.n	8007a68 <_svfiprintf_r+0x1c8>
 80079f6:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <_svfiprintf_r+0x1e8>)
 80079f8:	bb13      	cbnz	r3, 8007a40 <_svfiprintf_r+0x1a0>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	3307      	adds	r3, #7
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	3308      	adds	r3, #8
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	444b      	add	r3, r9
 8007a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0c:	e76d      	b.n	80078ea <_svfiprintf_r+0x4a>
 8007a0e:	fb05 3202 	mla	r2, r5, r2, r3
 8007a12:	2001      	movs	r0, #1
 8007a14:	460f      	mov	r7, r1
 8007a16:	e7a6      	b.n	8007966 <_svfiprintf_r+0xc6>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	3701      	adds	r7, #1
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	250a      	movs	r5, #10
 8007a22:	4638      	mov	r0, r7
 8007a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a28:	3a30      	subs	r2, #48	; 0x30
 8007a2a:	2a09      	cmp	r2, #9
 8007a2c:	d903      	bls.n	8007a36 <_svfiprintf_r+0x196>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0c8      	beq.n	80079c4 <_svfiprintf_r+0x124>
 8007a32:	9105      	str	r1, [sp, #20]
 8007a34:	e7c6      	b.n	80079c4 <_svfiprintf_r+0x124>
 8007a36:	fb05 2101 	mla	r1, r5, r1, r2
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	e7f0      	b.n	8007a22 <_svfiprintf_r+0x182>
 8007a40:	ab03      	add	r3, sp, #12
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4622      	mov	r2, r4
 8007a46:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <_svfiprintf_r+0x1ec>)
 8007a48:	a904      	add	r1, sp, #16
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f3af 8000 	nop.w
 8007a50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a54:	4681      	mov	r9, r0
 8007a56:	d1d6      	bne.n	8007a06 <_svfiprintf_r+0x166>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	065b      	lsls	r3, r3, #25
 8007a5c:	f53f af35 	bmi.w	80078ca <_svfiprintf_r+0x2a>
 8007a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a62:	b01d      	add	sp, #116	; 0x74
 8007a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a68:	ab03      	add	r3, sp, #12
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <_svfiprintf_r+0x1ec>)
 8007a70:	a904      	add	r1, sp, #16
 8007a72:	4640      	mov	r0, r8
 8007a74:	f000 f882 	bl	8007b7c <_printf_i>
 8007a78:	e7ea      	b.n	8007a50 <_svfiprintf_r+0x1b0>
 8007a7a:	bf00      	nop
 8007a7c:	0800842c 	.word	0x0800842c
 8007a80:	08008432 	.word	0x08008432
 8007a84:	08008436 	.word	0x08008436
 8007a88:	00000000 	.word	0x00000000
 8007a8c:	080077ed 	.word	0x080077ed

08007a90 <_printf_common>:
 8007a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a94:	4691      	mov	r9, r2
 8007a96:	461f      	mov	r7, r3
 8007a98:	688a      	ldr	r2, [r1, #8]
 8007a9a:	690b      	ldr	r3, [r1, #16]
 8007a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	bfb8      	it	lt
 8007aa4:	4613      	movlt	r3, r2
 8007aa6:	f8c9 3000 	str.w	r3, [r9]
 8007aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	b112      	cbz	r2, 8007aba <_printf_common+0x2a>
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	f8c9 3000 	str.w	r3, [r9]
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	0699      	lsls	r1, r3, #26
 8007abe:	bf42      	ittt	mi
 8007ac0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ac4:	3302      	addmi	r3, #2
 8007ac6:	f8c9 3000 	strmi.w	r3, [r9]
 8007aca:	6825      	ldr	r5, [r4, #0]
 8007acc:	f015 0506 	ands.w	r5, r5, #6
 8007ad0:	d107      	bne.n	8007ae2 <_printf_common+0x52>
 8007ad2:	f104 0a19 	add.w	sl, r4, #25
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	42ab      	cmp	r3, r5
 8007ae0:	dc28      	bgt.n	8007b34 <_printf_common+0xa4>
 8007ae2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	3300      	adds	r3, #0
 8007aea:	bf18      	it	ne
 8007aec:	2301      	movne	r3, #1
 8007aee:	0692      	lsls	r2, r2, #26
 8007af0:	d42d      	bmi.n	8007b4e <_printf_common+0xbe>
 8007af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af6:	4639      	mov	r1, r7
 8007af8:	4630      	mov	r0, r6
 8007afa:	47c0      	blx	r8
 8007afc:	3001      	adds	r0, #1
 8007afe:	d020      	beq.n	8007b42 <_printf_common+0xb2>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	68e5      	ldr	r5, [r4, #12]
 8007b04:	f8d9 2000 	ldr.w	r2, [r9]
 8007b08:	f003 0306 	and.w	r3, r3, #6
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	bf08      	it	eq
 8007b10:	1aad      	subeq	r5, r5, r2
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	6922      	ldr	r2, [r4, #16]
 8007b16:	bf0c      	ite	eq
 8007b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b1c:	2500      	movne	r5, #0
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bfc4      	itt	gt
 8007b22:	1a9b      	subgt	r3, r3, r2
 8007b24:	18ed      	addgt	r5, r5, r3
 8007b26:	f04f 0900 	mov.w	r9, #0
 8007b2a:	341a      	adds	r4, #26
 8007b2c:	454d      	cmp	r5, r9
 8007b2e:	d11a      	bne.n	8007b66 <_printf_common+0xd6>
 8007b30:	2000      	movs	r0, #0
 8007b32:	e008      	b.n	8007b46 <_printf_common+0xb6>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4652      	mov	r2, sl
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	47c0      	blx	r8
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d103      	bne.n	8007b4a <_printf_common+0xba>
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4a:	3501      	adds	r5, #1
 8007b4c:	e7c3      	b.n	8007ad6 <_printf_common+0x46>
 8007b4e:	18e1      	adds	r1, r4, r3
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	2030      	movs	r0, #48	; 0x30
 8007b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b58:	4422      	add	r2, r4
 8007b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b62:	3302      	adds	r3, #2
 8007b64:	e7c5      	b.n	8007af2 <_printf_common+0x62>
 8007b66:	2301      	movs	r3, #1
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	47c0      	blx	r8
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0e6      	beq.n	8007b42 <_printf_common+0xb2>
 8007b74:	f109 0901 	add.w	r9, r9, #1
 8007b78:	e7d8      	b.n	8007b2c <_printf_common+0x9c>
	...

08007b7c <_printf_i>:
 8007b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b84:	460c      	mov	r4, r1
 8007b86:	7e09      	ldrb	r1, [r1, #24]
 8007b88:	b085      	sub	sp, #20
 8007b8a:	296e      	cmp	r1, #110	; 0x6e
 8007b8c:	4617      	mov	r7, r2
 8007b8e:	4606      	mov	r6, r0
 8007b90:	4698      	mov	r8, r3
 8007b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b94:	f000 80b3 	beq.w	8007cfe <_printf_i+0x182>
 8007b98:	d822      	bhi.n	8007be0 <_printf_i+0x64>
 8007b9a:	2963      	cmp	r1, #99	; 0x63
 8007b9c:	d036      	beq.n	8007c0c <_printf_i+0x90>
 8007b9e:	d80a      	bhi.n	8007bb6 <_printf_i+0x3a>
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	f000 80b9 	beq.w	8007d18 <_printf_i+0x19c>
 8007ba6:	2958      	cmp	r1, #88	; 0x58
 8007ba8:	f000 8083 	beq.w	8007cb2 <_printf_i+0x136>
 8007bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bb4:	e032      	b.n	8007c1c <_printf_i+0xa0>
 8007bb6:	2964      	cmp	r1, #100	; 0x64
 8007bb8:	d001      	beq.n	8007bbe <_printf_i+0x42>
 8007bba:	2969      	cmp	r1, #105	; 0x69
 8007bbc:	d1f6      	bne.n	8007bac <_printf_i+0x30>
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	6813      	ldr	r3, [r2, #0]
 8007bc2:	0605      	lsls	r5, r0, #24
 8007bc4:	f103 0104 	add.w	r1, r3, #4
 8007bc8:	d52a      	bpl.n	8007c20 <_printf_i+0xa4>
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6011      	str	r1, [r2, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da03      	bge.n	8007bda <_printf_i+0x5e>
 8007bd2:	222d      	movs	r2, #45	; 0x2d
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bda:	486f      	ldr	r0, [pc, #444]	; (8007d98 <_printf_i+0x21c>)
 8007bdc:	220a      	movs	r2, #10
 8007bde:	e039      	b.n	8007c54 <_printf_i+0xd8>
 8007be0:	2973      	cmp	r1, #115	; 0x73
 8007be2:	f000 809d 	beq.w	8007d20 <_printf_i+0x1a4>
 8007be6:	d808      	bhi.n	8007bfa <_printf_i+0x7e>
 8007be8:	296f      	cmp	r1, #111	; 0x6f
 8007bea:	d020      	beq.n	8007c2e <_printf_i+0xb2>
 8007bec:	2970      	cmp	r1, #112	; 0x70
 8007bee:	d1dd      	bne.n	8007bac <_printf_i+0x30>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	f043 0320 	orr.w	r3, r3, #32
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	e003      	b.n	8007c02 <_printf_i+0x86>
 8007bfa:	2975      	cmp	r1, #117	; 0x75
 8007bfc:	d017      	beq.n	8007c2e <_printf_i+0xb2>
 8007bfe:	2978      	cmp	r1, #120	; 0x78
 8007c00:	d1d4      	bne.n	8007bac <_printf_i+0x30>
 8007c02:	2378      	movs	r3, #120	; 0x78
 8007c04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c08:	4864      	ldr	r0, [pc, #400]	; (8007d9c <_printf_i+0x220>)
 8007c0a:	e055      	b.n	8007cb8 <_printf_i+0x13c>
 8007c0c:	6813      	ldr	r3, [r2, #0]
 8007c0e:	1d19      	adds	r1, r3, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6011      	str	r1, [r2, #0]
 8007c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e08c      	b.n	8007d3a <_printf_i+0x1be>
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6011      	str	r1, [r2, #0]
 8007c24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c28:	bf18      	it	ne
 8007c2a:	b21b      	sxthne	r3, r3
 8007c2c:	e7cf      	b.n	8007bce <_printf_i+0x52>
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	6825      	ldr	r5, [r4, #0]
 8007c32:	1d18      	adds	r0, r3, #4
 8007c34:	6010      	str	r0, [r2, #0]
 8007c36:	0628      	lsls	r0, r5, #24
 8007c38:	d501      	bpl.n	8007c3e <_printf_i+0xc2>
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	e002      	b.n	8007c44 <_printf_i+0xc8>
 8007c3e:	0668      	lsls	r0, r5, #25
 8007c40:	d5fb      	bpl.n	8007c3a <_printf_i+0xbe>
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	4854      	ldr	r0, [pc, #336]	; (8007d98 <_printf_i+0x21c>)
 8007c46:	296f      	cmp	r1, #111	; 0x6f
 8007c48:	bf14      	ite	ne
 8007c4a:	220a      	movne	r2, #10
 8007c4c:	2208      	moveq	r2, #8
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c54:	6865      	ldr	r5, [r4, #4]
 8007c56:	60a5      	str	r5, [r4, #8]
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	f2c0 8095 	blt.w	8007d88 <_printf_i+0x20c>
 8007c5e:	6821      	ldr	r1, [r4, #0]
 8007c60:	f021 0104 	bic.w	r1, r1, #4
 8007c64:	6021      	str	r1, [r4, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d13d      	bne.n	8007ce6 <_printf_i+0x16a>
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	f040 808e 	bne.w	8007d8c <_printf_i+0x210>
 8007c70:	4665      	mov	r5, ip
 8007c72:	2a08      	cmp	r2, #8
 8007c74:	d10b      	bne.n	8007c8e <_printf_i+0x112>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	07db      	lsls	r3, r3, #31
 8007c7a:	d508      	bpl.n	8007c8e <_printf_i+0x112>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	6862      	ldr	r2, [r4, #4]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	bfde      	ittt	le
 8007c84:	2330      	movle	r3, #48	; 0x30
 8007c86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c8e:	ebac 0305 	sub.w	r3, ip, r5
 8007c92:	6123      	str	r3, [r4, #16]
 8007c94:	f8cd 8000 	str.w	r8, [sp]
 8007c98:	463b      	mov	r3, r7
 8007c9a:	aa03      	add	r2, sp, #12
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff fef6 	bl	8007a90 <_printf_common>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d14d      	bne.n	8007d44 <_printf_i+0x1c8>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	b005      	add	sp, #20
 8007cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cb2:	4839      	ldr	r0, [pc, #228]	; (8007d98 <_printf_i+0x21c>)
 8007cb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cb8:	6813      	ldr	r3, [r2, #0]
 8007cba:	6821      	ldr	r1, [r4, #0]
 8007cbc:	1d1d      	adds	r5, r3, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6015      	str	r5, [r2, #0]
 8007cc2:	060a      	lsls	r2, r1, #24
 8007cc4:	d50b      	bpl.n	8007cde <_printf_i+0x162>
 8007cc6:	07ca      	lsls	r2, r1, #31
 8007cc8:	bf44      	itt	mi
 8007cca:	f041 0120 	orrmi.w	r1, r1, #32
 8007cce:	6021      	strmi	r1, [r4, #0]
 8007cd0:	b91b      	cbnz	r3, 8007cda <_printf_i+0x15e>
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	f022 0220 	bic.w	r2, r2, #32
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	2210      	movs	r2, #16
 8007cdc:	e7b7      	b.n	8007c4e <_printf_i+0xd2>
 8007cde:	064d      	lsls	r5, r1, #25
 8007ce0:	bf48      	it	mi
 8007ce2:	b29b      	uxthmi	r3, r3
 8007ce4:	e7ef      	b.n	8007cc6 <_printf_i+0x14a>
 8007ce6:	4665      	mov	r5, ip
 8007ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cec:	fb02 3311 	mls	r3, r2, r1, r3
 8007cf0:	5cc3      	ldrb	r3, [r0, r3]
 8007cf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	d1f5      	bne.n	8007ce8 <_printf_i+0x16c>
 8007cfc:	e7b9      	b.n	8007c72 <_printf_i+0xf6>
 8007cfe:	6813      	ldr	r3, [r2, #0]
 8007d00:	6825      	ldr	r5, [r4, #0]
 8007d02:	6961      	ldr	r1, [r4, #20]
 8007d04:	1d18      	adds	r0, r3, #4
 8007d06:	6010      	str	r0, [r2, #0]
 8007d08:	0628      	lsls	r0, r5, #24
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	d501      	bpl.n	8007d12 <_printf_i+0x196>
 8007d0e:	6019      	str	r1, [r3, #0]
 8007d10:	e002      	b.n	8007d18 <_printf_i+0x19c>
 8007d12:	066a      	lsls	r2, r5, #25
 8007d14:	d5fb      	bpl.n	8007d0e <_printf_i+0x192>
 8007d16:	8019      	strh	r1, [r3, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	4665      	mov	r5, ip
 8007d1e:	e7b9      	b.n	8007c94 <_printf_i+0x118>
 8007d20:	6813      	ldr	r3, [r2, #0]
 8007d22:	1d19      	adds	r1, r3, #4
 8007d24:	6011      	str	r1, [r2, #0]
 8007d26:	681d      	ldr	r5, [r3, #0]
 8007d28:	6862      	ldr	r2, [r4, #4]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f7f8 fa4f 	bl	80001d0 <memchr>
 8007d32:	b108      	cbz	r0, 8007d38 <_printf_i+0x1bc>
 8007d34:	1b40      	subs	r0, r0, r5
 8007d36:	6060      	str	r0, [r4, #4]
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	6123      	str	r3, [r4, #16]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d42:	e7a7      	b.n	8007c94 <_printf_i+0x118>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	462a      	mov	r2, r5
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0aa      	beq.n	8007ca8 <_printf_i+0x12c>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	079b      	lsls	r3, r3, #30
 8007d56:	d413      	bmi.n	8007d80 <_printf_i+0x204>
 8007d58:	68e0      	ldr	r0, [r4, #12]
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	4298      	cmp	r0, r3
 8007d5e:	bfb8      	it	lt
 8007d60:	4618      	movlt	r0, r3
 8007d62:	e7a3      	b.n	8007cac <_printf_i+0x130>
 8007d64:	2301      	movs	r3, #1
 8007d66:	464a      	mov	r2, r9
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	47c0      	blx	r8
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d09a      	beq.n	8007ca8 <_printf_i+0x12c>
 8007d72:	3501      	adds	r5, #1
 8007d74:	68e3      	ldr	r3, [r4, #12]
 8007d76:	9a03      	ldr	r2, [sp, #12]
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	42ab      	cmp	r3, r5
 8007d7c:	dcf2      	bgt.n	8007d64 <_printf_i+0x1e8>
 8007d7e:	e7eb      	b.n	8007d58 <_printf_i+0x1dc>
 8007d80:	2500      	movs	r5, #0
 8007d82:	f104 0919 	add.w	r9, r4, #25
 8007d86:	e7f5      	b.n	8007d74 <_printf_i+0x1f8>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1ac      	bne.n	8007ce6 <_printf_i+0x16a>
 8007d8c:	7803      	ldrb	r3, [r0, #0]
 8007d8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d96:	e76c      	b.n	8007c72 <_printf_i+0xf6>
 8007d98:	0800843d 	.word	0x0800843d
 8007d9c:	0800844e 	.word	0x0800844e

08007da0 <_sbrk_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4c06      	ldr	r4, [pc, #24]	; (8007dbc <_sbrk_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4605      	mov	r5, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	f7fb fcc6 	bl	800373c <_sbrk>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_sbrk_r+0x1a>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_sbrk_r+0x1a>
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20000ba8 	.word	0x20000ba8

08007dc0 <memcpy>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	1e43      	subs	r3, r0, #1
 8007dc4:	440a      	add	r2, r1
 8007dc6:	4291      	cmp	r1, r2
 8007dc8:	d100      	bne.n	8007dcc <memcpy+0xc>
 8007dca:	bd10      	pop	{r4, pc}
 8007dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd4:	e7f7      	b.n	8007dc6 <memcpy+0x6>

08007dd6 <memmove>:
 8007dd6:	4288      	cmp	r0, r1
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	eb01 0302 	add.w	r3, r1, r2
 8007dde:	d807      	bhi.n	8007df0 <memmove+0x1a>
 8007de0:	1e42      	subs	r2, r0, #1
 8007de2:	4299      	cmp	r1, r3
 8007de4:	d00a      	beq.n	8007dfc <memmove+0x26>
 8007de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007dee:	e7f8      	b.n	8007de2 <memmove+0xc>
 8007df0:	4283      	cmp	r3, r0
 8007df2:	d9f5      	bls.n	8007de0 <memmove+0xa>
 8007df4:	1881      	adds	r1, r0, r2
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	42d3      	cmn	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memmove+0x28>
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e06:	e7f7      	b.n	8007df8 <memmove+0x22>

08007e08 <__malloc_lock>:
 8007e08:	4770      	bx	lr

08007e0a <__malloc_unlock>:
 8007e0a:	4770      	bx	lr

08007e0c <_realloc_r>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	4607      	mov	r7, r0
 8007e10:	4614      	mov	r4, r2
 8007e12:	460e      	mov	r6, r1
 8007e14:	b921      	cbnz	r1, 8007e20 <_realloc_r+0x14>
 8007e16:	4611      	mov	r1, r2
 8007e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e1c:	f7ff bc8c 	b.w	8007738 <_malloc_r>
 8007e20:	b922      	cbnz	r2, 8007e2c <_realloc_r+0x20>
 8007e22:	f7ff fc3b 	bl	800769c <_free_r>
 8007e26:	4625      	mov	r5, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2c:	f000 f814 	bl	8007e58 <_malloc_usable_size_r>
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d20f      	bcs.n	8007e54 <_realloc_r+0x48>
 8007e34:	4621      	mov	r1, r4
 8007e36:	4638      	mov	r0, r7
 8007e38:	f7ff fc7e 	bl	8007738 <_malloc_r>
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d0f2      	beq.n	8007e28 <_realloc_r+0x1c>
 8007e42:	4631      	mov	r1, r6
 8007e44:	4622      	mov	r2, r4
 8007e46:	f7ff ffbb 	bl	8007dc0 <memcpy>
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff fc25 	bl	800769c <_free_r>
 8007e52:	e7e9      	b.n	8007e28 <_realloc_r+0x1c>
 8007e54:	4635      	mov	r5, r6
 8007e56:	e7e7      	b.n	8007e28 <_realloc_r+0x1c>

08007e58 <_malloc_usable_size_r>:
 8007e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5c:	1f18      	subs	r0, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfbc      	itt	lt
 8007e62:	580b      	ldrlt	r3, [r1, r0]
 8007e64:	18c0      	addlt	r0, r0, r3
 8007e66:	4770      	bx	lr

08007e68 <atan>:
 8007e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	ec55 4b10 	vmov	r4, r5, d0
 8007e70:	4bc3      	ldr	r3, [pc, #780]	; (8008180 <atan+0x318>)
 8007e72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e76:	429e      	cmp	r6, r3
 8007e78:	46ab      	mov	fp, r5
 8007e7a:	dd18      	ble.n	8007eae <atan+0x46>
 8007e7c:	4bc1      	ldr	r3, [pc, #772]	; (8008184 <atan+0x31c>)
 8007e7e:	429e      	cmp	r6, r3
 8007e80:	dc01      	bgt.n	8007e86 <atan+0x1e>
 8007e82:	d109      	bne.n	8007e98 <atan+0x30>
 8007e84:	b144      	cbz	r4, 8007e98 <atan+0x30>
 8007e86:	4622      	mov	r2, r4
 8007e88:	462b      	mov	r3, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f7f8 f9f5 	bl	800027c <__adddf3>
 8007e92:	4604      	mov	r4, r0
 8007e94:	460d      	mov	r5, r1
 8007e96:	e006      	b.n	8007ea6 <atan+0x3e>
 8007e98:	f1bb 0f00 	cmp.w	fp, #0
 8007e9c:	f340 8131 	ble.w	8008102 <atan+0x29a>
 8007ea0:	a59b      	add	r5, pc, #620	; (adr r5, 8008110 <atan+0x2a8>)
 8007ea2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ea6:	ec45 4b10 	vmov	d0, r4, r5
 8007eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	4bb6      	ldr	r3, [pc, #728]	; (8008188 <atan+0x320>)
 8007eb0:	429e      	cmp	r6, r3
 8007eb2:	dc14      	bgt.n	8007ede <atan+0x76>
 8007eb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007eb8:	429e      	cmp	r6, r3
 8007eba:	dc0d      	bgt.n	8007ed8 <atan+0x70>
 8007ebc:	a396      	add	r3, pc, #600	; (adr r3, 8008118 <atan+0x2b0>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	ee10 0a10 	vmov	r0, s0
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 f9d8 	bl	800027c <__adddf3>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4baf      	ldr	r3, [pc, #700]	; (800818c <atan+0x324>)
 8007ed0:	f7f8 fe1a 	bl	8000b08 <__aeabi_dcmpgt>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d1e6      	bne.n	8007ea6 <atan+0x3e>
 8007ed8:	f04f 3aff 	mov.w	sl, #4294967295
 8007edc:	e02b      	b.n	8007f36 <atan+0xce>
 8007ede:	f000 f963 	bl	80081a8 <fabs>
 8007ee2:	4bab      	ldr	r3, [pc, #684]	; (8008190 <atan+0x328>)
 8007ee4:	429e      	cmp	r6, r3
 8007ee6:	ec55 4b10 	vmov	r4, r5, d0
 8007eea:	f300 80bf 	bgt.w	800806c <atan+0x204>
 8007eee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ef2:	429e      	cmp	r6, r3
 8007ef4:	f300 80a0 	bgt.w	8008038 <atan+0x1d0>
 8007ef8:	ee10 2a10 	vmov	r2, s0
 8007efc:	ee10 0a10 	vmov	r0, s0
 8007f00:	462b      	mov	r3, r5
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f9ba 	bl	800027c <__adddf3>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4ba0      	ldr	r3, [pc, #640]	; (800818c <atan+0x324>)
 8007f0c:	f7f8 f9b4 	bl	8000278 <__aeabi_dsub>
 8007f10:	2200      	movs	r2, #0
 8007f12:	4606      	mov	r6, r0
 8007f14:	460f      	mov	r7, r1
 8007f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f7f8 f9ad 	bl	800027c <__adddf3>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fc87 	bl	800083c <__aeabi_ddiv>
 8007f2e:	f04f 0a00 	mov.w	sl, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 fb53 	bl	80005e8 <__aeabi_dmul>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4680      	mov	r8, r0
 8007f48:	4689      	mov	r9, r1
 8007f4a:	f7f8 fb4d 	bl	80005e8 <__aeabi_dmul>
 8007f4e:	a374      	add	r3, pc, #464	; (adr r3, 8008120 <atan+0x2b8>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	f7f8 fb46 	bl	80005e8 <__aeabi_dmul>
 8007f5c:	a372      	add	r3, pc, #456	; (adr r3, 8008128 <atan+0x2c0>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f98b 	bl	800027c <__adddf3>
 8007f66:	4632      	mov	r2, r6
 8007f68:	463b      	mov	r3, r7
 8007f6a:	f7f8 fb3d 	bl	80005e8 <__aeabi_dmul>
 8007f6e:	a370      	add	r3, pc, #448	; (adr r3, 8008130 <atan+0x2c8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 f982 	bl	800027c <__adddf3>
 8007f78:	4632      	mov	r2, r6
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	f7f8 fb34 	bl	80005e8 <__aeabi_dmul>
 8007f80:	a36d      	add	r3, pc, #436	; (adr r3, 8008138 <atan+0x2d0>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f979 	bl	800027c <__adddf3>
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	f7f8 fb2b 	bl	80005e8 <__aeabi_dmul>
 8007f92:	a36b      	add	r3, pc, #428	; (adr r3, 8008140 <atan+0x2d8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f970 	bl	800027c <__adddf3>
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	f7f8 fb22 	bl	80005e8 <__aeabi_dmul>
 8007fa4:	a368      	add	r3, pc, #416	; (adr r3, 8008148 <atan+0x2e0>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f967 	bl	800027c <__adddf3>
 8007fae:	4642      	mov	r2, r8
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	f7f8 fb19 	bl	80005e8 <__aeabi_dmul>
 8007fb6:	a366      	add	r3, pc, #408	; (adr r3, 8008150 <atan+0x2e8>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	4689      	mov	r9, r1
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	f7f8 fb10 	bl	80005e8 <__aeabi_dmul>
 8007fc8:	a363      	add	r3, pc, #396	; (adr r3, 8008158 <atan+0x2f0>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 f953 	bl	8000278 <__aeabi_dsub>
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	f7f8 fb07 	bl	80005e8 <__aeabi_dmul>
 8007fda:	a361      	add	r3, pc, #388	; (adr r3, 8008160 <atan+0x2f8>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f7f8 f94a 	bl	8000278 <__aeabi_dsub>
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	f7f8 fafe 	bl	80005e8 <__aeabi_dmul>
 8007fec:	a35e      	add	r3, pc, #376	; (adr r3, 8008168 <atan+0x300>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f7f8 f941 	bl	8000278 <__aeabi_dsub>
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	f7f8 faf5 	bl	80005e8 <__aeabi_dmul>
 8007ffe:	a35c      	add	r3, pc, #368	; (adr r3, 8008170 <atan+0x308>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 f938 	bl	8000278 <__aeabi_dsub>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	f7f8 faec 	bl	80005e8 <__aeabi_dmul>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	f7f8 f930 	bl	800027c <__adddf3>
 800801c:	4622      	mov	r2, r4
 800801e:	462b      	mov	r3, r5
 8008020:	f7f8 fae2 	bl	80005e8 <__aeabi_dmul>
 8008024:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	d14b      	bne.n	80080c6 <atan+0x25e>
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 f921 	bl	8000278 <__aeabi_dsub>
 8008036:	e72c      	b.n	8007e92 <atan+0x2a>
 8008038:	ee10 0a10 	vmov	r0, s0
 800803c:	2200      	movs	r2, #0
 800803e:	4b53      	ldr	r3, [pc, #332]	; (800818c <atan+0x324>)
 8008040:	4629      	mov	r1, r5
 8008042:	f7f8 f919 	bl	8000278 <__aeabi_dsub>
 8008046:	2200      	movs	r2, #0
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	4b4f      	ldr	r3, [pc, #316]	; (800818c <atan+0x324>)
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 f913 	bl	800027c <__adddf3>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fbed 	bl	800083c <__aeabi_ddiv>
 8008062:	f04f 0a01 	mov.w	sl, #1
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	e764      	b.n	8007f36 <atan+0xce>
 800806c:	4b49      	ldr	r3, [pc, #292]	; (8008194 <atan+0x32c>)
 800806e:	429e      	cmp	r6, r3
 8008070:	dc1d      	bgt.n	80080ae <atan+0x246>
 8008072:	ee10 0a10 	vmov	r0, s0
 8008076:	2200      	movs	r2, #0
 8008078:	4b47      	ldr	r3, [pc, #284]	; (8008198 <atan+0x330>)
 800807a:	4629      	mov	r1, r5
 800807c:	f7f8 f8fc 	bl	8000278 <__aeabi_dsub>
 8008080:	2200      	movs	r2, #0
 8008082:	4606      	mov	r6, r0
 8008084:	460f      	mov	r7, r1
 8008086:	4b44      	ldr	r3, [pc, #272]	; (8008198 <atan+0x330>)
 8008088:	4620      	mov	r0, r4
 800808a:	4629      	mov	r1, r5
 800808c:	f7f8 faac 	bl	80005e8 <__aeabi_dmul>
 8008090:	2200      	movs	r2, #0
 8008092:	4b3e      	ldr	r3, [pc, #248]	; (800818c <atan+0x324>)
 8008094:	f7f8 f8f2 	bl	800027c <__adddf3>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fbcc 	bl	800083c <__aeabi_ddiv>
 80080a4:	f04f 0a02 	mov.w	sl, #2
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	e743      	b.n	8007f36 <atan+0xce>
 80080ae:	462b      	mov	r3, r5
 80080b0:	ee10 2a10 	vmov	r2, s0
 80080b4:	2000      	movs	r0, #0
 80080b6:	4939      	ldr	r1, [pc, #228]	; (800819c <atan+0x334>)
 80080b8:	f7f8 fbc0 	bl	800083c <__aeabi_ddiv>
 80080bc:	f04f 0a03 	mov.w	sl, #3
 80080c0:	4604      	mov	r4, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	e737      	b.n	8007f36 <atan+0xce>
 80080c6:	4b36      	ldr	r3, [pc, #216]	; (80081a0 <atan+0x338>)
 80080c8:	4e36      	ldr	r6, [pc, #216]	; (80081a4 <atan+0x33c>)
 80080ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80080ce:	4456      	add	r6, sl
 80080d0:	449a      	add	sl, r3
 80080d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80080d6:	f7f8 f8cf 	bl	8000278 <__aeabi_dsub>
 80080da:	4622      	mov	r2, r4
 80080dc:	462b      	mov	r3, r5
 80080de:	f7f8 f8cb 	bl	8000278 <__aeabi_dsub>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080ea:	f7f8 f8c5 	bl	8000278 <__aeabi_dsub>
 80080ee:	f1bb 0f00 	cmp.w	fp, #0
 80080f2:	4604      	mov	r4, r0
 80080f4:	460d      	mov	r5, r1
 80080f6:	f6bf aed6 	bge.w	8007ea6 <atan+0x3e>
 80080fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080fe:	461d      	mov	r5, r3
 8008100:	e6d1      	b.n	8007ea6 <atan+0x3e>
 8008102:	a51d      	add	r5, pc, #116	; (adr r5, 8008178 <atan+0x310>)
 8008104:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008108:	e6cd      	b.n	8007ea6 <atan+0x3e>
 800810a:	bf00      	nop
 800810c:	f3af 8000 	nop.w
 8008110:	54442d18 	.word	0x54442d18
 8008114:	3ff921fb 	.word	0x3ff921fb
 8008118:	8800759c 	.word	0x8800759c
 800811c:	7e37e43c 	.word	0x7e37e43c
 8008120:	e322da11 	.word	0xe322da11
 8008124:	3f90ad3a 	.word	0x3f90ad3a
 8008128:	24760deb 	.word	0x24760deb
 800812c:	3fa97b4b 	.word	0x3fa97b4b
 8008130:	a0d03d51 	.word	0xa0d03d51
 8008134:	3fb10d66 	.word	0x3fb10d66
 8008138:	c54c206e 	.word	0xc54c206e
 800813c:	3fb745cd 	.word	0x3fb745cd
 8008140:	920083ff 	.word	0x920083ff
 8008144:	3fc24924 	.word	0x3fc24924
 8008148:	5555550d 	.word	0x5555550d
 800814c:	3fd55555 	.word	0x3fd55555
 8008150:	2c6a6c2f 	.word	0x2c6a6c2f
 8008154:	bfa2b444 	.word	0xbfa2b444
 8008158:	52defd9a 	.word	0x52defd9a
 800815c:	3fadde2d 	.word	0x3fadde2d
 8008160:	af749a6d 	.word	0xaf749a6d
 8008164:	3fb3b0f2 	.word	0x3fb3b0f2
 8008168:	fe231671 	.word	0xfe231671
 800816c:	3fbc71c6 	.word	0x3fbc71c6
 8008170:	9998ebc4 	.word	0x9998ebc4
 8008174:	3fc99999 	.word	0x3fc99999
 8008178:	54442d18 	.word	0x54442d18
 800817c:	bff921fb 	.word	0xbff921fb
 8008180:	440fffff 	.word	0x440fffff
 8008184:	7ff00000 	.word	0x7ff00000
 8008188:	3fdbffff 	.word	0x3fdbffff
 800818c:	3ff00000 	.word	0x3ff00000
 8008190:	3ff2ffff 	.word	0x3ff2ffff
 8008194:	40037fff 	.word	0x40037fff
 8008198:	3ff80000 	.word	0x3ff80000
 800819c:	bff00000 	.word	0xbff00000
 80081a0:	08008480 	.word	0x08008480
 80081a4:	08008460 	.word	0x08008460

080081a8 <fabs>:
 80081a8:	ec51 0b10 	vmov	r0, r1, d0
 80081ac:	ee10 2a10 	vmov	r2, s0
 80081b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081b4:	ec43 2b10 	vmov	d0, r2, r3
 80081b8:	4770      	bx	lr
	...

080081bc <sqrt>:
 80081bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081c0:	ed2d 8b02 	vpush	{d8}
 80081c4:	b08b      	sub	sp, #44	; 0x2c
 80081c6:	ec55 4b10 	vmov	r4, r5, d0
 80081ca:	f000 f851 	bl	8008270 <__ieee754_sqrt>
 80081ce:	4b26      	ldr	r3, [pc, #152]	; (8008268 <sqrt+0xac>)
 80081d0:	eeb0 8a40 	vmov.f32	s16, s0
 80081d4:	eef0 8a60 	vmov.f32	s17, s1
 80081d8:	f993 6000 	ldrsb.w	r6, [r3]
 80081dc:	1c73      	adds	r3, r6, #1
 80081de:	d02a      	beq.n	8008236 <sqrt+0x7a>
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	4620      	mov	r0, r4
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7f8 fc98 	bl	8000b1c <__aeabi_dcmpun>
 80081ec:	4607      	mov	r7, r0
 80081ee:	bb10      	cbnz	r0, 8008236 <sqrt+0x7a>
 80081f0:	f04f 0800 	mov.w	r8, #0
 80081f4:	f04f 0900 	mov.w	r9, #0
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f8 fc64 	bl	8000acc <__aeabi_dcmplt>
 8008204:	b1b8      	cbz	r0, 8008236 <sqrt+0x7a>
 8008206:	2301      	movs	r3, #1
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	4b18      	ldr	r3, [pc, #96]	; (800826c <sqrt+0xb0>)
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	9708      	str	r7, [sp, #32]
 8008210:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008214:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008218:	b9b6      	cbnz	r6, 8008248 <sqrt+0x8c>
 800821a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800821e:	4668      	mov	r0, sp
 8008220:	f000 f8d6 	bl	80083d0 <matherr>
 8008224:	b1d0      	cbz	r0, 800825c <sqrt+0xa0>
 8008226:	9b08      	ldr	r3, [sp, #32]
 8008228:	b11b      	cbz	r3, 8008232 <sqrt+0x76>
 800822a:	f7ff f9a9 	bl	8007580 <__errno>
 800822e:	9b08      	ldr	r3, [sp, #32]
 8008230:	6003      	str	r3, [r0, #0]
 8008232:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008236:	eeb0 0a48 	vmov.f32	s0, s16
 800823a:	eef0 0a68 	vmov.f32	s1, s17
 800823e:	b00b      	add	sp, #44	; 0x2c
 8008240:	ecbd 8b02 	vpop	{d8}
 8008244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008248:	4642      	mov	r2, r8
 800824a:	464b      	mov	r3, r9
 800824c:	4640      	mov	r0, r8
 800824e:	4649      	mov	r1, r9
 8008250:	f7f8 faf4 	bl	800083c <__aeabi_ddiv>
 8008254:	2e02      	cmp	r6, #2
 8008256:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800825a:	d1e0      	bne.n	800821e <sqrt+0x62>
 800825c:	f7ff f990 	bl	8007580 <__errno>
 8008260:	2321      	movs	r3, #33	; 0x21
 8008262:	6003      	str	r3, [r0, #0]
 8008264:	e7df      	b.n	8008226 <sqrt+0x6a>
 8008266:	bf00      	nop
 8008268:	2000007c 	.word	0x2000007c
 800826c:	080084a0 	.word	0x080084a0

08008270 <__ieee754_sqrt>:
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	4955      	ldr	r1, [pc, #340]	; (80083cc <__ieee754_sqrt+0x15c>)
 8008276:	ec55 4b10 	vmov	r4, r5, d0
 800827a:	43a9      	bics	r1, r5
 800827c:	462b      	mov	r3, r5
 800827e:	462a      	mov	r2, r5
 8008280:	d112      	bne.n	80082a8 <__ieee754_sqrt+0x38>
 8008282:	ee10 2a10 	vmov	r2, s0
 8008286:	ee10 0a10 	vmov	r0, s0
 800828a:	4629      	mov	r1, r5
 800828c:	f7f8 f9ac 	bl	80005e8 <__aeabi_dmul>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	f7f7 fff0 	bl	800027c <__adddf3>
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	ec45 4b10 	vmov	d0, r4, r5
 80082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	ee10 0a10 	vmov	r0, s0
 80082ae:	4621      	mov	r1, r4
 80082b0:	dc0f      	bgt.n	80082d2 <__ieee754_sqrt+0x62>
 80082b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082b6:	4330      	orrs	r0, r6
 80082b8:	d0f2      	beq.n	80082a0 <__ieee754_sqrt+0x30>
 80082ba:	b155      	cbz	r5, 80082d2 <__ieee754_sqrt+0x62>
 80082bc:	ee10 2a10 	vmov	r2, s0
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f7 ffd8 	bl	8000278 <__aeabi_dsub>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	f7f8 fab6 	bl	800083c <__aeabi_ddiv>
 80082d0:	e7e4      	b.n	800829c <__ieee754_sqrt+0x2c>
 80082d2:	151b      	asrs	r3, r3, #20
 80082d4:	d073      	beq.n	80083be <__ieee754_sqrt+0x14e>
 80082d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082da:	07dd      	lsls	r5, r3, #31
 80082dc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80082e0:	bf48      	it	mi
 80082e2:	0fc8      	lsrmi	r0, r1, #31
 80082e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80082e8:	bf44      	itt	mi
 80082ea:	0049      	lslmi	r1, r1, #1
 80082ec:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80082f0:	2500      	movs	r5, #0
 80082f2:	1058      	asrs	r0, r3, #1
 80082f4:	0fcb      	lsrs	r3, r1, #31
 80082f6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80082fa:	0049      	lsls	r1, r1, #1
 80082fc:	2316      	movs	r3, #22
 80082fe:	462c      	mov	r4, r5
 8008300:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008304:	19a7      	adds	r7, r4, r6
 8008306:	4297      	cmp	r7, r2
 8008308:	bfde      	ittt	le
 800830a:	19bc      	addle	r4, r7, r6
 800830c:	1bd2      	suble	r2, r2, r7
 800830e:	19ad      	addle	r5, r5, r6
 8008310:	0fcf      	lsrs	r7, r1, #31
 8008312:	3b01      	subs	r3, #1
 8008314:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008318:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800831c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008320:	d1f0      	bne.n	8008304 <__ieee754_sqrt+0x94>
 8008322:	f04f 0c20 	mov.w	ip, #32
 8008326:	469e      	mov	lr, r3
 8008328:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800832c:	42a2      	cmp	r2, r4
 800832e:	eb06 070e 	add.w	r7, r6, lr
 8008332:	dc02      	bgt.n	800833a <__ieee754_sqrt+0xca>
 8008334:	d112      	bne.n	800835c <__ieee754_sqrt+0xec>
 8008336:	428f      	cmp	r7, r1
 8008338:	d810      	bhi.n	800835c <__ieee754_sqrt+0xec>
 800833a:	2f00      	cmp	r7, #0
 800833c:	eb07 0e06 	add.w	lr, r7, r6
 8008340:	da42      	bge.n	80083c8 <__ieee754_sqrt+0x158>
 8008342:	f1be 0f00 	cmp.w	lr, #0
 8008346:	db3f      	blt.n	80083c8 <__ieee754_sqrt+0x158>
 8008348:	f104 0801 	add.w	r8, r4, #1
 800834c:	1b12      	subs	r2, r2, r4
 800834e:	428f      	cmp	r7, r1
 8008350:	bf88      	it	hi
 8008352:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008356:	1bc9      	subs	r1, r1, r7
 8008358:	4433      	add	r3, r6
 800835a:	4644      	mov	r4, r8
 800835c:	0052      	lsls	r2, r2, #1
 800835e:	f1bc 0c01 	subs.w	ip, ip, #1
 8008362:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008366:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800836a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800836e:	d1dd      	bne.n	800832c <__ieee754_sqrt+0xbc>
 8008370:	430a      	orrs	r2, r1
 8008372:	d006      	beq.n	8008382 <__ieee754_sqrt+0x112>
 8008374:	1c5c      	adds	r4, r3, #1
 8008376:	bf13      	iteet	ne
 8008378:	3301      	addne	r3, #1
 800837a:	3501      	addeq	r5, #1
 800837c:	4663      	moveq	r3, ip
 800837e:	f023 0301 	bicne.w	r3, r3, #1
 8008382:	106a      	asrs	r2, r5, #1
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	07e9      	lsls	r1, r5, #31
 8008388:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800838c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008390:	bf48      	it	mi
 8008392:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008396:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800839a:	461c      	mov	r4, r3
 800839c:	e780      	b.n	80082a0 <__ieee754_sqrt+0x30>
 800839e:	0aca      	lsrs	r2, r1, #11
 80083a0:	3815      	subs	r0, #21
 80083a2:	0549      	lsls	r1, r1, #21
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d0fa      	beq.n	800839e <__ieee754_sqrt+0x12e>
 80083a8:	02d6      	lsls	r6, r2, #11
 80083aa:	d50a      	bpl.n	80083c2 <__ieee754_sqrt+0x152>
 80083ac:	f1c3 0420 	rsb	r4, r3, #32
 80083b0:	fa21 f404 	lsr.w	r4, r1, r4
 80083b4:	1e5d      	subs	r5, r3, #1
 80083b6:	4099      	lsls	r1, r3
 80083b8:	4322      	orrs	r2, r4
 80083ba:	1b43      	subs	r3, r0, r5
 80083bc:	e78b      	b.n	80082d6 <__ieee754_sqrt+0x66>
 80083be:	4618      	mov	r0, r3
 80083c0:	e7f0      	b.n	80083a4 <__ieee754_sqrt+0x134>
 80083c2:	0052      	lsls	r2, r2, #1
 80083c4:	3301      	adds	r3, #1
 80083c6:	e7ef      	b.n	80083a8 <__ieee754_sqrt+0x138>
 80083c8:	46a0      	mov	r8, r4
 80083ca:	e7bf      	b.n	800834c <__ieee754_sqrt+0xdc>
 80083cc:	7ff00000 	.word	0x7ff00000

080083d0 <matherr>:
 80083d0:	2000      	movs	r0, #0
 80083d2:	4770      	bx	lr

080083d4 <_init>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	bf00      	nop
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr

080083e0 <_fini>:
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	bf00      	nop
 80083e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e6:	bc08      	pop	{r3}
 80083e8:	469e      	mov	lr, r3
 80083ea:	4770      	bx	lr
