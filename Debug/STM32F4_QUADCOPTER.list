
STM32F4_QUADCOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006edc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007068  08007068  00017068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d0  080070d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d8  080070d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080070e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000080  08007160  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08007160  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a54  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002852  00000000  00000000  00037b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  0003a358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  0003b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022267  00000000  00000000  0003c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1b5  00000000  00000000  0005e407  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc1c0  00000000  00000000  0006b5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013777c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000444c  00000000  00000000  001377f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800704c 	.word	0x0800704c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800704c 	.word	0x0800704c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <i2c_write_accelerometer>:
* Description  : This function write to register of slave device Accelerometer 0x53: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_write_accelerometer(uint8_t reg, uint8_t value)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	4603      	mov	r3, r0
 8000e48:	460a      	mov	r2, r1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2]={0};
 8000e50:	2300      	movs	r3, #0
 8000e52:	81bb      	strh	r3, [r7, #12]
	data[0] = reg;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, 0x53<<1, data, 2, 10);
 8000e5c:	f107 020c 	add.w	r2, r7, #12
 8000e60:	230a      	movs	r3, #10
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2302      	movs	r3, #2
 8000e66:	21a6      	movs	r1, #166	; 0xa6
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <i2c_write_accelerometer+0x38>)
 8000e6a:	f002 fb33 	bl	80034d4 <HAL_I2C_Master_Transmit>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000e0 	.word	0x200000e0

08000e7c <i2c_read_accelerometer>:
* Description  : This function read from register of slave device Accelerometer 0x53: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_read_accelerometer(uint8_t reg, uint8_t numberofbytes)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, 0x53<<1, reg, I2C_MEMADD_SIZE_8BIT, data_receive, numberofbytes, 100);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	2264      	movs	r2, #100	; 0x64
 8000e96:	9202      	str	r2, [sp, #8]
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <i2c_read_accelerometer+0x38>)
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	21a6      	movs	r1, #166	; 0xa6
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <i2c_read_accelerometer+0x3c>)
 8000ea6:	f002 fc13 	bl	80036d0 <HAL_I2C_Mem_Read>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000a0 	.word	0x200000a0
 8000eb8:	200000e0 	.word	0x200000e0

08000ebc <InitialiseAccelerometer>:
* Description  : This function initialize Accelerometer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialiseAccelerometer()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	/* Turn off inactivity / activity interrupts for all axis */
	i2c_write_accelerometer(0x27, 0x0);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2027      	movs	r0, #39	; 0x27
 8000ec4:	f7ff ffbc 	bl	8000e40 <i2c_write_accelerometer>

	/* Turn off interrupts for tap detection */
	i2c_write_accelerometer(0x2A, 0x0);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	202a      	movs	r0, #42	; 0x2a
 8000ecc:	f7ff ffb8 	bl	8000e40 <i2c_write_accelerometer>
	/* Select "Normal" power, this uses more power and has less noise (0x0.)
	 * Select output data rate of 100kHz (0x.A)
	 * Output data rate should match the bus frequency / sample rate. To make it
	 *   400kHz, change this value to (0x.C)
	 */
	i2c_write_accelerometer(0x2C, 0x0A);
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	202c      	movs	r0, #44	; 0x2c
 8000ed4:	f7ff ffb4 	bl	8000e40 <i2c_write_accelerometer>

	/* Put the accelerometer in "measurement" mode
	 * Ensure the device will not sleep */
	i2c_write_accelerometer(0x2D, 0x08);
 8000ed8:	2108      	movs	r1, #8
 8000eda:	202d      	movs	r0, #45	; 0x2d
 8000edc:	f7ff ffb0 	bl	8000e40 <i2c_write_accelerometer>

	/* Turn off all interrupts outputs */
	i2c_write_accelerometer(0x2E, 0x0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	202e      	movs	r0, #46	; 0x2e
 8000ee4:	f7ff ffac 	bl	8000e40 <i2c_write_accelerometer>
	/* Turn self test off.
	 * Using three wire SPI mode (i2c?).
	 * Left justify mode (most significant bit).
	 * Full resolution, full range.
	 */
	i2c_write_accelerometer(0x31, 0x4F);
 8000ee8:	214f      	movs	r1, #79	; 0x4f
 8000eea:	2031      	movs	r0, #49	; 0x31
 8000eec:	f7ff ffa8 	bl	8000e40 <i2c_write_accelerometer>

	/* Initialize the accelerometer at zero position */
	accelerometerReading.x = 0.0f;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	accelerometerReading.y = 0.0f;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
	accelerometerReading.z = 0.0f;
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
	accelerometerReading.xOffset = 0.0f;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
	accelerometerReading.yOffset = 0.0f;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
	accelerometerReading.zOffset = 0.0f;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
	accelerometerReading.readings = 0;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <InitialiseAccelerometer+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

	isReadingAccelerometer = 0;
 8000f26:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <InitialiseAccelerometer+0x78>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000194 	.word	0x20000194
 8000f34:	200000cc 	.word	0x200000cc

08000f38 <ReadAccelerometer>:
* Description  : This function read data and store to struct variable.
* Arguments    : None
* Return Value : None
******************************************************************************/
void ReadAccelerometer()
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
	// Check data exist or not by global variable bool isReadingAccelerometer
	if (!isReadingAccelerometer) {
 8000f3e:	4bb2      	ldr	r3, [pc, #712]	; (8001208 <ReadAccelerometer+0x2d0>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <ReadAccelerometer+0x24>
		/* kick off a new read of the accelerometer values with: \
			device ADXL345 (0x53) and pheripheral (0x32), Numbyte want read (6) */
		i2c_read_accelerometer(0x32, 6);
 8000f4c:	2106      	movs	r1, #6
 8000f4e:	2032      	movs	r0, #50	; 0x32
 8000f50:	f7ff ff94 	bl	8000e7c <i2c_read_accelerometer>
		isReadingAccelerometer = 1;
 8000f54:	4bac      	ldr	r3, [pc, #688]	; (8001208 <ReadAccelerometer+0x2d0>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
		return;
 8000f5a:	e14a      	b.n	80011f2 <ReadAccelerometer+0x2ba>
	}

	// done! convert the values to a reading
	uint8_t xLow = data_receive[0];
 8000f5c:	4bab      	ldr	r3, [pc, #684]	; (800120c <ReadAccelerometer+0x2d4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t xHigh = data_receive[1];
 8000f64:	4ba9      	ldr	r3, [pc, #676]	; (800120c <ReadAccelerometer+0x2d4>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t yLow = data_receive[2];
 8000f6c:	4ba7      	ldr	r3, [pc, #668]	; (800120c <ReadAccelerometer+0x2d4>)
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t yHigh = data_receive[3];
 8000f74:	4ba5      	ldr	r3, [pc, #660]	; (800120c <ReadAccelerometer+0x2d4>)
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t zLow = data_receive[4];
 8000f7c:	4ba3      	ldr	r3, [pc, #652]	; (800120c <ReadAccelerometer+0x2d4>)
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t zHigh = data_receive[5];
 8000f84:	4ba1      	ldr	r3, [pc, #644]	; (800120c <ReadAccelerometer+0x2d4>)
 8000f86:	795b      	ldrb	r3, [r3, #5]
 8000f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	int16_t rawX = (((int16_t) xHigh << 8) | xLow);
 8000f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	853b      	strh	r3, [r7, #40]	; 0x28
	int16_t rawY = (((int16_t) yHigh << 8) | yLow);
 8000f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t rawZ = (((int16_t) zHigh << 8) | zLow);
 8000fb0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	84bb      	strh	r3, [r7, #36]	; 0x24

	/* full resolution means that there is a scale of 3.9mG/LSB */
	accelerometerReading.xG = rawX * 0.0039;
 8000fc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa50 	bl	800046c <__aeabi_i2d>
 8000fcc:	a38a      	add	r3, pc, #552	; (adr r3, 80011f8 <ReadAccelerometer+0x2c0>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fab5 	bl	8000540 <__aeabi_dmul>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4621      	mov	r1, r4
 8000fde:	f7ff fd5f 	bl	8000aa0 <__aeabi_d2f>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b8a      	ldr	r3, [pc, #552]	; (8001210 <ReadAccelerometer+0x2d8>)
 8000fe6:	60da      	str	r2, [r3, #12]
	accelerometerReading.yG = rawY * 0.0039;
 8000fe8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa3d 	bl	800046c <__aeabi_i2d>
 8000ff2:	a381      	add	r3, pc, #516	; (adr r3, 80011f8 <ReadAccelerometer+0x2c0>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff faa2 	bl	8000540 <__aeabi_dmul>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	4618      	mov	r0, r3
 8001002:	4621      	mov	r1, r4
 8001004:	f7ff fd4c 	bl	8000aa0 <__aeabi_d2f>
 8001008:	4602      	mov	r2, r0
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <ReadAccelerometer+0x2d8>)
 800100c:	611a      	str	r2, [r3, #16]
	accelerometerReading.zG = rawZ * 0.0039;
 800100e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa2a 	bl	800046c <__aeabi_i2d>
 8001018:	a377      	add	r3, pc, #476	; (adr r3, 80011f8 <ReadAccelerometer+0x2c0>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fa8f 	bl	8000540 <__aeabi_dmul>
 8001022:	4603      	mov	r3, r0
 8001024:	460c      	mov	r4, r1
 8001026:	4618      	mov	r0, r3
 8001028:	4621      	mov	r1, r4
 800102a:	f7ff fd39 	bl	8000aa0 <__aeabi_d2f>
 800102e:	4602      	mov	r2, r0
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <ReadAccelerometer+0x2d8>)
 8001032:	615a      	str	r2, [r3, #20]

	float calibratedX = accelerometerReading.xG - accelerometerReading.xOffset;
 8001034:	4b76      	ldr	r3, [pc, #472]	; (8001210 <ReadAccelerometer+0x2d8>)
 8001036:	ed93 7a03 	vldr	s14, [r3, #12]
 800103a:	4b75      	ldr	r3, [pc, #468]	; (8001210 <ReadAccelerometer+0x2d8>)
 800103c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001044:	edc7 7a08 	vstr	s15, [r7, #32]
	float calibratedY = accelerometerReading.yG - accelerometerReading.yOffset;
 8001048:	4b71      	ldr	r3, [pc, #452]	; (8001210 <ReadAccelerometer+0x2d8>)
 800104a:	ed93 7a04 	vldr	s14, [r3, #16]
 800104e:	4b70      	ldr	r3, [pc, #448]	; (8001210 <ReadAccelerometer+0x2d8>)
 8001050:	edd3 7a07 	vldr	s15, [r3, #28]
 8001054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001058:	edc7 7a07 	vstr	s15, [r7, #28]
	float calibratedZ = accelerometerReading.zG - accelerometerReading.zOffset;
 800105c:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <ReadAccelerometer+0x2d8>)
 800105e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001062:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <ReadAccelerometer+0x2d8>)
 8001064:	edd3 7a08 	vldr	s15, [r3, #32]
 8001068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106c:	edc7 7a06 	vstr	s15, [r7, #24]

	/* calculate the squares */
	float xSquared = calibratedX * calibratedX;
 8001070:	ed97 7a08 	vldr	s14, [r7, #32]
 8001074:	edd7 7a08 	vldr	s15, [r7, #32]
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
	float ySquared = calibratedY * calibratedY;
 8001080:	ed97 7a07 	vldr	s14, [r7, #28]
 8001084:	edd7 7a07 	vldr	s15, [r7, #28]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	edc7 7a04 	vstr	s15, [r7, #16]
	float zSquared = calibratedZ * calibratedZ;
 8001090:	ed97 7a06 	vldr	s14, [r7, #24]
 8001094:	edd7 7a06 	vldr	s15, [r7, #24]
 8001098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109c:	edc7 7a03 	vstr	s15, [r7, #12]

	// Simulation change to degrees of X, Y. We calculation from vector of both with Z
	float xInDegrees = atan(calibratedY / sqrt(xSquared + zSquared)) * 180.0f / 3.141592f;
 80010a0:	69f8      	ldr	r0, [r7, #28]
 80010a2:	f7ff f9f5 	bl	8000490 <__aeabi_f2d>
 80010a6:	4604      	mov	r4, r0
 80010a8:	460d      	mov	r5, r1
 80010aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b6:	ee17 0a90 	vmov	r0, s15
 80010ba:	f7ff f9e9 	bl	8000490 <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	ec43 2b10 	vmov	d0, r2, r3
 80010c6:	f005 feb5 	bl	8006e34 <sqrt>
 80010ca:	ec53 2b10 	vmov	r2, r3, d0
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff fb5f 	bl	8000794 <__aeabi_ddiv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	460c      	mov	r4, r1
 80010da:	ec44 3b17 	vmov	d7, r3, r4
 80010de:	eeb0 0a47 	vmov.f32	s0, s14
 80010e2:	eef0 0a67 	vmov.f32	s1, s15
 80010e6:	f005 fcfb 	bl	8006ae0 <atan>
 80010ea:	ec51 0b10 	vmov	r0, r1, d0
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <ReadAccelerometer+0x2dc>)
 80010f4:	f7ff fa24 	bl	8000540 <__aeabi_dmul>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4618      	mov	r0, r3
 80010fe:	4621      	mov	r1, r4
 8001100:	a33f      	add	r3, pc, #252	; (adr r3, 8001200 <ReadAccelerometer+0x2c8>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fb45 	bl	8000794 <__aeabi_ddiv>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	4618      	mov	r0, r3
 8001110:	4621      	mov	r1, r4
 8001112:	f7ff fcc5 	bl	8000aa0 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	60bb      	str	r3, [r7, #8]
	float yInDegrees = atan(calibratedX / sqrt(ySquared + zSquared)) * 180.0f / 3.141592f;
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f7ff f9b8 	bl	8000490 <__aeabi_f2d>
 8001120:	4604      	mov	r4, r0
 8001122:	460d      	mov	r5, r1
 8001124:	ed97 7a04 	vldr	s14, [r7, #16]
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	ee17 0a90 	vmov	r0, s15
 8001134:	f7ff f9ac 	bl	8000490 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b10 	vmov	d0, r2, r3
 8001140:	f005 fe78 	bl	8006e34 <sqrt>
 8001144:	ec53 2b10 	vmov	r2, r3, d0
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff fb22 	bl	8000794 <__aeabi_ddiv>
 8001150:	4603      	mov	r3, r0
 8001152:	460c      	mov	r4, r1
 8001154:	ec44 3b17 	vmov	d7, r3, r4
 8001158:	eeb0 0a47 	vmov.f32	s0, s14
 800115c:	eef0 0a67 	vmov.f32	s1, s15
 8001160:	f005 fcbe 	bl	8006ae0 <atan>
 8001164:	ec51 0b10 	vmov	r0, r1, d0
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <ReadAccelerometer+0x2dc>)
 800116e:	f7ff f9e7 	bl	8000540 <__aeabi_dmul>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4618      	mov	r0, r3
 8001178:	4621      	mov	r1, r4
 800117a:	a321      	add	r3, pc, #132	; (adr r3, 8001200 <ReadAccelerometer+0x2c8>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fb08 	bl	8000794 <__aeabi_ddiv>
 8001184:	4603      	mov	r3, r0
 8001186:	460c      	mov	r4, r1
 8001188:	4618      	mov	r0, r3
 800118a:	4621      	mov	r1, r4
 800118c:	f7ff fc88 	bl	8000aa0 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	607b      	str	r3, [r7, #4]
	float zInDegress = 0.0f; // for now.
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	603b      	str	r3, [r7, #0]

	if (!isnan(xInDegrees) && !isnan(yInDegrees) && !isnan(zInDegress)) {
 800119a:	ed97 7a02 	vldr	s14, [r7, #8]
 800119e:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	d61f      	bvs.n	80011ec <ReadAccelerometer+0x2b4>
 80011ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d616      	bvs.n	80011ec <ReadAccelerometer+0x2b4>
 80011be:	ed97 7a00 	vldr	s14, [r7]
 80011c2:	edd7 7a00 	vldr	s15, [r7]
 80011c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d60d      	bvs.n	80011ec <ReadAccelerometer+0x2b4>
		accelerometerReading.x = xInDegrees;
 80011d0:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <ReadAccelerometer+0x2d8>)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	6013      	str	r3, [r2, #0]
		accelerometerReading.y = yInDegrees;
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <ReadAccelerometer+0x2d8>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6053      	str	r3, [r2, #4]
		accelerometerReading.z = zInDegress;
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <ReadAccelerometer+0x2d8>)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6093      	str	r3, [r2, #8]
		accelerometerReading.readings++;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <ReadAccelerometer+0x2d8>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <ReadAccelerometer+0x2d8>)
 80011ea:	6253      	str	r3, [r2, #36]	; 0x24
	}

	isReadingAccelerometer = 0;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <ReadAccelerometer+0x2d0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	8e8a71de 	.word	0x8e8a71de
 80011fc:	3f6ff2e4 	.word	0x3f6ff2e4
 8001200:	00000000 	.word	0x00000000
 8001204:	400921fb 	.word	0x400921fb
 8001208:	200000cc 	.word	0x200000cc
 800120c:	200000a0 	.word	0x200000a0
 8001210:	20000194 	.word	0x20000194
 8001214:	40668000 	.word	0x40668000

08001218 <InitialiseAngularPosition>:
* Description  : This function initialize Angular position.
* Arguments    : None
* Return Value : None
******************************************************************************/
/* are my angles consistent - radians, or degrees? */
void InitialiseAngularPosition() {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	/* initialise, assume the quad is level */
	angularPosition.x = 0.0;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <InitialiseAngularPosition+0x30>)
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	angularPosition.y = 0.0;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <InitialiseAngularPosition+0x30>)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
	angularPosition.z = 0.0;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <InitialiseAngularPosition+0x30>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	609a      	str	r2, [r3, #8]

	sensorToggle = true;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <InitialiseAngularPosition+0x34>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]

	InitialiseGyroscope();
 800123a:	f000 f8d7 	bl	80013ec <InitialiseGyroscope>
	InitialiseAccelerometer();
 800123e:	f7ff fe3d 	bl	8000ebc <InitialiseAccelerometer>
	//InitialiseMagnetometer();
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000164 	.word	0x20000164
 800124c:	200001bc 	.word	0x200001bc

08001250 <ReadAngularPosition>:
* Function Name: ReadAngularPosition
* Description  : This function read value Angular position.
* Arguments    : None
* Return Value : None
******************************************************************************/
void ReadAngularPosition() {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	if (sensorToggle) {
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <ReadAngularPosition+0x5c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <ReadAngularPosition+0x26>
		/* this gryo is dodgy. Sometimes, the last bit in the read sequence never comes back properly, causing errors on the I2C bus. Silly gyro. */
		ReadGyroscope();
 800125c:	f000 f906 	bl	800146c <ReadGyroscope>

		if (!isReadingGyroscope) {
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <ReadAngularPosition+0x60>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f083 0301 	eor.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00f      	beq.n	800128e <ReadAngularPosition+0x3e>
			sensorToggle = 0;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <ReadAngularPosition+0x5c>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e00b      	b.n	800128e <ReadAngularPosition+0x3e>
		}
	} else {
		ReadAccelerometer();
 8001276:	f7ff fe5f 	bl	8000f38 <ReadAccelerometer>

		if (!isReadingAccelerometer) {
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <ReadAngularPosition+0x64>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	f083 0301 	eor.w	r3, r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <ReadAngularPosition+0x3e>
			sensorToggle = 1;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <ReadAngularPosition+0x5c>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
//  seems buggered. will introduce the gyro later.
//	angularPosition.x = HOW_MUCH_I_TRUST_THE_GYROSCOPE * (angularPosition.x + (gyroscopeReading.x * GYROSCOPE_SAMPLE_RATE)) + HOW_MUCH_I_TRUST_THE_ACCELEROMETER * accelerometerReading.x;
//	angularPosition.y = HOW_MUCH_I_TRUST_THE_GYROSCOPE * (angularPosition.y + (gyroscopeReading.y * GYROSCOPE_SAMPLE_RATE)) + HOW_MUCH_I_TRUST_THE_ACCELEROMETER * accelerometerReading.y;
//	angularPosition.z = 0;

	angularPosition.x = accelerometerReading.x;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <ReadAngularPosition+0x68>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <ReadAngularPosition+0x6c>)
 8001294:	6013      	str	r3, [r2, #0]
	angularPosition.y = accelerometerReading.y;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <ReadAngularPosition+0x68>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <ReadAngularPosition+0x6c>)
 800129c:	6053      	str	r3, [r2, #4]
	angularPosition.z = accelerometerReading.z;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <ReadAngularPosition+0x68>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <ReadAngularPosition+0x6c>)
 80012a4:	6093      	str	r3, [r2, #8]
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001bc 	.word	0x200001bc
 80012b0:	20000148 	.word	0x20000148
 80012b4:	200000cc 	.word	0x200000cc
 80012b8:	20000194 	.word	0x20000194
 80012bc:	20000164 	.word	0x20000164

080012c0 <EnableTiming>:
* Description  : This function to enable time of watchdog timer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void EnableTiming(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
    static int enabled = 0;	// Variable to store previous data status of timer
	// Check if not enable will enable to start timer
    if (!enabled)
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <EnableTiming+0x44>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d116      	bne.n	80012fa <EnableTiming+0x3a>
    {
        *SCB_DEMCR = *SCB_DEMCR | 0x01000000;	// Stop check error
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <EnableTiming+0x48>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <EnableTiming+0x48>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012da:	601a      	str	r2, [r3, #0]
        *DWT_CYCCNT = 0; 						// Reset the counter
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <EnableTiming+0x4c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
        *DWT_CONTROL = *DWT_CONTROL | 1 ; 		// enable the counter
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <EnableTiming+0x50>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <EnableTiming+0x50>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

        enabled = 1;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <EnableTiming+0x44>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
    }
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	2000009c 	.word	0x2000009c
 8001308:	20000008 	.word	0x20000008
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004

08001314 <TimingDelay>:
* Description  : This function to delay with cycle of chip.
* Arguments    : Cycle want delay
* Return Value : None
******************************************************************************/
void TimingDelay(unsigned int tick)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    unsigned int start, current;

    start = *DWT_CYCCNT;				// Read first data of count timer
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <TimingDelay+0x30>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]

    do
    {
        current = *DWT_CYCCNT;			//Read current value
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <TimingDelay+0x30>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60bb      	str	r3, [r7, #8]
    } while((current - start) < tick);	//Loop to true
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f5      	bhi.n	8001324 <TimingDelay+0x10>
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	20000000 	.word	0x20000000

08001348 <WaitAFewMillis>:
* Function Name: EnableTiming
* Description  : This function delay miliseconds.
* Arguments    : None
* Return Value : None
******************************************************************************/
void WaitAFewMillis(int16_t millis) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	TimingDelay((168000000 / 1000) * millis);
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <WaitAFewMillis+0x24>)
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffd9 	bl	8001314 <TimingDelay>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	00029040 	.word	0x00029040

08001370 <i2c_write_gyroscope>:
*   0x69: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_write_gyroscope(uint8_t reg, uint8_t value)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2]={0};
 8001380:	2300      	movs	r3, #0
 8001382:	81bb      	strh	r3, [r7, #12]
	data[0] = reg;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, Gyrospope_Address<<1, data, 2, 10);
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	230a      	movs	r3, #10
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	21d2      	movs	r1, #210	; 0xd2
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <i2c_write_gyroscope+0x38>)
 800139a:	f002 f89b 	bl	80034d4 <HAL_I2C_Master_Transmit>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000e0 	.word	0x200000e0

080013ac <i2c_read_gyroscope>:
*   0x69: value.
* Arguments    : Device address, Register of device, Value.
* Return Value : None
******************************************************************************/
void i2c_read_gyroscope(uint8_t reg, uint8_t numberofbytes)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	4603      	mov	r3, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, Gyrospope_Address<<1, reg, I2C_MEMADD_SIZE_8BIT, \
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	b299      	uxth	r1, r3
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2264      	movs	r2, #100	; 0x64
 80013c6:	9202      	str	r2, [sp, #8]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <i2c_read_gyroscope+0x38>)
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	460a      	mov	r2, r1
 80013d2:	21d2      	movs	r1, #210	; 0xd2
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <i2c_read_gyroscope+0x3c>)
 80013d6:	f002 f97b 	bl	80036d0 <HAL_I2C_Mem_Read>
	  data_receive, numberofbytes, 100);
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000a0 	.word	0x200000a0
 80013e8:	200000e0 	.word	0x200000e0

080013ec <InitialiseGyroscope>:
* Description  : This function initialize Accelerometer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialiseGyroscope()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	/* Reset the Gyro.
	 * Note that 0x69 is the address of the Gyro on the bus. Pin 9 is logic high
	 * Write 0x80 to address 0x3E to reset gyro
	 */
	i2c_write_gyroscope(0x3E, 0x80);
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	203e      	movs	r0, #62	; 0x3e
 80013f4:	f7ff ffbc 	bl	8001370 <i2c_write_gyroscope>
	 * In theory 2000 degrees / second means the quad would be completely
	 * rotating (2000/360) = 5 times per second! Probably higher than required.
	 * digital low pass filter bandwidth is 5Hz, internal sample rate is 1kHz.
	 * Note: we could adjust the low pass filter in future to see the impact.
	 */
	i2c_write_gyroscope(0x16, 0x1E);
 80013f8:	211e      	movs	r1, #30
 80013fa:	2016      	movs	r0, #22
 80013fc:	f7ff ffb8 	bl	8001370 <i2c_write_gyroscope>
	/* Set the sample rate
	 * Sample rate = internal sample rate / (divider + 1)
	 * Setting divider to 4 to give a sample rate of 200Hz.
	 * The gyro values will update every 5ms.
	 */
	i2c_write_gyroscope(0x15, 0x04);
 8001400:	2104      	movs	r1, #4
 8001402:	2015      	movs	r0, #21
 8001404:	f7ff ffb4 	bl	8001370 <i2c_write_gyroscope>
	 * This should be more stable / accurate than an internal oscillator (which
	 * would be greatly affected by temperature)
	 * Probably not as good as an external oscillator though.
	 * Accuracy of internal gyro MEMS oscillators are +/- 2% over temperature.
	 */
	i2c_write_gyroscope(0x3E, 0x03);
 8001408:	2103      	movs	r1, #3
 800140a:	203e      	movs	r0, #62	; 0x3e
 800140c:	f7ff ffb0 	bl	8001370 <i2c_write_gyroscope>

	/* The gyro takes 50 milliseconds for zero settling */
	WaitAFewMillis(50);
 8001410:	2032      	movs	r0, #50	; 0x32
 8001412:	f7ff ff99 	bl	8001348 <WaitAFewMillis>

	/* And will take a further (or is this included?) 20ms for register read /
	 * write warm up */
	WaitAFewMillis(20);
 8001416:	2014      	movs	r0, #20
 8001418:	f7ff ff96 	bl	8001348 <WaitAFewMillis>

	/* initialise the gyroscope reading */
	gyroscopeReading.gyroscopeTemperature = 0.0f;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <InitialiseGyroscope+0x78>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
	gyroscopeReading.x = 0.0f;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <InitialiseGyroscope+0x78>)
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
	gyroscopeReading.y = 0.0f;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <InitialiseGyroscope+0x78>)
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
	gyroscopeReading.z = 0.0f;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <InitialiseGyroscope+0x78>)
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
	gyroscopeReading.xOffset = 0.0f;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <InitialiseGyroscope+0x78>)
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
	gyroscopeReading.yOffset = 0.0f;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <InitialiseGyroscope+0x78>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
	gyroscopeReading.zOffset = 0.0f;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <InitialiseGyroscope+0x78>)
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
	gyroscopeReading.readings = 0;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <InitialiseGyroscope+0x78>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]

	isReadingGyroscope = 0;
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <InitialiseGyroscope+0x7c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000ac 	.word	0x200000ac
 8001468:	20000148 	.word	0x20000148

0800146c <ReadGyroscope>:
* Description  : This function read data and store to struct variable.
* Arguments    : None
* Return Value : None
******************************************************************************/
void ReadGyroscope()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
	// Check data exist or not by global variable bool isReadingGyroscope
	if (!isReadingGyroscope) {
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <ReadGyroscope+0x178>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <ReadGyroscope+0x24>
		// Read data from gyroscope
		i2c_read_gyroscope(0x1B, 8);
 8001480:	2108      	movs	r1, #8
 8001482:	201b      	movs	r0, #27
 8001484:	f7ff ff92 	bl	80013ac <i2c_read_gyroscope>
		isReadingGyroscope = 1;
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <ReadGyroscope+0x178>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
		return;
 800148e:	e0a6      	b.n	80015de <ReadGyroscope+0x172>
	}

	// done! convert the values to a reading
	uint8_t temperatureHigh = data_receive[0];
 8001490:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <ReadGyroscope+0x17c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	77fb      	strb	r3, [r7, #31]
	uint8_t temperatureLow = data_receive[1];
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <ReadGyroscope+0x17c>)
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	77bb      	strb	r3, [r7, #30]
	uint8_t xHigh = data_receive[2];
 800149c:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <ReadGyroscope+0x17c>)
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	777b      	strb	r3, [r7, #29]
	uint8_t xLow = data_receive[3];
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <ReadGyroscope+0x17c>)
 80014a4:	78db      	ldrb	r3, [r3, #3]
 80014a6:	773b      	strb	r3, [r7, #28]
	uint8_t yHigh = data_receive[4];
 80014a8:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <ReadGyroscope+0x17c>)
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	76fb      	strb	r3, [r7, #27]
	uint8_t yLow = data_receive[5];
 80014ae:	4b4e      	ldr	r3, [pc, #312]	; (80015e8 <ReadGyroscope+0x17c>)
 80014b0:	795b      	ldrb	r3, [r3, #5]
 80014b2:	76bb      	strb	r3, [r7, #26]
	uint8_t zHigh = data_receive[6];
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <ReadGyroscope+0x17c>)
 80014b6:	799b      	ldrb	r3, [r3, #6]
 80014b8:	767b      	strb	r3, [r7, #25]
	uint8_t zLow = data_receive[7];
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <ReadGyroscope+0x17c>)
 80014bc:	79db      	ldrb	r3, [r3, #7]
 80014be:	763b      	strb	r3, [r7, #24]

	/* Temperature offset: -13200 LSB
	 * Temperature sensitivity: 280 LSB / degrees celcius
	 */
	int16_t rawTemperature = \
	  (((int16_t) temperatureHigh << 8) | temperatureLow);
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	7fbb      	ldrb	r3, [r7, #30]
 80014c8:	b21b      	sxth	r3, r3
	int16_t rawTemperature = \
 80014ca:	4313      	orrs	r3, r2
 80014cc:	82fb      	strh	r3, [r7, #22]
	gyroscopeReading.gyroscopeTemperature = 35 + (rawTemperature + 13200) / 280;
 80014ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014d2:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 80014d6:	3310      	adds	r3, #16
 80014d8:	4a44      	ldr	r2, [pc, #272]	; (80015ec <ReadGyroscope+0x180>)
 80014da:	fb82 1203 	smull	r1, r2, r2, r3
 80014de:	441a      	add	r2, r3
 80014e0:	1212      	asrs	r2, r2, #8
 80014e2:	17db      	asrs	r3, r3, #31
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	3323      	adds	r3, #35	; 0x23
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <ReadGyroscope+0x184>)
 80014f2:	edc3 7a03 	vstr	s15, [r3, #12]

	int16_t rawX = (((int16_t) xHigh << 8) | xLow);
 80014f6:	7f7b      	ldrb	r3, [r7, #29]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7f3b      	ldrb	r3, [r7, #28]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	82bb      	strh	r3, [r7, #20]
	int16_t rawY = (((int16_t) yHigh << 8) | yLow);
 8001504:	7efb      	ldrb	r3, [r7, #27]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7ebb      	ldrb	r3, [r7, #26]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	827b      	strh	r3, [r7, #18]
	int16_t rawZ = (((int16_t) zHigh << 8) | zLow);
 8001512:	7e7b      	ldrb	r3, [r7, #25]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	7e3b      	ldrb	r3, [r7, #24]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	823b      	strh	r3, [r7, #16]

	/* gyro sensitivity: 14.375 LSB / (degrees / second) */
	float xDegreesPerSecond = \
	  ((float) rawX / 14.375f) - gyroscopeReading.xOffset;
 8001520:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	eddf 6a31 	vldr	s13, [pc, #196]	; 80015f4 <ReadGyroscope+0x188>
 8001530:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <ReadGyroscope+0x184>)
 8001536:	edd3 7a04 	vldr	s15, [r3, #16]
	float xDegreesPerSecond = \
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	edc7 7a03 	vstr	s15, [r7, #12]
	float yDegreesPerSecond = \
	  ((float) rawY / 14.375f) - gyroscopeReading.yOffset;
 8001542:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80015f4 <ReadGyroscope+0x188>
 8001552:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <ReadGyroscope+0x184>)
 8001558:	edd3 7a05 	vldr	s15, [r3, #20]
	float yDegreesPerSecond = \
 800155c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001560:	edc7 7a02 	vstr	s15, [r7, #8]
	float zDegreesPerSecond = \
	  ((float) rawZ / 14.375f) - gyroscopeReading.zOffset;
 8001564:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	eddf 6a20 	vldr	s13, [pc, #128]	; 80015f4 <ReadGyroscope+0x188>
 8001574:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <ReadGyroscope+0x184>)
 800157a:	edd3 7a06 	vldr	s15, [r3, #24]
	float zDegreesPerSecond = \
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	edc7 7a01 	vstr	s15, [r7, #4]

	if (!isnan(xDegreesPerSecond) && !isnan(yDegreesPerSecond) && \
 8001586:	ed97 7a03 	vldr	s14, [r7, #12]
 800158a:	edd7 7a03 	vldr	s15, [r7, #12]
 800158e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d61f      	bvs.n	80015d8 <ReadGyroscope+0x16c>
 8001598:	ed97 7a02 	vldr	s14, [r7, #8]
 800159c:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d616      	bvs.n	80015d8 <ReadGyroscope+0x16c>
 80015aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	d60d      	bvs.n	80015d8 <ReadGyroscope+0x16c>
		  !isnan(zDegreesPerSecond)) {
		gyroscopeReading.x = xDegreesPerSecond;
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <ReadGyroscope+0x184>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6013      	str	r3, [r2, #0]
		gyroscopeReading.y = yDegreesPerSecond;
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <ReadGyroscope+0x184>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	6053      	str	r3, [r2, #4]
		gyroscopeReading.z = zDegreesPerSecond;
 80015c8:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <ReadGyroscope+0x184>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6093      	str	r3, [r2, #8]
		gyroscopeReading.readings++;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <ReadGyroscope+0x184>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <ReadGyroscope+0x184>)
 80015d6:	61d3      	str	r3, [r2, #28]
	}

	isReadingGyroscope = 0;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <ReadGyroscope+0x178>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000148 	.word	0x20000148
 80015e8:	200000a0 	.word	0x200000a0
 80015ec:	ea0ea0eb 	.word	0xea0ea0eb
 80015f0:	200000ac 	.word	0x200000ac
 80015f4:	41660000 	.word	0x41660000

080015f8 <InitialisePWM>:
* Description  : This function initialize pwm.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialisePWM()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	/* set all of the pulse values to 0% */
	channel1Pulse = 1000;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <InitialisePWM+0x90>)
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <InitialisePWM+0x94>)
 8001600:	601a      	str	r2, [r3, #0]
	channel2Pulse = 1000;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <InitialisePWM+0x98>)
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <InitialisePWM+0x94>)
 8001606:	601a      	str	r2, [r3, #0]
	channel3Pulse = 1000;
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <InitialisePWM+0x9c>)
 800160a:	4a20      	ldr	r2, [pc, #128]	; (800168c <InitialisePWM+0x94>)
 800160c:	601a      	str	r2, [r3, #0]
	channel4Pulse = 1000;
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <InitialisePWM+0xa0>)
 8001610:	4a1e      	ldr	r2, [pc, #120]	; (800168c <InitialisePWM+0x94>)
 8001612:	601a      	str	r2, [r3, #0]
	// Initial for all channel of timer 3 using PWM
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001614:	2100      	movs	r1, #0
 8001616:	4821      	ldr	r0, [pc, #132]	; (800169c <InitialisePWM+0xa4>)
 8001618:	f003 fac6 	bl	8004ba8 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800161c:	2104      	movs	r1, #4
 800161e:	481f      	ldr	r0, [pc, #124]	; (800169c <InitialisePWM+0xa4>)
 8001620:	f003 fac2 	bl	8004ba8 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001624:	2108      	movs	r1, #8
 8001626:	481d      	ldr	r0, [pc, #116]	; (800169c <InitialisePWM+0xa4>)
 8001628:	f003 fabe 	bl	8004ba8 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800162c:	210c      	movs	r1, #12
 800162e:	481b      	ldr	r0, [pc, #108]	; (800169c <InitialisePWM+0xa4>)
 8001630:	f003 faba 	bl	8004ba8 <HAL_TIM_PWM_Stop>

    HAL_TIM_PWM_Init(&htim3);
 8001634:	4819      	ldr	r0, [pc, #100]	; (800169c <InitialisePWM+0xa4>)
 8001636:	f003 fa44 	bl	8004ac2 <HAL_TIM_PWM_Init>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800163a:	2100      	movs	r1, #0
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <InitialisePWM+0xa4>)
 800163e:	f003 fa75 	bl	8004b2c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001642:	2104      	movs	r1, #4
 8001644:	4815      	ldr	r0, [pc, #84]	; (800169c <InitialisePWM+0xa4>)
 8001646:	f003 fa71 	bl	8004b2c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800164a:	2108      	movs	r1, #8
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <InitialisePWM+0xa4>)
 800164e:	f003 fa6d 	bl	8004b2c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001652:	210c      	movs	r1, #12
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <InitialisePWM+0xa4>)
 8001656:	f003 fa69 	bl	8004b2c <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) 700);
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <InitialisePWM+0xa4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001662:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) 700);
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <InitialisePWM+0xa4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800166c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) 700);
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <InitialisePWM+0xa4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) 700);
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <InitialisePWM+0xa4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000178 	.word	0x20000178
 800168c:	447a0000 	.word	0x447a0000
 8001690:	20000190 	.word	0x20000190
 8001694:	200000dc 	.word	0x200000dc
 8001698:	20000174 	.word	0x20000174
 800169c:	200001c0 	.word	0x200001c0

080016a0 <SetTim3Channel1>:
* Function Name: SetTim3Channel1
* Description  : This function set pulse to channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel1(float pulse) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 80016aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ae:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80016f8 <SetTim3Channel1+0x58>
 80016b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	da00      	bge.n	80016be <SetTim3Channel1+0x1e>
		channel1Pulse = pulse;				// Update new data pulse of channel 1
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) pulse);		// Update value of capture/compare register 1
	}
}
 80016bc:	e015      	b.n	80016ea <SetTim3Channel1+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 80016be:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80016fc <SetTim3Channel1+0x5c>
 80016c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d900      	bls.n	80016d2 <SetTim3Channel1+0x32>
}
 80016d0:	e00b      	b.n	80016ea <SetTim3Channel1+0x4a>
		channel1Pulse = pulse;				// Update new data pulse of channel 1
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <SetTim3Channel1+0x60>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) pulse);		// Update value of capture/compare register 1
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <SetTim3Channel1+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e4:	ee17 2a90 	vmov	r2, s15
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	447a0000 	.word	0x447a0000
 80016fc:	44fa0000 	.word	0x44fa0000
 8001700:	20000178 	.word	0x20000178
 8001704:	200001c0 	.word	0x200001c0

08001708 <SetTim3Channel2>:
* Function Name: SetTim3Channel2
* Description  : This function set pulse to channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel2(float pulse) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8001712:	edd7 7a01 	vldr	s15, [r7, #4]
 8001716:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001760 <SetTim3Channel2+0x58>
 800171a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	da00      	bge.n	8001726 <SetTim3Channel2+0x1e>
		channel2Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) pulse);
	}
}
 8001724:	e015      	b.n	8001752 <SetTim3Channel2+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8001726:	edd7 7a01 	vldr	s15, [r7, #4]
 800172a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001764 <SetTim3Channel2+0x5c>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d900      	bls.n	800173a <SetTim3Channel2+0x32>
}
 8001738:	e00b      	b.n	8001752 <SetTim3Channel2+0x4a>
		channel2Pulse = pulse;
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <SetTim3Channel2+0x60>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) pulse);
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <SetTim3Channel2+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	edd7 7a01 	vldr	s15, [r7, #4]
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	ee17 2a90 	vmov	r2, s15
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	447a0000 	.word	0x447a0000
 8001764:	44fa0000 	.word	0x44fa0000
 8001768:	20000190 	.word	0x20000190
 800176c:	200001c0 	.word	0x200001c0

08001770 <SetTim3Channel3>:
* Function Name: SetTim3Channel3
* Description  : This function set pulse to channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel3(float pulse) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 800177a:	edd7 7a01 	vldr	s15, [r7, #4]
 800177e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017c8 <SetTim3Channel3+0x58>
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	da00      	bge.n	800178e <SetTim3Channel3+0x1e>
		channel3Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) pulse);
	}
}
 800178c:	e015      	b.n	80017ba <SetTim3Channel3+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001792:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017cc <SetTim3Channel3+0x5c>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d900      	bls.n	80017a2 <SetTim3Channel3+0x32>
}
 80017a0:	e00b      	b.n	80017ba <SetTim3Channel3+0x4a>
		channel3Pulse = pulse;
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <SetTim3Channel3+0x60>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) pulse);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <SetTim3Channel3+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b4:	ee17 2a90 	vmov	r2, s15
 80017b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	447a0000 	.word	0x447a0000
 80017cc:	44fa0000 	.word	0x44fa0000
 80017d0:	200000dc 	.word	0x200000dc
 80017d4:	200001c0 	.word	0x200001c0

080017d8 <SetTim3Channel4>:
* Function Name: SetTim3Channel4
* Description  : This function set pulse to channel 4.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel4(float pulse) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 80017e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001830 <SetTim3Channel4+0x58>
 80017ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	da00      	bge.n	80017f6 <SetTim3Channel4+0x1e>
		channel4Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) pulse);
	}
}
 80017f4:	e015      	b.n	8001822 <SetTim3Channel4+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001834 <SetTim3Channel4+0x5c>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d900      	bls.n	800180a <SetTim3Channel4+0x32>
}
 8001808:	e00b      	b.n	8001822 <SetTim3Channel4+0x4a>
		channel4Pulse = pulse;
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <SetTim3Channel4+0x60>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) pulse);
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <SetTim3Channel4+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	edd7 7a01 	vldr	s15, [r7, #4]
 8001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181c:	ee17 2a90 	vmov	r2, s15
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	447a0000 	.word	0x447a0000
 8001834:	44fa0000 	.word	0x44fa0000
 8001838:	20000174 	.word	0x20000174
 800183c:	200001c0 	.word	0x200001c0

08001840 <UpdateTim3Channel1>:
* Function Name: UpdateTim3Channel1
* Description  : This function update pulse of channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel1(float pulse) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel1(channel1Pulse + pulse);
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <UpdateTim3Channel1+0x28>)
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	edd7 7a01 	vldr	s15, [r7, #4]
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f7ff ff20 	bl	80016a0 <SetTim3Channel1>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000178 	.word	0x20000178

0800186c <UpdateTim3Channel2>:
* Function Name: UpdateTim3Channel2
* Description  : This function update pulse of channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel2(float pulse) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel2(channel2Pulse + pulse);
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <UpdateTim3Channel2+0x28>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f7ff ff3e 	bl	8001708 <SetTim3Channel2>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000190 	.word	0x20000190

08001898 <UpdateTim3Channel3>:
* Function Name: UpdateTim3Channel3
* Description  : This function update pulse of channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel3(float pulse) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel3(channel3Pulse + pulse);
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <UpdateTim3Channel3+0x28>)
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	f7ff ff5c 	bl	8001770 <SetTim3Channel3>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200000dc 	.word	0x200000dc

080018c4 <UpdateTim3Channel4>:
* Function Name: UpdateTim3Channel4
* Description  : This function update pulse of channel 4.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel4(float pulse) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel4(channel4Pulse + pulse);
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <UpdateTim3Channel4+0x28>)
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	f7ff ff7a 	bl	80017d8 <SetTim3Channel4>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000174 	.word	0x20000174

080018f0 <ReadTim3Channel1Pulse>:
* Function Name: ReadTim3Channel1Pulse
* Description  : This function read current value pulse channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel1Pulse() {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return channel1Pulse;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <ReadTim3Channel1Pulse+0x18>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	ee07 3a90 	vmov	s15, r3
}
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20000178 	.word	0x20000178

0800190c <ReadTim3Channel2Pulse>:
* Function Name: ReadTim3Channel2Pulse
* Description  : This function read current value pulse channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel2Pulse() {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	return channel2Pulse;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <ReadTim3Channel2Pulse+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	ee07 3a90 	vmov	s15, r3
}
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	20000190 	.word	0x20000190

08001928 <ReadTim3Channel3Pulse>:
* Function Name: ReadTim3Channel3Pulse
* Description  : This function read current value pulse channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel3Pulse() {
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	return channel3Pulse;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <ReadTim3Channel3Pulse+0x18>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ee07 3a90 	vmov	s15, r3
}
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	200000dc 	.word	0x200000dc

08001944 <ReadTim3Channel4Pulse>:
* Description  : This function read current value pulse channel 4.
* Arguments    : Pulse
* Return Value : None

******************************************************************************/
float ReadTim3Channel4Pulse() {
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	return channel4Pulse;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <ReadTim3Channel4Pulse+0x18>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000174 	.word	0x20000174

08001960 <InitialisePWMChannel>:
* Description  : This function to initialize pwm channel.
* Arguments    : GPIO, pin, pinsource, channel.
* Return Value : Structure DutyCycle.
******************************************************************************/
DutyCycle InitialisePWMChannel(uint8_t channel)
{
 8001960:	b490      	push	{r4, r7}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
    struct DutyCycle dutyCycle;

    if (channel == 1) {
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d106      	bne.n	8001980 <InitialisePWMChannel+0x20>
    	dutyCycle.set = &SetTim3Channel1;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <InitialisePWMChannel+0x74>)
 8001974:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel1;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <InitialisePWMChannel+0x78>)
 8001978:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel1Pulse;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <InitialisePWMChannel+0x7c>)
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e01c      	b.n	80019ba <InitialisePWMChannel+0x5a>
    } else if (channel == 2) {
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d106      	bne.n	8001994 <InitialisePWMChannel+0x34>
    	dutyCycle.set = &SetTim3Channel2;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <InitialisePWMChannel+0x80>)
 8001988:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel2;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <InitialisePWMChannel+0x84>)
 800198c:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel2Pulse;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <InitialisePWMChannel+0x88>)
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e012      	b.n	80019ba <InitialisePWMChannel+0x5a>
    } else if (channel == 3) {
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d106      	bne.n	80019a8 <InitialisePWMChannel+0x48>
    	dutyCycle.set = &SetTim3Channel3;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <InitialisePWMChannel+0x8c>)
 800199c:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel3;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <InitialisePWMChannel+0x90>)
 80019a0:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel3Pulse;
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <InitialisePWMChannel+0x94>)
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e008      	b.n	80019ba <InitialisePWMChannel+0x5a>
    } else if (channel == 4) {
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d105      	bne.n	80019ba <InitialisePWMChannel+0x5a>
    	dutyCycle.set = &SetTim3Channel4;
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <InitialisePWMChannel+0x98>)
 80019b0:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel4;
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <InitialisePWMChannel+0x9c>)
 80019b4:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel4Pulse;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <InitialisePWMChannel+0xa0>)
 80019b8:	617b      	str	r3, [r7, #20]
    }

    // note that this will be copied - probably better off using a reference.
    return dutyCycle;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	461c      	mov	r4, r3
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc90      	pop	{r4, r7}
 80019d2:	4770      	bx	lr
 80019d4:	080016a1 	.word	0x080016a1
 80019d8:	08001841 	.word	0x08001841
 80019dc:	080018f1 	.word	0x080018f1
 80019e0:	08001709 	.word	0x08001709
 80019e4:	0800186d 	.word	0x0800186d
 80019e8:	0800190d 	.word	0x0800190d
 80019ec:	08001771 	.word	0x08001771
 80019f0:	08001899 	.word	0x08001899
 80019f4:	08001929 	.word	0x08001929
 80019f8:	080017d9 	.word	0x080017d9
 80019fc:	080018c5 	.word	0x080018c5
 8001a00:	08001945 	.word	0x08001945

08001a04 <InitialiseRemoteControls>:
* Function Name: InitialiseRemoteControls
* Description  : This function initialize remote controls.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialiseRemoteControls() {
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	/* throttle: all together now! power (collective pitch?)
	* Channel 3 on the RC receiver
	*/
	//PB.06
	throttle = &pwmInputTimer4;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <InitialiseRemoteControls+0x98>)
 8001a0a:	4a25      	ldr	r2, [pc, #148]	; (8001aa0 <InitialiseRemoteControls+0x9c>)
 8001a0c:	601a      	str	r2, [r3, #0]
	throttle->hclckDivisor = 2.0f;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <InitialiseRemoteControls+0x98>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	721a      	strb	r2, [r3, #8]
	throttle->dutyCycle = 0.0;
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <InitialiseRemoteControls+0x98>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
	throttle->frequency = 0.0;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <InitialiseRemoteControls+0x98>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]

	/* rudder: spin to the left or right on a flat plane
	* Channel 4 on the RC receiver
	*/
	//PA.00
	remotePidProportional = &pwmInputTimer5;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <InitialiseRemoteControls+0xa0>)
 8001a2c:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <InitialiseRemoteControls+0xa4>)
 8001a2e:	601a      	str	r2, [r3, #0]
	remotePidProportional->hclckDivisor = 2.0f;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <InitialiseRemoteControls+0xa0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2202      	movs	r2, #2
 8001a36:	721a      	strb	r2, [r3, #8]
	remotePidProportional->dutyCycle = 0.0;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <InitialiseRemoteControls+0xa0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
	remotePidProportional->frequency = 0.0;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <InitialiseRemoteControls+0xa0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]

	/* Aileron: fly sideways left or right
	* Channel 1 on the RC receiver
	*/
	//PE.05
	remotePidIntegral = &pwmInputTimer9;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <InitialiseRemoteControls+0xa8>)
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <InitialiseRemoteControls+0xac>)
 8001a50:	601a      	str	r2, [r3, #0]
	remotePidIntegral->hclckDivisor = 2.0f;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <InitialiseRemoteControls+0xa8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	721a      	strb	r2, [r3, #8]
	remotePidIntegral->dutyCycle = 0.0;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <InitialiseRemoteControls+0xa8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
	remotePidIntegral->frequency = 0.0;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <InitialiseRemoteControls+0xa8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]

	/* elevator: fly forwards or backwards
	* Channel 2 on the RC receiver
	*/
	//PB.14
	resetAngularPosition = &pwmInputTimer12;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <InitialiseRemoteControls+0xb0>)
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <InitialiseRemoteControls+0xb4>)
 8001a72:	601a      	str	r2, [r3, #0]
	resetAngularPosition->hclckDivisor = 2.0f;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <InitialiseRemoteControls+0xb0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	721a      	strb	r2, [r3, #8]
	resetAngularPosition->dutyCycle = 0.0;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <InitialiseRemoteControls+0xb0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	resetAngularPosition->frequency = 0.0;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <InitialiseRemoteControls+0xb0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000014c 	.word	0x2000014c
 8001aa0:	200000d0 	.word	0x200000d0
 8001aa4:	20000170 	.word	0x20000170
 8001aa8:	20000154 	.word	0x20000154
 8001aac:	20000144 	.word	0x20000144
 8001ab0:	20000138 	.word	0x20000138
 8001ab4:	20000150 	.word	0x20000150
 8001ab8:	20000180 	.word	0x20000180

08001abc <HAL_TIM_IC_CaptureCallback>:
void InitialiseAngularPosition();
void ReadAngularPosition();
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	uint32_t IC1Value = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
	uint32_t IC2Value = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
	float updatedDutyCycle = 0;
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
	float updatedFrequency = 0;
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7f1b      	ldrb	r3, [r3, #28]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f040 80e8 	bne.w	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
	{
		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f003 fcb9 	bl	800545c <HAL_TIM_ReadCapturedValue>
 8001aea:	6138      	str	r0, [r7, #16]
		if(IC1Value!=0)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80df 	beq.w	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
		{
			IC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001af4:	2104      	movs	r1, #4
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f003 fcb0 	bl	800545c <HAL_TIM_ReadCapturedValue>
 8001afc:	60f8      	str	r0, [r7, #12]
			updatedDutyCycle = ((IC2Value*100.0f)/IC1Value);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b08:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001cb8 <HAL_TIM_IC_CaptureCallback+0x1fc>
 8001b0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1e:	edc7 7a02 	vstr	s15, [r7, #8]
			if (htim->Instance == htim4.Instance){
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x200>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d114      	bne.n	8001b58 <HAL_TIM_IC_CaptureCallback+0x9c>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer4.hclckDivisor)) \
 8001b2e:	f002 ff69 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001b36:	7a1b      	ldrb	r3, [r3, #8]
 8001b38:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b56:	e04f      	b.n	8001bf8 <HAL_TIM_IC_CaptureCallback+0x13c>
			}
			else if (htim->Instance == htim5.Instance){
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d114      	bne.n	8001b8e <HAL_TIM_IC_CaptureCallback+0xd2>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer5.hclckDivisor)) \
 8001b64:	f002 ff4e 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001b6c:	7a1b      	ldrb	r3, [r3, #8]
 8001b6e:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b88:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b8c:	e034      	b.n	8001bf8 <HAL_TIM_IC_CaptureCallback+0x13c>
			}
			else if (htim->Instance == htim9.Instance){
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d114      	bne.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x108>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer9.hclckDivisor)) \
 8001b9a:	f002 ff33 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001ba2:	7a1b      	ldrb	r3, [r3, #8]
 8001ba4:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbe:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bc2:	e019      	b.n	8001bf8 <HAL_TIM_IC_CaptureCallback+0x13c>
			}
			else if (htim->Instance == htim12.Instance){
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d113      	bne.n	8001bf8 <HAL_TIM_IC_CaptureCallback+0x13c>
				updatedFrequency = \
				  ((HAL_RCC_GetHCLKFreq() / (pwmInputTimer12.hclckDivisor)) \
 8001bd0:	f002 ff18 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001bd8:	7a1b      	ldrb	r3, [r3, #8]
 8001bda:	fbb2 f2f3 	udiv	r2, r2, r3
				  /(IC1Value*1000));
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
				updatedFrequency = \
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf4:	edc7 7a05 	vstr	s15, [r7, #20]
			}
			/* eliminate noise that is more than twice the previous duty cycle */
			if (isnan(updatedDutyCycle)
 8001bf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c00:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	d652      	bvs.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| isnan(updatedFrequency)
 8001c0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c12:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d649      	bvs.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| updatedDutyCycle <= 0.0
 8001c1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d942      	bls.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| updatedFrequency <= 0.0
 8001c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	d93b      	bls.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x1f4>
				|| IC1Value == IC2Value){
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d037      	beq.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x1f4>
				return;
			}
			if (htim->Instance == htim4.Instance){
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x200>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_TIM_IC_CaptureCallback+0x19e>
				pwmInputTimer4.dutyCycle = updatedDutyCycle;
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	6013      	str	r3, [r2, #0]
				pwmInputTimer4.frequency = updatedFrequency;
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	6053      	str	r3, [r2, #4]
 8001c58:	e02b      	b.n	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
			}
			else if (htim->Instance == htim5.Instance){
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d106      	bne.n	8001c74 <HAL_TIM_IC_CaptureCallback+0x1b8>
				pwmInputTimer5.dutyCycle = updatedDutyCycle;
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	6013      	str	r3, [r2, #0]
				pwmInputTimer5.frequency = updatedFrequency;
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	6053      	str	r3, [r2, #4]
 8001c72:	e01e      	b.n	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
			}
			else if (htim->Instance == htim9.Instance){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x210>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10a      	bne.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x1da>
				pwmInputTimer9.dutyCycle = updatedDutyCycle;
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	6013      	str	r3, [r2, #0]
				pwmInputTimer9.frequency = updatedFrequency*2;
 8001c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001c90:	edc3 7a01 	vstr	s15, [r3, #4]
 8001c94:	e00d      	b.n	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
			}
			else if (htim->Instance == htim12.Instance){
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
				pwmInputTimer12.dutyCycle = updatedDutyCycle;
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6013      	str	r3, [r2, #0]
				pwmInputTimer12.frequency = updatedFrequency;
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	6053      	str	r3, [r2, #4]
 8001cae:	e000      	b.n	8001cb2 <HAL_TIM_IC_CaptureCallback+0x1f6>
				return;
 8001cb0:	bf00      	nop
		else
		{
			/* Do nothing */
		}
	}
}
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	42c80000 	.word	0x42c80000
 8001cbc:	20000200 	.word	0x20000200
 8001cc0:	200000d0 	.word	0x200000d0
 8001cc4:	20000240 	.word	0x20000240
 8001cc8:	20000154 	.word	0x20000154
 8001ccc:	20000280 	.word	0x20000280
 8001cd0:	20000138 	.word	0x20000138
 8001cd4:	20000340 	.word	0x20000340
 8001cd8:	20000180 	.word	0x20000180

08001cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce2:	f000 ff87 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce6:	f000 f87f 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cea:	f000 fc13 	bl	8002514 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cee:	f000 f8e5 	bl	8001ebc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001cf2:	f000 f911 	bl	8001f18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cf6:	f000 f95b 	bl	8001fb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cfa:	f000 f9f1 	bl	80020e0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cfe:	f000 fa75 	bl	80021ec <MX_TIM5_Init>
  MX_TIM9_Init();
 8001d02:	f000 faf9 	bl	80022f8 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001d06:	f000 fb69 	bl	80023dc <MX_TIM12_Init>
  MX_UART4_Init();
 8001d0a:	f000 fbd9 	bl	80024c0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	482e      	ldr	r0, [pc, #184]	; (8001dcc <main+0xf0>)
 8001d12:	f002 ffd7 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001d16:	2100      	movs	r1, #0
 8001d18:	482d      	ldr	r0, [pc, #180]	; (8001dd0 <main+0xf4>)
 8001d1a:	f002 ffd3 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	482c      	ldr	r0, [pc, #176]	; (8001dd4 <main+0xf8>)
 8001d22:	f002 ffcf 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8001d26:	2100      	movs	r1, #0
 8001d28:	482b      	ldr	r0, [pc, #172]	; (8001dd8 <main+0xfc>)
 8001d2a:	f002 ffcb 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001d2e:	2104      	movs	r1, #4
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <main+0xf0>)
 8001d32:	f002 ffc7 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8001d36:	2104      	movs	r1, #4
 8001d38:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <main+0xf4>)
 8001d3a:	f002 ffc3 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2);
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4824      	ldr	r0, [pc, #144]	; (8001dd4 <main+0xf8>)
 8001d42:	f002 ffbf 	bl	8004cc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_2);
 8001d46:	2104      	movs	r1, #4
 8001d48:	4823      	ldr	r0, [pc, #140]	; (8001dd8 <main+0xfc>)
 8001d4a:	f002 ffbb 	bl	8004cc4 <HAL_TIM_IC_Start_IT>

  DutyCycle aProp = InitialisePWMChannel(1);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fe03 	bl	8001960 <InitialisePWMChannel>
  DutyCycle bProp = InitialisePWMChannel(2);
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdfd 	bl	8001960 <InitialisePWMChannel>
  DutyCycle cProp = InitialisePWMChannel(3);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fdf7 	bl	8001960 <InitialisePWMChannel>
  DutyCycle dProp = InitialisePWMChannel(4);
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	2104      	movs	r1, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fdf1 	bl	8001960 <InitialisePWMChannel>
  /* USER CODE END 2 */
  InitialisePWM();
 8001d7e:	f7ff fc3b 	bl	80015f8 <InitialisePWM>
  // Enable timing
  EnableTiming();
 8001d82:	f7ff fa9d 	bl	80012c0 <EnableTiming>
  // Initialize thrust
  InitialiseRemoteControls();
 8001d86:	f7ff fe3d 	bl	8001a04 <InitialiseRemoteControls>
  thrust = 0;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <main+0x100>)
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

  // Initialize InitialiseAngularPosition
  InitialiseAngularPosition();
 8001d92:	f7ff fa41 	bl	8001218 <InitialiseAngularPosition>

  uint8_t data_recevie[3] = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2100      	movs	r1, #0
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	460a      	mov	r2, r1
 8001da0:	709a      	strb	r2, [r3, #2]
//	  WaitAFewMillis(3000);
//	  thrust = ReadRemoteThrottle();
//	  rudder = ReadRemotePidProportional();
//	  aileron = ReadRemotePidIntegral();
//	  elevator = ReadResetAngularPosition();
	  ReadAngularPosition();
 8001da2:	f7ff fa55 	bl	8001250 <ReadAngularPosition>
	  HAL_UART_Receive(&huart4, data_recevie, sizeof(data_recevie), 10);
 8001da6:	1d39      	adds	r1, r7, #4
 8001da8:	230a      	movs	r3, #10
 8001daa:	2203      	movs	r2, #3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <main+0x104>)
 8001dae:	f004 f9f7 	bl	80061a0 <HAL_UART_Receive>
	  if(data_recevie[0]=='O' && data_recevie[1]=='N')
 8001db2:	793b      	ldrb	r3, [r7, #4]
 8001db4:	2b4f      	cmp	r3, #79	; 0x4f
 8001db6:	d1f4      	bne.n	8001da2 <main+0xc6>
 8001db8:	797b      	ldrb	r3, [r7, #5]
 8001dba:	2b4e      	cmp	r3, #78	; 0x4e
 8001dbc:	d1f1      	bne.n	8001da2 <main+0xc6>
	  {
		  HAL_UART_Transmit(&huart4, (uint8_t *)"Hello\r\n", sizeof("Hello\r\n"), 10);
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <main+0x108>)
 8001dc4:	4806      	ldr	r0, [pc, #24]	; (8001de0 <main+0x104>)
 8001dc6:	f004 f952 	bl	800606e <HAL_UART_Transmit>
	  ReadAngularPosition();
 8001dca:	e7ea      	b.n	8001da2 <main+0xc6>
 8001dcc:	20000200 	.word	0x20000200
 8001dd0:	20000240 	.word	0x20000240
 8001dd4:	20000280 	.word	0x20000280
 8001dd8:	20000340 	.word	0x20000340
 8001ddc:	2000017c 	.word	0x2000017c
 8001de0:	200002c0 	.word	0x200002c0
 8001de4:	08007068 	.word	0x08007068

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b094      	sub	sp, #80	; 0x50
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fe68 	bl	8006acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e44:	2301      	movs	r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e5c:	23a8      	movs	r3, #168	; 0xa8
 8001e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e64:	2304      	movs	r3, #4
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 f99b 	bl	80041a8 <HAL_RCC_OscConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e78:	f000 fbc8 	bl	800260c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2105      	movs	r1, #5
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fbf4 	bl	8004688 <HAL_RCC_ClockConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ea6:	f000 fbb1 	bl	800260c <Error_Handler>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3750      	adds	r7, #80	; 0x50
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000

08001ebc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <MX_I2C1_Init+0x54>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <MX_I2C1_Init+0x58>)
 8001eca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ede:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_I2C1_Init+0x50>)
 8001efa:	f001 f9b3 	bl	8003264 <HAL_I2C_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f04:	f000 fb82 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200000e0 	.word	0x200000e0
 8001f10:	40005400 	.word	0x40005400
 8001f14:	00061a80 	.word	0x00061a80

08001f18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f3e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f4c:	2209      	movs	r2, #9
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5c:	4813      	ldr	r0, [pc, #76]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f5e:	f002 fd85 	bl	8004a6c <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f68:	f000 fb50 	bl	800260c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f7a:	f003 f975 	bl	8005268 <HAL_TIM_ConfigClockSource>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f84:	f000 fb42 	bl	800260c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f90:	463b      	mov	r3, r7
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f96:	f003 ff8d 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fa0:	f000 fb34 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000300 	.word	0x20000300

08001fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	; 0x38
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <MX_TIM3_Init+0x128>)
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <MX_TIM3_Init+0x12c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <MX_TIM3_Init+0x128>)
 8001fe8:	2253      	movs	r2, #83	; 0x53
 8001fea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <MX_TIM3_Init+0x128>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <MX_TIM3_Init+0x128>)
 8001ff4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ff8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <MX_TIM3_Init+0x128>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <MX_TIM3_Init+0x128>)
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002006:	4834      	ldr	r0, [pc, #208]	; (80020d8 <MX_TIM3_Init+0x128>)
 8002008:	f002 fd30 	bl	8004a6c <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002012:	f000 fafb 	bl	800260c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800201c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002020:	4619      	mov	r1, r3
 8002022:	482d      	ldr	r0, [pc, #180]	; (80020d8 <MX_TIM3_Init+0x128>)
 8002024:	f003 f920 	bl	8005268 <HAL_TIM_ConfigClockSource>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800202e:	f000 faed 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002032:	4829      	ldr	r0, [pc, #164]	; (80020d8 <MX_TIM3_Init+0x128>)
 8002034:	f002 fd45 	bl	8004ac2 <HAL_TIM_PWM_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800203e:	f000 fae5 	bl	800260c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800204a:	f107 0320 	add.w	r3, r7, #32
 800204e:	4619      	mov	r1, r3
 8002050:	4821      	ldr	r0, [pc, #132]	; (80020d8 <MX_TIM3_Init+0x128>)
 8002052:	f003 ff2f 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800205c:	f000 fad6 	bl	800260c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002060:	2360      	movs	r3, #96	; 0x60
 8002062:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	4817      	ldr	r0, [pc, #92]	; (80020d8 <MX_TIM3_Init+0x128>)
 800207a:	f003 f82f 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002084:	f000 fac2 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2204      	movs	r2, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4812      	ldr	r0, [pc, #72]	; (80020d8 <MX_TIM3_Init+0x128>)
 8002090:	f003 f824 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800209a:	f000 fab7 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2208      	movs	r2, #8
 80020a2:	4619      	mov	r1, r3
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <MX_TIM3_Init+0x128>)
 80020a6:	f003 f819 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80020b0:	f000 faac 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	220c      	movs	r2, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	; (80020d8 <MX_TIM3_Init+0x128>)
 80020bc:	f003 f80e 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80020c6:	f000 faa1 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <MX_TIM3_Init+0x128>)
 80020cc:	f000 fc50 	bl	8002970 <HAL_TIM_MspPostInit>

}
 80020d0:	bf00      	nop
 80020d2:	3738      	adds	r7, #56	; 0x38
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200001c0 	.word	0x200001c0
 80020dc:	40000400 	.word	0x40000400

080020e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800210c:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <MX_TIM4_Init+0x104>)
 800210e:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <MX_TIM4_Init+0x108>)
 8002110:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <MX_TIM4_Init+0x104>)
 8002114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <MX_TIM4_Init+0x104>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <MX_TIM4_Init+0x104>)
 8002122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002126:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <MX_TIM4_Init+0x104>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <MX_TIM4_Init+0x104>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002134:	482b      	ldr	r0, [pc, #172]	; (80021e4 <MX_TIM4_Init+0x104>)
 8002136:	f002 fc99 	bl	8004a6c <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002140:	f000 fa64 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002144:	4827      	ldr	r0, [pc, #156]	; (80021e4 <MX_TIM4_Init+0x104>)
 8002146:	f002 fd87 	bl	8004c58 <HAL_TIM_IC_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002150:	f000 fa5c 	bl	800260c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002154:	2304      	movs	r3, #4
 8002156:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002158:	2350      	movs	r3, #80	; 0x50
 800215a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	481e      	ldr	r0, [pc, #120]	; (80021e4 <MX_TIM4_Init+0x104>)
 800216c:	f003 f933 	bl	80053d6 <HAL_TIM_SlaveConfigSynchro>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002176:	f000 fa49 	bl	800260c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4816      	ldr	r0, [pc, #88]	; (80021e4 <MX_TIM4_Init+0x104>)
 800218a:	f003 fe93 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8002194:	f000 fa3a 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002198:	2300      	movs	r3, #0
 800219a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800219c:	2301      	movs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <MX_TIM4_Init+0x104>)
 80021b0:	f002 fef8 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80021ba:	f000 fa27 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021be:	2302      	movs	r3, #2
 80021c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80021c2:	2302      	movs	r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2204      	movs	r2, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_TIM4_Init+0x104>)
 80021ce:	f002 fee9 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80021d8:	f000 fa18 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3730      	adds	r7, #48	; 0x30
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000200 	.word	0x20000200
 80021e8:	40000800 	.word	0x40000800

080021ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <MX_TIM5_Init+0x104>)
 800221a:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <MX_TIM5_Init+0x108>)
 800221c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002224:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <MX_TIM5_Init+0x104>)
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <MX_TIM5_Init+0x104>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002240:	482b      	ldr	r0, [pc, #172]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002242:	f002 fc13 	bl	8004a6c <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800224c:	f000 f9de 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002250:	4827      	ldr	r0, [pc, #156]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002252:	f002 fd01 	bl	8004c58 <HAL_TIM_IC_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800225c:	f000 f9d6 	bl	800260c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002260:	2304      	movs	r3, #4
 8002262:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002264:	2350      	movs	r3, #80	; 0x50
 8002266:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	481e      	ldr	r0, [pc, #120]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002278:	f003 f8ad 	bl	80053d6 <HAL_TIM_SlaveConfigSynchro>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002282:	f000 f9c3 	bl	800260c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	4816      	ldr	r0, [pc, #88]	; (80022f0 <MX_TIM5_Init+0x104>)
 8002296:	f003 fe0d 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 80022a0:	f000 f9b4 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022a8:	2301      	movs	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <MX_TIM5_Init+0x104>)
 80022bc:	f002 fe72 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80022c6:	f000 f9a1 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022ca:	2302      	movs	r3, #2
 80022cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022ce:	2302      	movs	r3, #2
 80022d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2204      	movs	r2, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_TIM5_Init+0x104>)
 80022da:	f002 fe63 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM5_Init+0xfc>
  {
    Error_Handler();
 80022e4:	f000 f992 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000240 	.word	0x20000240
 80022f4:	40000c00 	.word	0x40000c00

080022f8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <MX_TIM9_Init+0xdc>)
 800231c:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <MX_TIM9_Init+0xe0>)
 800231e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 999;
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <MX_TIM9_Init+0xdc>)
 8002322:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002326:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <MX_TIM9_Init+0xdc>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xffff;
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <MX_TIM9_Init+0xdc>)
 8002330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002334:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <MX_TIM9_Init+0xdc>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <MX_TIM9_Init+0xdc>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002342:	4824      	ldr	r0, [pc, #144]	; (80023d4 <MX_TIM9_Init+0xdc>)
 8002344:	f002 fb92 	bl	8004a6c <HAL_TIM_Base_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 800234e:	f000 f95d 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002352:	4820      	ldr	r0, [pc, #128]	; (80023d4 <MX_TIM9_Init+0xdc>)
 8002354:	f002 fc80 	bl	8004c58 <HAL_TIM_IC_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM9_Init+0x6a>
  {
    Error_Handler();
 800235e:	f000 f955 	bl	800260c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002362:	2304      	movs	r3, #4
 8002364:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002366:	2350      	movs	r3, #80	; 0x50
 8002368:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4816      	ldr	r0, [pc, #88]	; (80023d4 <MX_TIM9_Init+0xdc>)
 800237a:	f003 f82c 	bl	80053d6 <HAL_TIM_SlaveConfigSynchro>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM9_Init+0x90>
  {
    Error_Handler();
 8002384:	f000 f942 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800238c:	2301      	movs	r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	4619      	mov	r1, r3
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <MX_TIM9_Init+0xdc>)
 80023a0:	f002 fe00 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM9_Init+0xb6>
  {
    Error_Handler();
 80023aa:	f000 f92f 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023ae:	2302      	movs	r3, #2
 80023b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80023b2:	2302      	movs	r3, #2
 80023b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2204      	movs	r2, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_TIM9_Init+0xdc>)
 80023be:	f002 fdf1 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM9_Init+0xd4>
  {
    Error_Handler();
 80023c8:	f000 f920 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000280 	.word	0x20000280
 80023d8:	40014000 	.word	0x40014000

080023dc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <MX_TIM12_Init+0xe0>)
 8002402:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 999;
 8002404:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002406:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <MX_TIM12_Init+0xdc>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff;
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002418:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241a:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <MX_TIM12_Init+0xdc>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002426:	4824      	ldr	r0, [pc, #144]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002428:	f002 fb20 	bl	8004a6c <HAL_TIM_Base_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8002432:	f000 f8eb 	bl	800260c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002436:	4820      	ldr	r0, [pc, #128]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002438:	f002 fc0e 	bl	8004c58 <HAL_TIM_IC_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM12_Init+0x6a>
  {
    Error_Handler();
 8002442:	f000 f8e3 	bl	800260c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002446:	2304      	movs	r3, #4
 8002448:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800244a:	2350      	movs	r3, #80	; 0x50
 800244c:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4816      	ldr	r0, [pc, #88]	; (80024b8 <MX_TIM12_Init+0xdc>)
 800245e:	f002 ffba 	bl	80053d6 <HAL_TIM_SlaveConfigSynchro>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM12_Init+0x90>
  {
    Error_Handler();
 8002468:	f000 f8d0 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002470:	2301      	movs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	2200      	movs	r2, #0
 8002480:	4619      	mov	r1, r3
 8002482:	480d      	ldr	r0, [pc, #52]	; (80024b8 <MX_TIM12_Init+0xdc>)
 8002484:	f002 fd8e 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM12_Init+0xb6>
  {
    Error_Handler();
 800248e:	f000 f8bd 	bl	800260c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002492:	2302      	movs	r3, #2
 8002494:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002496:	2302      	movs	r3, #2
 8002498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2204      	movs	r2, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_TIM12_Init+0xdc>)
 80024a2:	f002 fd7f 	bl	8004fa4 <HAL_TIM_IC_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM12_Init+0xd4>
  {
    Error_Handler();
 80024ac:	f000 f8ae 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000340 	.word	0x20000340
 80024bc:	40001800 	.word	0x40001800

080024c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_UART4_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <MX_UART4_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_UART4_Init+0x4c>)
 80024cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_UART4_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_UART4_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_UART4_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_UART4_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_UART4_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_UART4_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_UART4_Init+0x4c>)
 80024f8:	f003 fd6c 	bl	8005fd4 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002502:	f000 f883 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200002c0 	.word	0x200002c0
 8002510:	40004c00 	.word	0x40004c00

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	4b35      	ldr	r3, [pc, #212]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b32      	ldr	r3, [pc, #200]	; (8002604 <MX_GPIO_Init+0xf0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <MX_GPIO_Init+0xf0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <MX_GPIO_Init+0xf0>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_GPIO_Init+0xf0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a11      	ldr	r2, [pc, #68]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_GPIO_Init+0xf0>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80025d8:	480b      	ldr	r0, [pc, #44]	; (8002608 <MX_GPIO_Init+0xf4>)
 80025da:	f000 fe29 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_GPIO_Init+0xf4>)
 80025f8:	f000 fc80 	bl	8002efc <HAL_GPIO_Init>

}
 80025fc:	bf00      	nop
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	40020c00 	.word	0x40020c00

0800260c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_MspInit+0x4c>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_MspInit+0x4c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_MspInit+0x4c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_MspInit+0x4c>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_MspInit+0x4c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <HAL_I2C_MspInit+0x84>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12c      	bne.n	80026e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_I2C_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_I2C_MspInit+0x88>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_I2C_MspInit+0x88>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b0:	2312      	movs	r3, #18
 80026b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026bc:	2304      	movs	r3, #4
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	480c      	ldr	r0, [pc, #48]	; (80026f8 <HAL_I2C_MspInit+0x8c>)
 80026c8:	f000 fc18 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_I2C_MspInit+0x88>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_I2C_MspInit+0x88>)
 80026d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026da:	6413      	str	r3, [r2, #64]	; 0x40
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_I2C_MspInit+0x88>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40005400 	.word	0x40005400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020400 	.word	0x40020400

080026fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b092      	sub	sp, #72	; 0x48
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d116      	bne.n	800274c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
 8002722:	4b8a      	ldr	r3, [pc, #552]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a89      	ldr	r2, [pc, #548]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b87      	ldr	r3, [pc, #540]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	201c      	movs	r0, #28
 8002740:	f000 fba5 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002744:	201c      	movs	r0, #28
 8002746:	f000 fbbe 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800274a:	e0fb      	b.n	8002944 <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7f      	ldr	r2, [pc, #508]	; (8002950 <HAL_TIM_Base_MspInit+0x254>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275a:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a7b      	ldr	r2, [pc, #492]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b79      	ldr	r3, [pc, #484]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002772:	e0e7      	b.n	8002944 <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM4)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a76      	ldr	r2, [pc, #472]	; (8002954 <HAL_TIM_Base_MspInit+0x258>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d134      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027b6:	2340      	movs	r3, #64	; 0x40
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027c6:	2302      	movs	r3, #2
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027ce:	4619      	mov	r1, r3
 80027d0:	4861      	ldr	r0, [pc, #388]	; (8002958 <HAL_TIM_Base_MspInit+0x25c>)
 80027d2:	f000 fb93 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201e      	movs	r0, #30
 80027dc:	f000 fb57 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027e0:	201e      	movs	r0, #30
 80027e2:	f000 fb70 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 80027e6:	e0ad      	b.n	8002944 <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM5)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5b      	ldr	r2, [pc, #364]	; (800295c <HAL_TIM_Base_MspInit+0x260>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d134      	bne.n	800285c <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	4b55      	ldr	r3, [pc, #340]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a54      	ldr	r2, [pc, #336]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b52      	ldr	r3, [pc, #328]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a4d      	ldr	r2, [pc, #308]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800282a:	2301      	movs	r3, #1
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800283a:	2302      	movs	r3, #2
 800283c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002842:	4619      	mov	r1, r3
 8002844:	4846      	ldr	r0, [pc, #280]	; (8002960 <HAL_TIM_Base_MspInit+0x264>)
 8002846:	f000 fb59 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2032      	movs	r0, #50	; 0x32
 8002850:	f000 fb1d 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002854:	2032      	movs	r0, #50	; 0x32
 8002856:	f000 fb36 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 800285a:	e073      	b.n	8002944 <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM9)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a40      	ldr	r2, [pc, #256]	; (8002964 <HAL_TIM_Base_MspInit+0x268>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d134      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x1d4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	4b38      	ldr	r3, [pc, #224]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b35      	ldr	r3, [pc, #212]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800289e:	2320      	movs	r3, #32
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80028ae:	2303      	movs	r3, #3
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b6:	4619      	mov	r1, r3
 80028b8:	482b      	ldr	r0, [pc, #172]	; (8002968 <HAL_TIM_Base_MspInit+0x26c>)
 80028ba:	f000 fb1f 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2018      	movs	r0, #24
 80028c4:	f000 fae3 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80028c8:	2018      	movs	r0, #24
 80028ca:	f000 fafc 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 80028ce:	e039      	b.n	8002944 <HAL_TIM_Base_MspInit+0x248>
  else if(htim_base->Instance==TIM12)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a25      	ldr	r2, [pc, #148]	; (800296c <HAL_TIM_Base_MspInit+0x270>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d134      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x248>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80028e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_TIM_Base_MspInit+0x250>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002924:	2309      	movs	r3, #9
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800292c:	4619      	mov	r1, r3
 800292e:	480a      	ldr	r0, [pc, #40]	; (8002958 <HAL_TIM_Base_MspInit+0x25c>)
 8002930:	f000 fae4 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2100      	movs	r1, #0
 8002938:	202b      	movs	r0, #43	; 0x2b
 800293a:	f000 faa8 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800293e:	202b      	movs	r0, #43	; 0x2b
 8002940:	f000 fac1 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 8002944:	bf00      	nop
 8002946:	3748      	adds	r7, #72	; 0x48
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800
 8002958:	40020400 	.word	0x40020400
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40020000 	.word	0x40020000
 8002964:	40014000 	.word	0x40014000
 8002968:	40021000 	.word	0x40021000
 800296c:	40001800 	.word	0x40001800

08002970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_TIM_MspPostInit+0xa4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d13b      	bne.n	8002a0a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_TIM_MspPostInit+0xa8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_TIM_MspPostInit+0xa8>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_TIM_MspPostInit+0xa8>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_TIM_MspPostInit+0xa8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIM_MspPostInit+0xa8>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_TIM_MspPostInit+0xa8>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ca:	23c0      	movs	r3, #192	; 0xc0
 80029cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029da:	2302      	movs	r3, #2
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <HAL_TIM_MspPostInit+0xac>)
 80029e6:	f000 fa89 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ea:	2303      	movs	r3, #3
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029fa:	2302      	movs	r3, #2
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	4806      	ldr	r0, [pc, #24]	; (8002a20 <HAL_TIM_MspPostInit+0xb0>)
 8002a06:	f000 fa79 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_UART_MspInit+0x84>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d12c      	bne.n	8002aa0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_UART_MspInit+0x88>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_UART_MspInit+0x88>)
 8002a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_UART_MspInit+0x88>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_UART_MspInit+0x88>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_UART_MspInit+0x88>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_UART_MspInit+0x88>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a90:	2308      	movs	r3, #8
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_UART_MspInit+0x8c>)
 8002a9c:	f000 fa2e 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40004c00 	.word	0x40004c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020800 	.word	0x40020800

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <HardFault_Handler+0x4>

08002ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <MemManage_Handler+0x4>

08002ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b08:	f000 f8c6 	bl	8002c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002b16:	f002 f93d 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000280 	.word	0x20000280

08002b24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <TIM2_IRQHandler+0x10>)
 8002b2a:	f002 f933 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000300 	.word	0x20000300

08002b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <TIM4_IRQHandler+0x10>)
 8002b3e:	f002 f929 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000200 	.word	0x20000200

08002b4c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002b52:	f002 f91f 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000340 	.word	0x20000340

08002b60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <TIM5_IRQHandler+0x10>)
 8002b66:	f002 f915 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000240 	.word	0x20000240

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <SystemInit+0x28>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <SystemInit+0x28>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SystemInit+0x28>)
 8002b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ba6:	e003      	b.n	8002bb0 <LoopCopyDataInit>

08002ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bae:	3104      	adds	r1, #4

08002bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bb0:	480b      	ldr	r0, [pc, #44]	; (8002be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bb8:	d3f6      	bcc.n	8002ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bbc:	e002      	b.n	8002bc4 <LoopFillZerobss>

08002bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bc0:	f842 3b04 	str.w	r3, [r2], #4

08002bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bc8:	d3f9      	bcc.n	8002bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bca:	f7ff ffd3 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bce:	f003 ff59 	bl	8006a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bd2:	f7ff f883 	bl	8001cdc <main>
  bx  lr    
 8002bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bdc:	080070e0 	.word	0x080070e0
  ldr  r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002be4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002be8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002bec:	20000384 	.word	0x20000384

08002bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_Init+0x40>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_Init+0x40>)
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_Init+0x40>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 f92b 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 f808 	bl	8002c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fcf8 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x54>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x58>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f943 	bl	8002ee2 <HAL_SYSTICK_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00e      	b.n	8002c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d80a      	bhi.n	8002c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f000 f90b 	bl	8002e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_InitTick+0x5c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	20000014 	.word	0x20000014
 8002c94:	20000010 	.word	0x20000010

08002c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x20>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x24>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_IncTick+0x24>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000014 	.word	0x20000014
 8002cbc:	20000380 	.word	0x20000380

08002cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetTick+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000380 	.word	0x20000380

08002cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <__NVIC_GetPriorityGrouping+0x18>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 0307 	and.w	r3, r3, #7
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db0b      	blt.n	8002d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	f003 021f 	and.w	r2, r3, #31
 8002d54:	4907      	ldr	r1, [pc, #28]	; (8002d74 <__NVIC_EnableIRQ+0x38>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000e100 	.word	0xe000e100

08002d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6039      	str	r1, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db0a      	blt.n	8002da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	490c      	ldr	r1, [pc, #48]	; (8002dc4 <__NVIC_SetPriority+0x4c>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da0:	e00a      	b.n	8002db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4908      	ldr	r1, [pc, #32]	; (8002dc8 <__NVIC_SetPriority+0x50>)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	3b04      	subs	r3, #4
 8002db0:	0112      	lsls	r2, r2, #4
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	440b      	add	r3, r1
 8002db6:	761a      	strb	r2, [r3, #24]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000e100 	.word	0xe000e100
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f1c3 0307 	rsb	r3, r3, #7
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	bf28      	it	cs
 8002dea:	2304      	movcs	r3, #4
 8002dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d902      	bls.n	8002dfc <NVIC_EncodePriority+0x30>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3b03      	subs	r3, #3
 8002dfa:	e000      	b.n	8002dfe <NVIC_EncodePriority+0x32>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	401a      	ands	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43d9      	mvns	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	4313      	orrs	r3, r2
         );
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff8e 	bl	8002d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff29 	bl	8002cd8 <__NVIC_SetPriorityGrouping>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea0:	f7ff ff3e 	bl	8002d20 <__NVIC_GetPriorityGrouping>
 8002ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff8e 	bl	8002dcc <NVIC_EncodePriority>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff5d 	bl	8002d78 <__NVIC_SetPriority>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff31 	bl	8002d3c <__NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ffa2 	bl	8002e34 <SysTick_Config>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e16b      	b.n	80031f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 815a 	bne.w	80031ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d00b      	beq.n	8002f56 <HAL_GPIO_Init+0x5a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f4a:	2b11      	cmp	r3, #17
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b12      	cmp	r3, #18
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0xfc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b12      	cmp	r3, #18
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80b4 	beq.w	80031ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_GPIO_Init+0x308>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_GPIO_Init+0x308>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_GPIO_Init+0x308>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_GPIO_Init+0x30c>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a51      	ldr	r2, [pc, #324]	; (800320c <HAL_GPIO_Init+0x310>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a50      	ldr	r2, [pc, #320]	; (8003210 <HAL_GPIO_Init+0x314>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x222>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	; (8003214 <HAL_GPIO_Init+0x318>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	; (8003218 <HAL_GPIO_Init+0x31c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x21a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4d      	ldr	r2, [pc, #308]	; (800321c <HAL_GPIO_Init+0x320>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x216>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_GPIO_Init+0x324>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x212>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_GPIO_Init+0x328>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_GPIO_Init+0x32c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x20a>
 8003102:	2307      	movs	r3, #7
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003106:	2308      	movs	r3, #8
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003134:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_GPIO_Init+0x30c>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003142:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_GPIO_Init+0x330>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003166:	4a31      	ldr	r2, [pc, #196]	; (800322c <HAL_GPIO_Init+0x330>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800316c:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_GPIO_Init+0x330>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <HAL_GPIO_Init+0x330>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_GPIO_Init+0x330>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_GPIO_Init+0x330>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_GPIO_Init+0x330>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_GPIO_Init+0x330>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae90 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3724      	adds	r7, #36	; 0x24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40013c00 	.word	0x40013c00

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e11f      	b.n	80034b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff f9ee 	bl	800266c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c8:	f001 fba8 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a7b      	ldr	r2, [pc, #492]	; (80034c0 <HAL_I2C_Init+0x25c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d807      	bhi.n	80032e8 <HAL_I2C_Init+0x84>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_I2C_Init+0x260>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e006      	b.n	80032f6 <HAL_I2C_Init+0x92>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_I2C_Init+0x264>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0db      	b.n	80034b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a72      	ldr	r2, [pc, #456]	; (80034cc <HAL_I2C_Init+0x268>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a64      	ldr	r2, [pc, #400]	; (80034c0 <HAL_I2C_Init+0x25c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <HAL_I2C_Init+0xd4>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	e009      	b.n	800334c <HAL_I2C_Init+0xe8>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_I2C_Init+0x26c>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	3301      	adds	r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800335e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4956      	ldr	r1, [pc, #344]	; (80034c0 <HAL_I2C_Init+0x25c>)
 8003368:	428b      	cmp	r3, r1
 800336a:	d80d      	bhi.n	8003388 <HAL_I2C_Init+0x124>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e59      	subs	r1, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb1 f3f3 	udiv	r3, r1, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	bf38      	it	cc
 8003384:	2304      	movcc	r3, #4
 8003386:	e04f      	b.n	8003428 <HAL_I2C_Init+0x1c4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_I2C_Init+0x150>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_I2C_Init+0x176>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x17e>
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_I2C_Init+0x1c4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_I2C_Init+0x1a4>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Init+0x1c4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6809      	ldr	r1, [r1, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6911      	ldr	r1, [r2, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	000186a0 	.word	0x000186a0
 80034c4:	001e847f 	.word	0x001e847f
 80034c8:	003d08ff 	.word	0x003d08ff
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	817b      	strh	r3, [r7, #10]
 80034e4:	4613      	mov	r3, r2
 80034e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff fbea 	bl	8002cc0 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	f040 80e0 	bne.w	80036bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	4970      	ldr	r1, [pc, #448]	; (80036c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fc70 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	e0d3      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x50>
 8003520:	2302      	movs	r3, #2
 8003522:	e0cc      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d007      	beq.n	800354a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2221      	movs	r2, #33	; 0x21
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2210      	movs	r2, #16
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <HAL_I2C_Master_Transmit+0x1f8>)
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fac2 	bl	8003b1c <I2C_MasterRequestWrite>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e08d      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035b8:	e066      	b.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fcea 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_I2C_Master_Transmit+0x188>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6a39      	ldr	r1, [r7, #32]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fcda 	bl	800401a <I2C_WaitOnBTFFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d107      	bne.n	8003684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e01a      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d194      	bne.n	80035ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	00100002 	.word	0x00100002
 80036cc:	ffff0000 	.word	0xffff0000

080036d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	; 0x30
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ea:	f7ff fae9 	bl	8002cc0 <HAL_GetTick>
 80036ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	f040 8208 	bne.w	8003b0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2319      	movs	r3, #25
 8003704:	2201      	movs	r2, #1
 8003706:	497b      	ldr	r1, [pc, #492]	; (80038f4 <HAL_I2C_Mem_Read+0x224>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fb6f 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
 8003716:	e1fb      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Mem_Read+0x56>
 8003722:	2302      	movs	r3, #2
 8003724:	e1f4      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d007      	beq.n	800374c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2222      	movs	r2, #34	; 0x22
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a5b      	ldr	r2, [pc, #364]	; (80038f8 <HAL_I2C_Mem_Read+0x228>)
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800378e:	88f8      	ldrh	r0, [r7, #6]
 8003790:	893a      	ldrh	r2, [r7, #8]
 8003792:	8979      	ldrh	r1, [r7, #10]
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4603      	mov	r3, r0
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa3e 	bl	8003c20 <I2C_RequestMemoryRead>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e1b0      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d113      	bne.n	80037de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	623b      	str	r3, [r7, #32]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e184      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d11b      	bne.n	800381e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e164      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	2b02      	cmp	r3, #2
 8003824:	d11b      	bne.n	800385e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	e144      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003874:	e138      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	2b03      	cmp	r3, #3
 800387c:	f200 80f1 	bhi.w	8003a62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b01      	cmp	r3, #1
 8003886:	d123      	bne.n	80038d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fc05 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e139      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ce:	e10b      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d14e      	bne.n	8003976 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	2200      	movs	r2, #0
 80038e0:	4906      	ldr	r1, [pc, #24]	; (80038fc <HAL_I2C_Mem_Read+0x22c>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa82 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e10e      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
 80038f2:	bf00      	nop
 80038f4:	00100002 	.word	0x00100002
 80038f8:	ffff0000 	.word	0xffff0000
 80038fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003974:	e0b8      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	2200      	movs	r2, #0
 800397e:	4966      	ldr	r1, [pc, #408]	; (8003b18 <HAL_I2C_Mem_Read+0x448>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa33 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0bf      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2200      	movs	r2, #0
 80039da:	494f      	ldr	r1, [pc, #316]	; (8003b18 <HAL_I2C_Mem_Read+0x448>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fa05 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e091      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a60:	e042      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fb18 	bl	800409c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e04c      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d118      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f aec2 	bne.w	8003876 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3728      	adds	r7, #40	; 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	00010004 	.word	0x00010004

08003b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d006      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d003      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b44:	d108      	bne.n	8003b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e00b      	b.n	8003b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d107      	bne.n	8003b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f935 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e035      	b.n	8003c0e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003baa:	d108      	bne.n	8003bbe <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bba:	611a      	str	r2, [r3, #16]
 8003bbc:	e01b      	b.n	8003bf6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bbe:	897b      	ldrh	r3, [r7, #10]
 8003bc0:	11db      	asrs	r3, r3, #7
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 0306 	and.w	r3, r3, #6
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f063 030f 	orn	r3, r3, #15
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	490f      	ldr	r1, [pc, #60]	; (8003c18 <I2C_MasterRequestWrite+0xfc>)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f95c 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e010      	b.n	8003c0e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bec:	897b      	ldrh	r3, [r7, #10]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4908      	ldr	r1, [pc, #32]	; (8003c1c <I2C_MasterRequestWrite+0x100>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f94c 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	00010008 	.word	0x00010008
 8003c1c:	00010002 	.word	0x00010002

08003c20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	817b      	strh	r3, [r7, #10]
 8003c32:	460b      	mov	r3, r1
 8003c34:	813b      	strh	r3, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f8c0 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0a9      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	4951      	ldr	r1, [pc, #324]	; (8003de8 <I2C_RequestMemoryRead+0x1c8>)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f8f9 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e096      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	6a39      	ldr	r1, [r7, #32]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f963 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d107      	bne.n	8003cf0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e075      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfa:	893b      	ldrh	r3, [r7, #8]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]
 8003d04:	e021      	b.n	8003d4a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d06:	893b      	ldrh	r3, [r7, #8]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f93d 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d107      	bne.n	8003d3c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e04f      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d40:	893b      	ldrh	r3, [r7, #8]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	6a39      	ldr	r1, [r7, #32]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f922 	bl	8003f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d107      	bne.n	8003d72 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e034      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f82a 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e013      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003db8:	897b      	ldrh	r3, [r7, #10]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	4906      	ldr	r1, [pc, #24]	; (8003de8 <I2C_RequestMemoryRead+0x1c8>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f863 	bl	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfc:	e025      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d021      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7fe ff5b 	bl	8002cc0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f043 0220 	orr.w	r2, r3, #32
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e023      	b.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10d      	bne.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	e00c      	b.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d0b6      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea8:	e051      	b.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d123      	bne.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e046      	b.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d021      	beq.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe fed9 	bl	8002cc0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e020      	b.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10c      	bne.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e00b      	b.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d18d      	bne.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa4:	e02d      	b.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f8ce 	bl	8004148 <I2C_IsAcknowledgeFailed>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e02d      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d021      	beq.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe fe7f 	bl	8002cc0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e007      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d1ca      	bne.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004026:	e02d      	b.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f88d 	bl	8004148 <I2C_IsAcknowledgeFailed>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e02d      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d021      	beq.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fe fe3e 	bl	8002cc0 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e007      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d1ca      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040a8:	e042      	b.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d119      	bne.n	80040ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0210 	mvn.w	r2, #16
 80040c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e029      	b.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ec:	f7fe fde8 	bl	8002cc0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e007      	b.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d1b5      	bne.n	80040aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d11b      	bne.n	8004198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0204 	orr.w	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e25b      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d075      	beq.n	80042b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c6:	4ba3      	ldr	r3, [pc, #652]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00c      	beq.n	80041ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4ba0      	ldr	r3, [pc, #640]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d112      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b9d      	ldr	r3, [pc, #628]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	4b99      	ldr	r3, [pc, #612]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x108>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d157      	bne.n	80042b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e236      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x74>
 800420e:	4b91      	ldr	r3, [pc, #580]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a90      	ldr	r2, [pc, #576]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b8b      	ldr	r3, [pc, #556]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a8a      	ldr	r2, [pc, #552]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a87      	ldr	r2, [pc, #540]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 8004240:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a80      	ldr	r2, [pc, #512]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe fd2e 	bl	8002cc0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fe fd2a 	bl	8002cc0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1fb      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xc0>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe fd1a 	bl	8002cc0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7fe fd16 	bl	8002cc0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1e7      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b6c      	ldr	r3, [pc, #432]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xe8>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042be:	4b65      	ldr	r3, [pc, #404]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b62      	ldr	r3, [pc, #392]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b5f      	ldr	r3, [pc, #380]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1bb      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b56      	ldr	r3, [pc, #344]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4952      	ldr	r1, [pc, #328]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <HAL_RCC_OscConfig+0x2b0>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fe fccf 	bl	8002cc0 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004326:	f7fe fccb 	bl	8002cc0 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e19c      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4940      	ldr	r1, [pc, #256]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCC_OscConfig+0x2b0>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe fcae 	bl	8002cc0 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004368:	f7fe fcaa 	bl	8002cc0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e17b      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d030      	beq.n	80043f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b30      	ldr	r3, [pc, #192]	; (800445c <HAL_RCC_OscConfig+0x2b4>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fe fc8e 	bl	8002cc0 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a8:	f7fe fc8a 	bl	8002cc0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e15b      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b26      	ldr	r3, [pc, #152]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x200>
 80043c6:	e015      	b.n	80043f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCC_OscConfig+0x2b4>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fe fc77 	bl	8002cc0 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fe fc73 	bl	8002cc0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e144      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a0 	beq.w	8004542 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_OscConfig+0x2b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d121      	bne.n	8004482 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_OscConfig+0x2b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a07      	ldr	r2, [pc, #28]	; (8004460 <HAL_RCC_OscConfig+0x2b8>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444a:	f7fe fc39 	bl	8002cc0 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	e011      	b.n	8004476 <HAL_RCC_OscConfig+0x2ce>
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	42470000 	.word	0x42470000
 800445c:	42470e80 	.word	0x42470e80
 8004460:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004464:	f7fe fc2c 	bl	8002cc0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0fd      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b81      	ldr	r3, [pc, #516]	; (800467c <HAL_RCC_OscConfig+0x4d4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d106      	bne.n	8004498 <HAL_RCC_OscConfig+0x2f0>
 800448a:	4b7d      	ldr	r3, [pc, #500]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a7c      	ldr	r2, [pc, #496]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	e01c      	b.n	80044d2 <HAL_RCC_OscConfig+0x32a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d10c      	bne.n	80044ba <HAL_RCC_OscConfig+0x312>
 80044a0:	4b77      	ldr	r3, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a76      	ldr	r2, [pc, #472]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	4b74      	ldr	r3, [pc, #464]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	e00b      	b.n	80044d2 <HAL_RCC_OscConfig+0x32a>
 80044ba:	4b71      	ldr	r3, [pc, #452]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a70      	ldr	r2, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	4b6e      	ldr	r3, [pc, #440]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a6d      	ldr	r2, [pc, #436]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d015      	beq.n	8004506 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fe fbf1 	bl	8002cc0 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fe fbed 	bl	8002cc0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0bc      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f8:	4b61      	ldr	r3, [pc, #388]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ee      	beq.n	80044e2 <HAL_RCC_OscConfig+0x33a>
 8004504:	e014      	b.n	8004530 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004506:	f7fe fbdb 	bl	8002cc0 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe fbd7 	bl	8002cc0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0a6      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004524:	4b56      	ldr	r3, [pc, #344]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ee      	bne.n	800450e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4b52      	ldr	r3, [pc, #328]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a51      	ldr	r2, [pc, #324]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8092 	beq.w	8004670 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b08      	cmp	r3, #8
 8004556:	d05c      	beq.n	8004612 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d141      	bne.n	80045e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004560:	4b48      	ldr	r3, [pc, #288]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fe fbab 	bl	8002cc0 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456e:	f7fe fba7 	bl	8002cc0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e078      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004580:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	019b      	lsls	r3, r3, #6
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	3b01      	subs	r3, #1
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	4933      	ldr	r1, [pc, #204]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b6:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fb80 	bl	8002cc0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fe fb7c 	bl	8002cc0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e04d      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x41c>
 80045e2:	e045      	b.n	8004670 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_OscConfig+0x4dc>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fe fb69 	bl	8002cc0 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fe fb65 	bl	8002cc0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e036      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x44a>
 8004610:	e02e      	b.n	8004670 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e029      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <HAL_RCC_OscConfig+0x4d8>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	429a      	cmp	r2, r3
 8004630:	d11c      	bne.n	800466c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d115      	bne.n	800466c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800464c:	4293      	cmp	r3, r2
 800464e:	d10d      	bne.n	800466c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40007000 	.word	0x40007000
 8004680:	40023800 	.word	0x40023800
 8004684:	42470060 	.word	0x42470060

08004688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0cc      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b68      	ldr	r3, [pc, #416]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d90c      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b65      	ldr	r3, [pc, #404]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b8      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046dc:	4b59      	ldr	r3, [pc, #356]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a58      	ldr	r2, [pc, #352]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	494d      	ldr	r1, [pc, #308]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d044      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d119      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e06f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e067      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b37      	ldr	r3, [pc, #220]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4934      	ldr	r1, [pc, #208]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004778:	f7fe faa2 	bl	8002cc0 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fe fa9e 	bl	8002cc0 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e04f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d20c      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b20      	ldr	r3, [pc, #128]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e032      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4916      	ldr	r1, [pc, #88]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	490e      	ldr	r1, [pc, #56]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800480e:	f000 f821 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8004812:	4601      	mov	r1, r0
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	fa21 f303 	lsr.w	r3, r1, r3
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fa02 	bl	8002c38 <HAL_InitTick>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023c00 	.word	0x40023c00
 8004844:	40023800 	.word	0x40023800
 8004848:	08007070 	.word	0x08007070
 800484c:	2000000c 	.word	0x2000000c
 8004850:	20000010 	.word	0x20000010

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	2300      	movs	r3, #0
 8004864:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486a:	4b63      	ldr	r3, [pc, #396]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b04      	cmp	r3, #4
 8004874:	d007      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0x32>
 8004876:	2b08      	cmp	r3, #8
 8004878:	d008      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x38>
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 80b4 	bne.w	80049e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004882:	60bb      	str	r3, [r7, #8]
       break;
 8004884:	e0b3      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004886:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004888:	60bb      	str	r3, [r7, #8]
      break;
 800488a:	e0b0      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800488c:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004894:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04a      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a2:	4b55      	ldr	r3, [pc, #340]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	ea03 0501 	and.w	r5, r3, r1
 80048b8:	ea04 0602 	and.w	r6, r4, r2
 80048bc:	4629      	mov	r1, r5
 80048be:	4632      	mov	r2, r6
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	0154      	lsls	r4, r2, #5
 80048ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ce:	014b      	lsls	r3, r1, #5
 80048d0:	4619      	mov	r1, r3
 80048d2:	4622      	mov	r2, r4
 80048d4:	1b49      	subs	r1, r1, r5
 80048d6:	eb62 0206 	sbc.w	r2, r2, r6
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	f04f 0400 	mov.w	r4, #0
 80048e2:	0194      	lsls	r4, r2, #6
 80048e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048e8:	018b      	lsls	r3, r1, #6
 80048ea:	1a5b      	subs	r3, r3, r1
 80048ec:	eb64 0402 	sbc.w	r4, r4, r2
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	00e2      	lsls	r2, r4, #3
 80048fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048fe:	00d9      	lsls	r1, r3, #3
 8004900:	460b      	mov	r3, r1
 8004902:	4614      	mov	r4, r2
 8004904:	195b      	adds	r3, r3, r5
 8004906:	eb44 0406 	adc.w	r4, r4, r6
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	0262      	lsls	r2, r4, #9
 8004914:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004918:	0259      	lsls	r1, r3, #9
 800491a:	460b      	mov	r3, r1
 800491c:	4614      	mov	r4, r2
 800491e:	4618      	mov	r0, r3
 8004920:	4621      	mov	r1, r4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	461a      	mov	r2, r3
 800492a:	4623      	mov	r3, r4
 800492c:	f7fc f908 	bl	8000b40 <__aeabi_uldivmod>
 8004930:	4603      	mov	r3, r0
 8004932:	460c      	mov	r4, r1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e049      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	ea03 0501 	and.w	r5, r3, r1
 800494e:	ea04 0602 	and.w	r6, r4, r2
 8004952:	4629      	mov	r1, r5
 8004954:	4632      	mov	r2, r6
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f04f 0400 	mov.w	r4, #0
 800495e:	0154      	lsls	r4, r2, #5
 8004960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004964:	014b      	lsls	r3, r1, #5
 8004966:	4619      	mov	r1, r3
 8004968:	4622      	mov	r2, r4
 800496a:	1b49      	subs	r1, r1, r5
 800496c:	eb62 0206 	sbc.w	r2, r2, r6
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	f04f 0400 	mov.w	r4, #0
 8004978:	0194      	lsls	r4, r2, #6
 800497a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800497e:	018b      	lsls	r3, r1, #6
 8004980:	1a5b      	subs	r3, r3, r1
 8004982:	eb64 0402 	sbc.w	r4, r4, r2
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	00e2      	lsls	r2, r4, #3
 8004990:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004994:	00d9      	lsls	r1, r3, #3
 8004996:	460b      	mov	r3, r1
 8004998:	4614      	mov	r4, r2
 800499a:	195b      	adds	r3, r3, r5
 800499c:	eb44 0406 	adc.w	r4, r4, r6
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	02a2      	lsls	r2, r4, #10
 80049aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049ae:	0299      	lsls	r1, r3, #10
 80049b0:	460b      	mov	r3, r1
 80049b2:	4614      	mov	r4, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	4621      	mov	r1, r4
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f04f 0400 	mov.w	r4, #0
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	f7fc f8bd 	bl	8000b40 <__aeabi_uldivmod>
 80049c6:	4603      	mov	r3, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	3301      	adds	r3, #1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	60bb      	str	r3, [r7, #8]
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049ea:	60bb      	str	r3, [r7, #8]
      break;
 80049ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ee:	68bb      	ldr	r3, [r7, #8]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	007a1200 	.word	0x007a1200

08004a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	2000000c 	.word	0x2000000c

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a24:	4601      	mov	r1, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	08007080 	.word	0x08007080

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a48:	f7ff ffdc 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0b5b      	lsrs	r3, r3, #13
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5a:	5cd3      	ldrb	r3, [r2, r3]
 8004a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08007080 	.word	0x08007080

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e01d      	b.n	8004aba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd fe32 	bl	80026fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fd42 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e01d      	b.n	8004b10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f815 	bl	8004b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f000 fd17 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	6839      	ldr	r1, [r7, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f992 	bl	8005e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <HAL_TIM_PWM_Start+0x74>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIM_PWM_Start+0x2c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <HAL_TIM_PWM_Start+0x78>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_TIM_PWM_Start+0x30>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_TIM_PWM_Start+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d007      	beq.n	8004b94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 f954 	bl	8005e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <HAL_TIM_PWM_Stop+0xa8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIM_PWM_Stop+0x2c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <HAL_TIM_PWM_Stop+0xac>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <HAL_TIM_PWM_Stop+0x30>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <HAL_TIM_PWM_Stop+0x32>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d017      	beq.n	8004c0e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10f      	bne.n	8004c0e <HAL_TIM_PWM_Stop+0x66>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	f240 4344 	movw	r3, #1092	; 0x444
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_PWM_Stop+0x66>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <HAL_TIM_PWM_Stop+0x96>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	f240 4344 	movw	r3, #1092	; 0x444
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_PWM_Stop+0x96>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40010400 	.word	0x40010400

08004c58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e01d      	b.n	8004ca6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f815 	bl	8004cae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f000 fc4c 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d841      	bhi.n	8004d58 <HAL_TIM_IC_Start_IT+0x94>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <HAL_TIM_IC_Start_IT+0x18>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d59 	.word	0x08004d59
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004d59 	.word	0x08004d59
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004d59 	.word	0x08004d59
 8004cf8:	08004d59 	.word	0x08004d59
 8004cfc:	08004d35 	.word	0x08004d35
 8004d00:	08004d59 	.word	0x08004d59
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004d59 	.word	0x08004d59
 8004d0c:	08004d47 	.word	0x08004d47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0202 	orr.w	r2, r2, #2
 8004d1e:	60da      	str	r2, [r3, #12]
      break;
 8004d20:	e01b      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0204 	orr.w	r2, r2, #4
 8004d30:	60da      	str	r2, [r3, #12]
      break;
 8004d32:	e012      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	60da      	str	r2, [r3, #12]
      break;
 8004d44:	e009      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0210 	orr.w	r2, r2, #16
 8004d54:	60da      	str	r2, [r3, #12]
      break;
 8004d56:	e000      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004d58:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 f880 	bl	8005e68 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d007      	beq.n	8004d8a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0202 	mvn.w	r2, #2
 8004dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fe70 	bl	8001abc <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fb8a 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fb91 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0204 	mvn.w	r2, #4
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc fe46 	bl	8001abc <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fb60 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fb67 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0208 	mvn.w	r2, #8
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fe1c 	bl	8001abc <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fb36 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb3d 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc fdf2 	bl	8001abc <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fb0c 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fb13 	bl	800550c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0201 	mvn.w	r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fae6 	bl	80054e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 f83e 	bl	8005fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d10e      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d107      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fad8 	bl	8005520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d10e      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d107      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0220 	mvn.w	r2, #32
 8004f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 f808 	bl	8005fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_IC_ConfigChannel+0x1a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e08a      	b.n	80050d4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f000 fd7c 	bl	8005ae0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 020c 	bic.w	r2, r2, #12
 8004ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6999      	ldr	r1, [r3, #24]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	619a      	str	r2, [r3, #24]
 800500a:	e05a      	b.n	80050c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d11c      	bne.n	800504c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f000 fe00 	bl	8005c26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005034:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6999      	ldr	r1, [r3, #24]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	021a      	lsls	r2, r3, #8
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	619a      	str	r2, [r3, #24]
 800504a:	e03a      	b.n	80050c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b08      	cmp	r3, #8
 8005050:	d11b      	bne.n	800508a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f000 fe4d 	bl	8005d00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 020c 	bic.w	r2, r2, #12
 8005074:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
 8005088:	e01b      	b.n	80050c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f000 fe6d 	bl	8005d78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69d9      	ldr	r1, [r3, #28]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	021a      	lsls	r2, r3, #8
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e0b4      	b.n	8005260 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f200 809f 	bhi.w	800524c <HAL_TIM_PWM_ConfigChannel+0x170>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005149 	.word	0x08005149
 8005118:	0800524d 	.word	0x0800524d
 800511c:	0800524d 	.word	0x0800524d
 8005120:	0800524d 	.word	0x0800524d
 8005124:	08005189 	.word	0x08005189
 8005128:	0800524d 	.word	0x0800524d
 800512c:	0800524d 	.word	0x0800524d
 8005130:	0800524d 	.word	0x0800524d
 8005134:	080051cb 	.word	0x080051cb
 8005138:	0800524d 	.word	0x0800524d
 800513c:	0800524d 	.word	0x0800524d
 8005140:	0800524d 	.word	0x0800524d
 8005144:	0800520b 	.word	0x0800520b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fa90 	bl	8005674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0208 	orr.w	r2, r2, #8
 8005162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	619a      	str	r2, [r3, #24]
      break;
 8005186:	e062      	b.n	800524e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fae0 	bl	8005754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]
      break;
 80051c8:	e041      	b.n	800524e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fb35 	bl	8005840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0208 	orr.w	r2, r2, #8
 80051e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0204 	bic.w	r2, r2, #4
 80051f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69d9      	ldr	r1, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	61da      	str	r2, [r3, #28]
      break;
 8005208:	e021      	b.n	800524e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fb89 	bl	8005928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	021a      	lsls	r2, r3, #8
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]
      break;
 800524a:	e000      	b.n	800524e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800524c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e0a6      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x166>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800529e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d067      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x120>
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d80b      	bhi.n	80052d4 <HAL_TIM_ConfigClockSource+0x6c>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d073      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x140>
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d802      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x62>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d06f      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052c8:	e078      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d06c      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x140>
 80052ce:	2b30      	cmp	r3, #48	; 0x30
 80052d0:	d06a      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80052d2:	e073      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052d4:	2b70      	cmp	r3, #112	; 0x70
 80052d6:	d00d      	beq.n	80052f4 <HAL_TIM_ConfigClockSource+0x8c>
 80052d8:	2b70      	cmp	r3, #112	; 0x70
 80052da:	d804      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x7e>
 80052dc:	2b50      	cmp	r3, #80	; 0x50
 80052de:	d033      	beq.n	8005348 <HAL_TIM_ConfigClockSource+0xe0>
 80052e0:	2b60      	cmp	r3, #96	; 0x60
 80052e2:	d041      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80052e4:	e06a      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	d066      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x152>
 80052ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f0:	d017      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80052f2:	e063      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6899      	ldr	r1, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f000 fd90 	bl	8005e28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005316:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]
      break;
 8005320:	e04c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6899      	ldr	r1, [r3, #8]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f000 fd79 	bl	8005e28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005344:	609a      	str	r2, [r3, #8]
      break;
 8005346:	e039      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	461a      	mov	r2, r3
 8005356:	f000 fc37 	bl	8005bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2150      	movs	r1, #80	; 0x50
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd46 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005366:	e029      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	461a      	mov	r2, r3
 8005376:	f000 fc93 	bl	8005ca0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2160      	movs	r1, #96	; 0x60
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fd36 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005386:	e019      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	461a      	mov	r2, r3
 8005396:	f000 fc17 	bl	8005bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2140      	movs	r1, #64	; 0x40
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fd26 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 80053a6:	e009      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f000 fd1d 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 80053b8:	e000      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_SlaveConfigSynchro+0x18>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e031      	b.n	8005452 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fae7 	bl	80059d4 <TIM_SlaveTimer_SetConfig>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d009      	beq.n	8005420 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e018      	b.n	8005452 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800543e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d831      	bhi.n	80054d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054d5 	.word	0x080054d5
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080054b7 	.word	0x080054b7
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054cb 	.word	0x080054cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	60fb      	str	r3, [r7, #12]

      break;
 80054b4:	e00f      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	60fb      	str	r3, [r7, #12]

      break;
 80054be:	e00a      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	60fb      	str	r3, [r7, #12]

      break;
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	60fb      	str	r3, [r7, #12]

      break;
 80054d2:	e000      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80054d4:	bf00      	nop
  }

  return tmpreg;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a40      	ldr	r2, [pc, #256]	; (8005648 <TIM_Base_SetConfig+0x114>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3d      	ldr	r2, [pc, #244]	; (800564c <TIM_Base_SetConfig+0x118>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3c      	ldr	r2, [pc, #240]	; (8005650 <TIM_Base_SetConfig+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <TIM_Base_SetConfig+0x120>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a3a      	ldr	r2, [pc, #232]	; (8005658 <TIM_Base_SetConfig+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d108      	bne.n	8005586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <TIM_Base_SetConfig+0x114>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02b      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d027      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2c      	ldr	r2, [pc, #176]	; (800564c <TIM_Base_SetConfig+0x118>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d023      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <TIM_Base_SetConfig+0x11c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01f      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <TIM_Base_SetConfig+0x120>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01b      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a29      	ldr	r2, [pc, #164]	; (8005658 <TIM_Base_SetConfig+0x124>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d017      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a28      	ldr	r2, [pc, #160]	; (800565c <TIM_Base_SetConfig+0x128>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a27      	ldr	r2, [pc, #156]	; (8005660 <TIM_Base_SetConfig+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a26      	ldr	r2, [pc, #152]	; (8005664 <TIM_Base_SetConfig+0x130>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a25      	ldr	r2, [pc, #148]	; (8005668 <TIM_Base_SetConfig+0x134>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a24      	ldr	r2, [pc, #144]	; (800566c <TIM_Base_SetConfig+0x138>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a23      	ldr	r2, [pc, #140]	; (8005670 <TIM_Base_SetConfig+0x13c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a0a      	ldr	r2, [pc, #40]	; (8005648 <TIM_Base_SetConfig+0x114>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <TIM_Base_SetConfig+0x124>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40010400 	.word	0x40010400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800
 8005668:	40001800 	.word	0x40001800
 800566c:	40001c00 	.word	0x40001c00
 8005670:	40002000 	.word	0x40002000

08005674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 0302 	bic.w	r3, r3, #2
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a20      	ldr	r2, [pc, #128]	; (800574c <TIM_OC1_SetConfig+0xd8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC1_SetConfig+0x64>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <TIM_OC1_SetConfig+0xdc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10c      	bne.n	80056f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0308 	bic.w	r3, r3, #8
 80056de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f023 0304 	bic.w	r3, r3, #4
 80056f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a15      	ldr	r2, [pc, #84]	; (800574c <TIM_OC1_SetConfig+0xd8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_OC1_SetConfig+0x8e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <TIM_OC1_SetConfig+0xdc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d111      	bne.n	8005726 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400

08005754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0210 	bic.w	r2, r3, #16
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0320 	bic.w	r3, r3, #32
 800579e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <TIM_OC2_SetConfig+0xe4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC2_SetConfig+0x68>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <TIM_OC2_SetConfig+0xe8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10d      	bne.n	80057d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <TIM_OC2_SetConfig+0xe4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC2_SetConfig+0x94>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <TIM_OC2_SetConfig+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d113      	bne.n	8005810 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40010400 	.word	0x40010400

08005840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a21      	ldr	r2, [pc, #132]	; (8005920 <TIM_OC3_SetConfig+0xe0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC3_SetConfig+0x66>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a20      	ldr	r2, [pc, #128]	; (8005924 <TIM_OC3_SetConfig+0xe4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10d      	bne.n	80058c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TIM_OC3_SetConfig+0xe0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_OC3_SetConfig+0x92>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <TIM_OC3_SetConfig+0xe4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d113      	bne.n	80058fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40010000 	.word	0x40010000
 8005924:	40010400 	.word	0x40010400

08005928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a12      	ldr	r2, [pc, #72]	; (80059cc <TIM_OC4_SetConfig+0xa4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_OC4_SetConfig+0x68>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a11      	ldr	r2, [pc, #68]	; (80059d0 <TIM_OC4_SetConfig+0xa8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d109      	bne.n	80059a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40010400 	.word	0x40010400

080059d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b30      	cmp	r3, #48	; 0x30
 8005a18:	d05c      	beq.n	8005ad4 <TIM_SlaveTimer_SetConfig+0x100>
 8005a1a:	2b30      	cmp	r3, #48	; 0x30
 8005a1c:	d806      	bhi.n	8005a2c <TIM_SlaveTimer_SetConfig+0x58>
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d058      	beq.n	8005ad4 <TIM_SlaveTimer_SetConfig+0x100>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d056      	beq.n	8005ad4 <TIM_SlaveTimer_SetConfig+0x100>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d054      	beq.n	8005ad4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005a2a:	e054      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005a2c:	2b50      	cmp	r3, #80	; 0x50
 8005a2e:	d03d      	beq.n	8005aac <TIM_SlaveTimer_SetConfig+0xd8>
 8005a30:	2b50      	cmp	r3, #80	; 0x50
 8005a32:	d802      	bhi.n	8005a3a <TIM_SlaveTimer_SetConfig+0x66>
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d010      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005a38:	e04d      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005a3a:	2b60      	cmp	r3, #96	; 0x60
 8005a3c:	d040      	beq.n	8005ac0 <TIM_SlaveTimer_SetConfig+0xec>
 8005a3e:	2b70      	cmp	r3, #112	; 0x70
 8005a40:	d000      	beq.n	8005a44 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005a42:	e048      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68d9      	ldr	r1, [r3, #12]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f000 f9e8 	bl	8005e28 <TIM_ETR_SetConfig>
      break;
 8005a58:	e03d      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b05      	cmp	r3, #5
 8005a60:	d101      	bne.n	8005a66 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e038      	b.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	621a      	str	r2, [r3, #32]
      break;
 8005aaa:	e014      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6899      	ldr	r1, [r3, #8]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f000 f885 	bl	8005bc8 <TIM_TI1_ConfigInputStage>
      break;
 8005abe:	e00a      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6899      	ldr	r1, [r3, #8]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	461a      	mov	r2, r3
 8005ace:	f000 f8e7 	bl	8005ca0 <TIM_TI2_ConfigInputStage>
      break;
 8005ad2:	e000      	b.n	8005ad6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005ad4:	bf00      	nop
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a28      	ldr	r2, [pc, #160]	; (8005bac <TIM_TI1_SetConfig+0xcc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01b      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b14:	d017      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a25      	ldr	r2, [pc, #148]	; (8005bb0 <TIM_TI1_SetConfig+0xd0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a24      	ldr	r2, [pc, #144]	; (8005bb4 <TIM_TI1_SetConfig+0xd4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <TIM_TI1_SetConfig+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <TIM_TI1_SetConfig+0xdc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <TIM_TI1_SetConfig+0xe0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_TI1_SetConfig+0x66>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <TIM_TI1_SetConfig+0xe4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <TIM_TI1_SetConfig+0x6a>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <TIM_TI1_SetConfig+0x6c>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e003      	b.n	8005b6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f023 030a 	bic.w	r3, r3, #10
 8005b84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 030a 	and.w	r3, r3, #10
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40001800 	.word	0x40001800

08005bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 030a 	bic.w	r3, r3, #10
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f023 0210 	bic.w	r2, r3, #16
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	031b      	lsls	r3, r3, #12
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f023 0210 	bic.w	r2, r3, #16
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	031b      	lsls	r3, r3, #12
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	031b      	lsls	r3, r3, #12
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	031b      	lsls	r3, r3, #12
 8005dd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f043 0307 	orr.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e05a      	b.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d022      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f18:	d01d      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d018      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d10c      	bne.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40001800 	.word	0x40001800

08005fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e03f      	b.n	8006066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fc fd12 	bl	8002a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2224      	movs	r2, #36	; 0x24
 8006004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f9b1 	bl	8006380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800602c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800603c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800604c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b088      	sub	sp, #32
 8006072:	af02      	add	r7, sp, #8
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	f040 8083 	bne.w	8006196 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_UART_Transmit+0x2e>
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e07b      	b.n	8006198 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Transmit+0x40>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e074      	b.n	8006198 <HAL_UART_Transmit+0x12a>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2221      	movs	r2, #33	; 0x21
 80060c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80060c4:	f7fc fdfc 	bl	8002cc0 <HAL_GetTick>
 80060c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	88fa      	ldrh	r2, [r7, #6]
 80060ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80060de:	e042      	b.n	8006166 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d122      	bne.n	800613e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	2180      	movs	r1, #128	; 0x80
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f8f2 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e042      	b.n	8006198 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006124:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	3302      	adds	r3, #2
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	e017      	b.n	8006166 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3301      	adds	r3, #1
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	e013      	b.n	8006166 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	2180      	movs	r1, #128	; 0x80
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f8cf 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e01f      	b.n	8006198 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	60ba      	str	r2, [r7, #8]
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1b7      	bne.n	80060e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	2140      	movs	r1, #64	; 0x40
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f8b6 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e006      	b.n	8006198 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	4613      	mov	r3, r2
 80061ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b20      	cmp	r3, #32
 80061be:	f040 8090 	bne.w	80062e2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_UART_Receive+0x2e>
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e088      	b.n	80062e4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_UART_Receive+0x40>
 80061dc:	2302      	movs	r3, #2
 80061de:	e081      	b.n	80062e4 <HAL_UART_Receive+0x144>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2222      	movs	r2, #34	; 0x22
 80061f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061f6:	f7fc fd63 	bl	8002cc0 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006210:	e05c      	b.n	80062cc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d12b      	bne.n	8006282 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	2120      	movs	r1, #32
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f859 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e04f      	b.n	80062e4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625c:	b29a      	uxth	r2, r3
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	3302      	adds	r3, #2
 8006266:	60bb      	str	r3, [r7, #8]
 8006268:	e030      	b.n	80062cc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	b29b      	uxth	r3, r3
 8006272:	b2db      	uxtb	r3, r3
 8006274:	b29a      	uxth	r2, r3
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	3301      	adds	r3, #1
 800627e:	60bb      	str	r3, [r7, #8]
 8006280:	e024      	b.n	80062cc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	2120      	movs	r1, #32
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f82d 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e023      	b.n	80062e4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d108      	bne.n	80062b6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	60ba      	str	r2, [r7, #8]
 80062b0:	b2ca      	uxtb	r2, r1
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e00a      	b.n	80062cc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d19d      	bne.n	8006212 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fc:	e02c      	b.n	8006358 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d028      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <UART_WaitOnFlagUntilTimeout+0x30>
 800630c:	f7fc fcd8 	bl	8002cc0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	429a      	cmp	r2, r3
 800631a:	d21d      	bcs.n	8006358 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800632a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e00f      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	429a      	cmp	r2, r3
 8006374:	d0c3      	beq.n	80062fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063c2:	f023 030c 	bic.w	r3, r3, #12
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	430b      	orrs	r3, r1
 80063ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ee:	f040 818b 	bne.w	8006708 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4ac1      	ldr	r2, [pc, #772]	; (80066fc <UART_SetConfig+0x37c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d005      	beq.n	8006408 <UART_SetConfig+0x88>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4abf      	ldr	r2, [pc, #764]	; (8006700 <UART_SetConfig+0x380>)
 8006402:	4293      	cmp	r3, r2
 8006404:	f040 80bd 	bne.w	8006582 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006408:	f7fe fb1c 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 800640c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	461d      	mov	r5, r3
 8006412:	f04f 0600 	mov.w	r6, #0
 8006416:	46a8      	mov	r8, r5
 8006418:	46b1      	mov	r9, r6
 800641a:	eb18 0308 	adds.w	r3, r8, r8
 800641e:	eb49 0409 	adc.w	r4, r9, r9
 8006422:	4698      	mov	r8, r3
 8006424:	46a1      	mov	r9, r4
 8006426:	eb18 0805 	adds.w	r8, r8, r5
 800642a:	eb49 0906 	adc.w	r9, r9, r6
 800642e:	f04f 0100 	mov.w	r1, #0
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800643a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800643e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006442:	4688      	mov	r8, r1
 8006444:	4691      	mov	r9, r2
 8006446:	eb18 0005 	adds.w	r0, r8, r5
 800644a:	eb49 0106 	adc.w	r1, r9, r6
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	461d      	mov	r5, r3
 8006454:	f04f 0600 	mov.w	r6, #0
 8006458:	196b      	adds	r3, r5, r5
 800645a:	eb46 0406 	adc.w	r4, r6, r6
 800645e:	461a      	mov	r2, r3
 8006460:	4623      	mov	r3, r4
 8006462:	f7fa fb6d 	bl	8000b40 <__aeabi_uldivmod>
 8006466:	4603      	mov	r3, r0
 8006468:	460c      	mov	r4, r1
 800646a:	461a      	mov	r2, r3
 800646c:	4ba5      	ldr	r3, [pc, #660]	; (8006704 <UART_SetConfig+0x384>)
 800646e:	fba3 2302 	umull	r2, r3, r3, r2
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	461d      	mov	r5, r3
 800647c:	f04f 0600 	mov.w	r6, #0
 8006480:	46a9      	mov	r9, r5
 8006482:	46b2      	mov	sl, r6
 8006484:	eb19 0309 	adds.w	r3, r9, r9
 8006488:	eb4a 040a 	adc.w	r4, sl, sl
 800648c:	4699      	mov	r9, r3
 800648e:	46a2      	mov	sl, r4
 8006490:	eb19 0905 	adds.w	r9, r9, r5
 8006494:	eb4a 0a06 	adc.w	sl, sl, r6
 8006498:	f04f 0100 	mov.w	r1, #0
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ac:	4689      	mov	r9, r1
 80064ae:	4692      	mov	sl, r2
 80064b0:	eb19 0005 	adds.w	r0, r9, r5
 80064b4:	eb4a 0106 	adc.w	r1, sl, r6
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	461d      	mov	r5, r3
 80064be:	f04f 0600 	mov.w	r6, #0
 80064c2:	196b      	adds	r3, r5, r5
 80064c4:	eb46 0406 	adc.w	r4, r6, r6
 80064c8:	461a      	mov	r2, r3
 80064ca:	4623      	mov	r3, r4
 80064cc:	f7fa fb38 	bl	8000b40 <__aeabi_uldivmod>
 80064d0:	4603      	mov	r3, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	461a      	mov	r2, r3
 80064d6:	4b8b      	ldr	r3, [pc, #556]	; (8006704 <UART_SetConfig+0x384>)
 80064d8:	fba3 1302 	umull	r1, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	2164      	movs	r1, #100	; 0x64
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	3332      	adds	r3, #50	; 0x32
 80064ea:	4a86      	ldr	r2, [pc, #536]	; (8006704 <UART_SetConfig+0x384>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f8:	4498      	add	r8, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	461d      	mov	r5, r3
 80064fe:	f04f 0600 	mov.w	r6, #0
 8006502:	46a9      	mov	r9, r5
 8006504:	46b2      	mov	sl, r6
 8006506:	eb19 0309 	adds.w	r3, r9, r9
 800650a:	eb4a 040a 	adc.w	r4, sl, sl
 800650e:	4699      	mov	r9, r3
 8006510:	46a2      	mov	sl, r4
 8006512:	eb19 0905 	adds.w	r9, r9, r5
 8006516:	eb4a 0a06 	adc.w	sl, sl, r6
 800651a:	f04f 0100 	mov.w	r1, #0
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006526:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800652a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800652e:	4689      	mov	r9, r1
 8006530:	4692      	mov	sl, r2
 8006532:	eb19 0005 	adds.w	r0, r9, r5
 8006536:	eb4a 0106 	adc.w	r1, sl, r6
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	461d      	mov	r5, r3
 8006540:	f04f 0600 	mov.w	r6, #0
 8006544:	196b      	adds	r3, r5, r5
 8006546:	eb46 0406 	adc.w	r4, r6, r6
 800654a:	461a      	mov	r2, r3
 800654c:	4623      	mov	r3, r4
 800654e:	f7fa faf7 	bl	8000b40 <__aeabi_uldivmod>
 8006552:	4603      	mov	r3, r0
 8006554:	460c      	mov	r4, r1
 8006556:	461a      	mov	r2, r3
 8006558:	4b6a      	ldr	r3, [pc, #424]	; (8006704 <UART_SetConfig+0x384>)
 800655a:	fba3 1302 	umull	r1, r3, r3, r2
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	2164      	movs	r1, #100	; 0x64
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	3332      	adds	r3, #50	; 0x32
 800656c:	4a65      	ldr	r2, [pc, #404]	; (8006704 <UART_SetConfig+0x384>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	f003 0207 	and.w	r2, r3, #7
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4442      	add	r2, r8
 800657e:	609a      	str	r2, [r3, #8]
 8006580:	e26f      	b.n	8006a62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006582:	f7fe fa4b 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8006586:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	461d      	mov	r5, r3
 800658c:	f04f 0600 	mov.w	r6, #0
 8006590:	46a8      	mov	r8, r5
 8006592:	46b1      	mov	r9, r6
 8006594:	eb18 0308 	adds.w	r3, r8, r8
 8006598:	eb49 0409 	adc.w	r4, r9, r9
 800659c:	4698      	mov	r8, r3
 800659e:	46a1      	mov	r9, r4
 80065a0:	eb18 0805 	adds.w	r8, r8, r5
 80065a4:	eb49 0906 	adc.w	r9, r9, r6
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065bc:	4688      	mov	r8, r1
 80065be:	4691      	mov	r9, r2
 80065c0:	eb18 0005 	adds.w	r0, r8, r5
 80065c4:	eb49 0106 	adc.w	r1, r9, r6
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	461d      	mov	r5, r3
 80065ce:	f04f 0600 	mov.w	r6, #0
 80065d2:	196b      	adds	r3, r5, r5
 80065d4:	eb46 0406 	adc.w	r4, r6, r6
 80065d8:	461a      	mov	r2, r3
 80065da:	4623      	mov	r3, r4
 80065dc:	f7fa fab0 	bl	8000b40 <__aeabi_uldivmod>
 80065e0:	4603      	mov	r3, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	461a      	mov	r2, r3
 80065e6:	4b47      	ldr	r3, [pc, #284]	; (8006704 <UART_SetConfig+0x384>)
 80065e8:	fba3 2302 	umull	r2, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	461d      	mov	r5, r3
 80065f6:	f04f 0600 	mov.w	r6, #0
 80065fa:	46a9      	mov	r9, r5
 80065fc:	46b2      	mov	sl, r6
 80065fe:	eb19 0309 	adds.w	r3, r9, r9
 8006602:	eb4a 040a 	adc.w	r4, sl, sl
 8006606:	4699      	mov	r9, r3
 8006608:	46a2      	mov	sl, r4
 800660a:	eb19 0905 	adds.w	r9, r9, r5
 800660e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006612:	f04f 0100 	mov.w	r1, #0
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800661e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006622:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006626:	4689      	mov	r9, r1
 8006628:	4692      	mov	sl, r2
 800662a:	eb19 0005 	adds.w	r0, r9, r5
 800662e:	eb4a 0106 	adc.w	r1, sl, r6
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	461d      	mov	r5, r3
 8006638:	f04f 0600 	mov.w	r6, #0
 800663c:	196b      	adds	r3, r5, r5
 800663e:	eb46 0406 	adc.w	r4, r6, r6
 8006642:	461a      	mov	r2, r3
 8006644:	4623      	mov	r3, r4
 8006646:	f7fa fa7b 	bl	8000b40 <__aeabi_uldivmod>
 800664a:	4603      	mov	r3, r0
 800664c:	460c      	mov	r4, r1
 800664e:	461a      	mov	r2, r3
 8006650:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <UART_SetConfig+0x384>)
 8006652:	fba3 1302 	umull	r1, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	2164      	movs	r1, #100	; 0x64
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	3332      	adds	r3, #50	; 0x32
 8006664:	4a27      	ldr	r2, [pc, #156]	; (8006704 <UART_SetConfig+0x384>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006672:	4498      	add	r8, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	461d      	mov	r5, r3
 8006678:	f04f 0600 	mov.w	r6, #0
 800667c:	46a9      	mov	r9, r5
 800667e:	46b2      	mov	sl, r6
 8006680:	eb19 0309 	adds.w	r3, r9, r9
 8006684:	eb4a 040a 	adc.w	r4, sl, sl
 8006688:	4699      	mov	r9, r3
 800668a:	46a2      	mov	sl, r4
 800668c:	eb19 0905 	adds.w	r9, r9, r5
 8006690:	eb4a 0a06 	adc.w	sl, sl, r6
 8006694:	f04f 0100 	mov.w	r1, #0
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066a8:	4689      	mov	r9, r1
 80066aa:	4692      	mov	sl, r2
 80066ac:	eb19 0005 	adds.w	r0, r9, r5
 80066b0:	eb4a 0106 	adc.w	r1, sl, r6
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	461d      	mov	r5, r3
 80066ba:	f04f 0600 	mov.w	r6, #0
 80066be:	196b      	adds	r3, r5, r5
 80066c0:	eb46 0406 	adc.w	r4, r6, r6
 80066c4:	461a      	mov	r2, r3
 80066c6:	4623      	mov	r3, r4
 80066c8:	f7fa fa3a 	bl	8000b40 <__aeabi_uldivmod>
 80066cc:	4603      	mov	r3, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <UART_SetConfig+0x384>)
 80066d4:	fba3 1302 	umull	r1, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	2164      	movs	r1, #100	; 0x64
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	3332      	adds	r3, #50	; 0x32
 80066e6:	4a07      	ldr	r2, [pc, #28]	; (8006704 <UART_SetConfig+0x384>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	f003 0207 	and.w	r2, r3, #7
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4442      	add	r2, r8
 80066f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066fa:	e1b2      	b.n	8006a62 <UART_SetConfig+0x6e2>
 80066fc:	40011000 	.word	0x40011000
 8006700:	40011400 	.word	0x40011400
 8006704:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4ad7      	ldr	r2, [pc, #860]	; (8006a6c <UART_SetConfig+0x6ec>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d005      	beq.n	800671e <UART_SetConfig+0x39e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4ad6      	ldr	r2, [pc, #856]	; (8006a70 <UART_SetConfig+0x6f0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	f040 80d1 	bne.w	80068c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800671e:	f7fe f991 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8006722:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	469a      	mov	sl, r3
 8006728:	f04f 0b00 	mov.w	fp, #0
 800672c:	46d0      	mov	r8, sl
 800672e:	46d9      	mov	r9, fp
 8006730:	eb18 0308 	adds.w	r3, r8, r8
 8006734:	eb49 0409 	adc.w	r4, r9, r9
 8006738:	4698      	mov	r8, r3
 800673a:	46a1      	mov	r9, r4
 800673c:	eb18 080a 	adds.w	r8, r8, sl
 8006740:	eb49 090b 	adc.w	r9, r9, fp
 8006744:	f04f 0100 	mov.w	r1, #0
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006750:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006754:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006758:	4688      	mov	r8, r1
 800675a:	4691      	mov	r9, r2
 800675c:	eb1a 0508 	adds.w	r5, sl, r8
 8006760:	eb4b 0609 	adc.w	r6, fp, r9
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	f04f 0400 	mov.w	r4, #0
 8006776:	0094      	lsls	r4, r2, #2
 8006778:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800677c:	008b      	lsls	r3, r1, #2
 800677e:	461a      	mov	r2, r3
 8006780:	4623      	mov	r3, r4
 8006782:	4628      	mov	r0, r5
 8006784:	4631      	mov	r1, r6
 8006786:	f7fa f9db 	bl	8000b40 <__aeabi_uldivmod>
 800678a:	4603      	mov	r3, r0
 800678c:	460c      	mov	r4, r1
 800678e:	461a      	mov	r2, r3
 8006790:	4bb8      	ldr	r3, [pc, #736]	; (8006a74 <UART_SetConfig+0x6f4>)
 8006792:	fba3 2302 	umull	r2, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	469b      	mov	fp, r3
 80067a0:	f04f 0c00 	mov.w	ip, #0
 80067a4:	46d9      	mov	r9, fp
 80067a6:	46e2      	mov	sl, ip
 80067a8:	eb19 0309 	adds.w	r3, r9, r9
 80067ac:	eb4a 040a 	adc.w	r4, sl, sl
 80067b0:	4699      	mov	r9, r3
 80067b2:	46a2      	mov	sl, r4
 80067b4:	eb19 090b 	adds.w	r9, r9, fp
 80067b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067bc:	f04f 0100 	mov.w	r1, #0
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067d0:	4689      	mov	r9, r1
 80067d2:	4692      	mov	sl, r2
 80067d4:	eb1b 0509 	adds.w	r5, fp, r9
 80067d8:	eb4c 060a 	adc.w	r6, ip, sl
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4619      	mov	r1, r3
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f04f 0400 	mov.w	r4, #0
 80067ee:	0094      	lsls	r4, r2, #2
 80067f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067f4:	008b      	lsls	r3, r1, #2
 80067f6:	461a      	mov	r2, r3
 80067f8:	4623      	mov	r3, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	4631      	mov	r1, r6
 80067fe:	f7fa f99f 	bl	8000b40 <__aeabi_uldivmod>
 8006802:	4603      	mov	r3, r0
 8006804:	460c      	mov	r4, r1
 8006806:	461a      	mov	r2, r3
 8006808:	4b9a      	ldr	r3, [pc, #616]	; (8006a74 <UART_SetConfig+0x6f4>)
 800680a:	fba3 1302 	umull	r1, r3, r3, r2
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	2164      	movs	r1, #100	; 0x64
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	3332      	adds	r3, #50	; 0x32
 800681c:	4a95      	ldr	r2, [pc, #596]	; (8006a74 <UART_SetConfig+0x6f4>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006828:	4498      	add	r8, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	469b      	mov	fp, r3
 800682e:	f04f 0c00 	mov.w	ip, #0
 8006832:	46d9      	mov	r9, fp
 8006834:	46e2      	mov	sl, ip
 8006836:	eb19 0309 	adds.w	r3, r9, r9
 800683a:	eb4a 040a 	adc.w	r4, sl, sl
 800683e:	4699      	mov	r9, r3
 8006840:	46a2      	mov	sl, r4
 8006842:	eb19 090b 	adds.w	r9, r9, fp
 8006846:	eb4a 0a0c 	adc.w	sl, sl, ip
 800684a:	f04f 0100 	mov.w	r1, #0
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800685a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800685e:	4689      	mov	r9, r1
 8006860:	4692      	mov	sl, r2
 8006862:	eb1b 0509 	adds.w	r5, fp, r9
 8006866:	eb4c 060a 	adc.w	r6, ip, sl
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4619      	mov	r1, r3
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	f04f 0400 	mov.w	r4, #0
 800687c:	0094      	lsls	r4, r2, #2
 800687e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006882:	008b      	lsls	r3, r1, #2
 8006884:	461a      	mov	r2, r3
 8006886:	4623      	mov	r3, r4
 8006888:	4628      	mov	r0, r5
 800688a:	4631      	mov	r1, r6
 800688c:	f7fa f958 	bl	8000b40 <__aeabi_uldivmod>
 8006890:	4603      	mov	r3, r0
 8006892:	460c      	mov	r4, r1
 8006894:	461a      	mov	r2, r3
 8006896:	4b77      	ldr	r3, [pc, #476]	; (8006a74 <UART_SetConfig+0x6f4>)
 8006898:	fba3 1302 	umull	r1, r3, r3, r2
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	2164      	movs	r1, #100	; 0x64
 80068a0:	fb01 f303 	mul.w	r3, r1, r3
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	3332      	adds	r3, #50	; 0x32
 80068aa:	4a72      	ldr	r2, [pc, #456]	; (8006a74 <UART_SetConfig+0x6f4>)
 80068ac:	fba2 2303 	umull	r2, r3, r2, r3
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	f003 020f 	and.w	r2, r3, #15
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4442      	add	r2, r8
 80068bc:	609a      	str	r2, [r3, #8]
 80068be:	e0d0      	b.n	8006a62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fe f8ac 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 80068c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	469a      	mov	sl, r3
 80068ca:	f04f 0b00 	mov.w	fp, #0
 80068ce:	46d0      	mov	r8, sl
 80068d0:	46d9      	mov	r9, fp
 80068d2:	eb18 0308 	adds.w	r3, r8, r8
 80068d6:	eb49 0409 	adc.w	r4, r9, r9
 80068da:	4698      	mov	r8, r3
 80068dc:	46a1      	mov	r9, r4
 80068de:	eb18 080a 	adds.w	r8, r8, sl
 80068e2:	eb49 090b 	adc.w	r9, r9, fp
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068fa:	4688      	mov	r8, r1
 80068fc:	4691      	mov	r9, r2
 80068fe:	eb1a 0508 	adds.w	r5, sl, r8
 8006902:	eb4b 0609 	adc.w	r6, fp, r9
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4619      	mov	r1, r3
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	f04f 0400 	mov.w	r4, #0
 8006918:	0094      	lsls	r4, r2, #2
 800691a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800691e:	008b      	lsls	r3, r1, #2
 8006920:	461a      	mov	r2, r3
 8006922:	4623      	mov	r3, r4
 8006924:	4628      	mov	r0, r5
 8006926:	4631      	mov	r1, r6
 8006928:	f7fa f90a 	bl	8000b40 <__aeabi_uldivmod>
 800692c:	4603      	mov	r3, r0
 800692e:	460c      	mov	r4, r1
 8006930:	461a      	mov	r2, r3
 8006932:	4b50      	ldr	r3, [pc, #320]	; (8006a74 <UART_SetConfig+0x6f4>)
 8006934:	fba3 2302 	umull	r2, r3, r3, r2
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	469b      	mov	fp, r3
 8006942:	f04f 0c00 	mov.w	ip, #0
 8006946:	46d9      	mov	r9, fp
 8006948:	46e2      	mov	sl, ip
 800694a:	eb19 0309 	adds.w	r3, r9, r9
 800694e:	eb4a 040a 	adc.w	r4, sl, sl
 8006952:	4699      	mov	r9, r3
 8006954:	46a2      	mov	sl, r4
 8006956:	eb19 090b 	adds.w	r9, r9, fp
 800695a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800696a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800696e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006972:	4689      	mov	r9, r1
 8006974:	4692      	mov	sl, r2
 8006976:	eb1b 0509 	adds.w	r5, fp, r9
 800697a:	eb4c 060a 	adc.w	r6, ip, sl
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4619      	mov	r1, r3
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	0094      	lsls	r4, r2, #2
 8006992:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006996:	008b      	lsls	r3, r1, #2
 8006998:	461a      	mov	r2, r3
 800699a:	4623      	mov	r3, r4
 800699c:	4628      	mov	r0, r5
 800699e:	4631      	mov	r1, r6
 80069a0:	f7fa f8ce 	bl	8000b40 <__aeabi_uldivmod>
 80069a4:	4603      	mov	r3, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b32      	ldr	r3, [pc, #200]	; (8006a74 <UART_SetConfig+0x6f4>)
 80069ac:	fba3 1302 	umull	r1, r3, r3, r2
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	2164      	movs	r1, #100	; 0x64
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	3332      	adds	r3, #50	; 0x32
 80069be:	4a2d      	ldr	r2, [pc, #180]	; (8006a74 <UART_SetConfig+0x6f4>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ca:	4498      	add	r8, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	469b      	mov	fp, r3
 80069d0:	f04f 0c00 	mov.w	ip, #0
 80069d4:	46d9      	mov	r9, fp
 80069d6:	46e2      	mov	sl, ip
 80069d8:	eb19 0309 	adds.w	r3, r9, r9
 80069dc:	eb4a 040a 	adc.w	r4, sl, sl
 80069e0:	4699      	mov	r9, r3
 80069e2:	46a2      	mov	sl, r4
 80069e4:	eb19 090b 	adds.w	r9, r9, fp
 80069e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a00:	4689      	mov	r9, r1
 8006a02:	4692      	mov	sl, r2
 8006a04:	eb1b 0509 	adds.w	r5, fp, r9
 8006a08:	eb4c 060a 	adc.w	r6, ip, sl
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	f04f 0400 	mov.w	r4, #0
 8006a1e:	0094      	lsls	r4, r2, #2
 8006a20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a24:	008b      	lsls	r3, r1, #2
 8006a26:	461a      	mov	r2, r3
 8006a28:	4623      	mov	r3, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	f7fa f887 	bl	8000b40 <__aeabi_uldivmod>
 8006a32:	4603      	mov	r3, r0
 8006a34:	460c      	mov	r4, r1
 8006a36:	461a      	mov	r2, r3
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <UART_SetConfig+0x6f4>)
 8006a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2164      	movs	r1, #100	; 0x64
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	; 0x32
 8006a4c:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <UART_SetConfig+0x6f4>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4442      	add	r2, r8
 8006a5e:	609a      	str	r2, [r3, #8]
}
 8006a60:	e7ff      	b.n	8006a62 <UART_SetConfig+0x6e2>
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	40011000 	.word	0x40011000
 8006a70:	40011400 	.word	0x40011400
 8006a74:	51eb851f 	.word	0x51eb851f

08006a78 <__errno>:
 8006a78:	4b01      	ldr	r3, [pc, #4]	; (8006a80 <__errno+0x8>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000018 	.word	0x20000018

08006a84 <__libc_init_array>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4e0d      	ldr	r6, [pc, #52]	; (8006abc <__libc_init_array+0x38>)
 8006a88:	4c0d      	ldr	r4, [pc, #52]	; (8006ac0 <__libc_init_array+0x3c>)
 8006a8a:	1ba4      	subs	r4, r4, r6
 8006a8c:	10a4      	asrs	r4, r4, #2
 8006a8e:	2500      	movs	r5, #0
 8006a90:	42a5      	cmp	r5, r4
 8006a92:	d109      	bne.n	8006aa8 <__libc_init_array+0x24>
 8006a94:	4e0b      	ldr	r6, [pc, #44]	; (8006ac4 <__libc_init_array+0x40>)
 8006a96:	4c0c      	ldr	r4, [pc, #48]	; (8006ac8 <__libc_init_array+0x44>)
 8006a98:	f000 fad8 	bl	800704c <_init>
 8006a9c:	1ba4      	subs	r4, r4, r6
 8006a9e:	10a4      	asrs	r4, r4, #2
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	42a5      	cmp	r5, r4
 8006aa4:	d105      	bne.n	8006ab2 <__libc_init_array+0x2e>
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aac:	4798      	blx	r3
 8006aae:	3501      	adds	r5, #1
 8006ab0:	e7ee      	b.n	8006a90 <__libc_init_array+0xc>
 8006ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ab6:	4798      	blx	r3
 8006ab8:	3501      	adds	r5, #1
 8006aba:	e7f2      	b.n	8006aa2 <__libc_init_array+0x1e>
 8006abc:	080070d8 	.word	0x080070d8
 8006ac0:	080070d8 	.word	0x080070d8
 8006ac4:	080070d8 	.word	0x080070d8
 8006ac8:	080070dc 	.word	0x080070dc

08006acc <memset>:
 8006acc:	4402      	add	r2, r0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d100      	bne.n	8006ad6 <memset+0xa>
 8006ad4:	4770      	bx	lr
 8006ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ada:	e7f9      	b.n	8006ad0 <memset+0x4>
 8006adc:	0000      	movs	r0, r0
	...

08006ae0 <atan>:
 8006ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ec55 4b10 	vmov	r4, r5, d0
 8006ae8:	4bc3      	ldr	r3, [pc, #780]	; (8006df8 <atan+0x318>)
 8006aea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006aee:	429e      	cmp	r6, r3
 8006af0:	46ab      	mov	fp, r5
 8006af2:	dd18      	ble.n	8006b26 <atan+0x46>
 8006af4:	4bc1      	ldr	r3, [pc, #772]	; (8006dfc <atan+0x31c>)
 8006af6:	429e      	cmp	r6, r3
 8006af8:	dc01      	bgt.n	8006afe <atan+0x1e>
 8006afa:	d109      	bne.n	8006b10 <atan+0x30>
 8006afc:	b144      	cbz	r4, 8006b10 <atan+0x30>
 8006afe:	4622      	mov	r2, r4
 8006b00:	462b      	mov	r3, r5
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 fb65 	bl	80001d4 <__adddf3>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	e006      	b.n	8006b1e <atan+0x3e>
 8006b10:	f1bb 0f00 	cmp.w	fp, #0
 8006b14:	f340 8131 	ble.w	8006d7a <atan+0x29a>
 8006b18:	a59b      	add	r5, pc, #620	; (adr r5, 8006d88 <atan+0x2a8>)
 8006b1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b1e:	ec45 4b10 	vmov	d0, r4, r5
 8006b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	4bb6      	ldr	r3, [pc, #728]	; (8006e00 <atan+0x320>)
 8006b28:	429e      	cmp	r6, r3
 8006b2a:	dc14      	bgt.n	8006b56 <atan+0x76>
 8006b2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006b30:	429e      	cmp	r6, r3
 8006b32:	dc0d      	bgt.n	8006b50 <atan+0x70>
 8006b34:	a396      	add	r3, pc, #600	; (adr r3, 8006d90 <atan+0x2b0>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	ee10 0a10 	vmov	r0, s0
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f7f9 fb48 	bl	80001d4 <__adddf3>
 8006b44:	2200      	movs	r2, #0
 8006b46:	4baf      	ldr	r3, [pc, #700]	; (8006e04 <atan+0x324>)
 8006b48:	f7f9 ff8a 	bl	8000a60 <__aeabi_dcmpgt>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d1e6      	bne.n	8006b1e <atan+0x3e>
 8006b50:	f04f 3aff 	mov.w	sl, #4294967295
 8006b54:	e02b      	b.n	8006bae <atan+0xce>
 8006b56:	f000 f963 	bl	8006e20 <fabs>
 8006b5a:	4bab      	ldr	r3, [pc, #684]	; (8006e08 <atan+0x328>)
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	ec55 4b10 	vmov	r4, r5, d0
 8006b62:	f300 80bf 	bgt.w	8006ce4 <atan+0x204>
 8006b66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b6a:	429e      	cmp	r6, r3
 8006b6c:	f300 80a0 	bgt.w	8006cb0 <atan+0x1d0>
 8006b70:	ee10 2a10 	vmov	r2, s0
 8006b74:	ee10 0a10 	vmov	r0, s0
 8006b78:	462b      	mov	r3, r5
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fb2a 	bl	80001d4 <__adddf3>
 8006b80:	2200      	movs	r2, #0
 8006b82:	4ba0      	ldr	r3, [pc, #640]	; (8006e04 <atan+0x324>)
 8006b84:	f7f9 fb24 	bl	80001d0 <__aeabi_dsub>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fb1d 	bl	80001d4 <__adddf3>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	f7f9 fdf7 	bl	8000794 <__aeabi_ddiv>
 8006ba6:	f04f 0a00 	mov.w	sl, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	460d      	mov	r5, r1
 8006bae:	4622      	mov	r2, r4
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f7f9 fcc3 	bl	8000540 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	4689      	mov	r9, r1
 8006bc2:	f7f9 fcbd 	bl	8000540 <__aeabi_dmul>
 8006bc6:	a374      	add	r3, pc, #464	; (adr r3, 8006d98 <atan+0x2b8>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	f7f9 fcb6 	bl	8000540 <__aeabi_dmul>
 8006bd4:	a372      	add	r3, pc, #456	; (adr r3, 8006da0 <atan+0x2c0>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f7f9 fafb 	bl	80001d4 <__adddf3>
 8006bde:	4632      	mov	r2, r6
 8006be0:	463b      	mov	r3, r7
 8006be2:	f7f9 fcad 	bl	8000540 <__aeabi_dmul>
 8006be6:	a370      	add	r3, pc, #448	; (adr r3, 8006da8 <atan+0x2c8>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 faf2 	bl	80001d4 <__adddf3>
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	f7f9 fca4 	bl	8000540 <__aeabi_dmul>
 8006bf8:	a36d      	add	r3, pc, #436	; (adr r3, 8006db0 <atan+0x2d0>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fae9 	bl	80001d4 <__adddf3>
 8006c02:	4632      	mov	r2, r6
 8006c04:	463b      	mov	r3, r7
 8006c06:	f7f9 fc9b 	bl	8000540 <__aeabi_dmul>
 8006c0a:	a36b      	add	r3, pc, #428	; (adr r3, 8006db8 <atan+0x2d8>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fae0 	bl	80001d4 <__adddf3>
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	f7f9 fc92 	bl	8000540 <__aeabi_dmul>
 8006c1c:	a368      	add	r3, pc, #416	; (adr r3, 8006dc0 <atan+0x2e0>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 fad7 	bl	80001d4 <__adddf3>
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	f7f9 fc89 	bl	8000540 <__aeabi_dmul>
 8006c2e:	a366      	add	r3, pc, #408	; (adr r3, 8006dc8 <atan+0x2e8>)
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	4680      	mov	r8, r0
 8006c36:	4689      	mov	r9, r1
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 fc80 	bl	8000540 <__aeabi_dmul>
 8006c40:	a363      	add	r3, pc, #396	; (adr r3, 8006dd0 <atan+0x2f0>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 fac3 	bl	80001d0 <__aeabi_dsub>
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	f7f9 fc77 	bl	8000540 <__aeabi_dmul>
 8006c52:	a361      	add	r3, pc, #388	; (adr r3, 8006dd8 <atan+0x2f8>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 faba 	bl	80001d0 <__aeabi_dsub>
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	f7f9 fc6e 	bl	8000540 <__aeabi_dmul>
 8006c64:	a35e      	add	r3, pc, #376	; (adr r3, 8006de0 <atan+0x300>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fab1 	bl	80001d0 <__aeabi_dsub>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	463b      	mov	r3, r7
 8006c72:	f7f9 fc65 	bl	8000540 <__aeabi_dmul>
 8006c76:	a35c      	add	r3, pc, #368	; (adr r3, 8006de8 <atan+0x308>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 faa8 	bl	80001d0 <__aeabi_dsub>
 8006c80:	4632      	mov	r2, r6
 8006c82:	463b      	mov	r3, r7
 8006c84:	f7f9 fc5c 	bl	8000540 <__aeabi_dmul>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 faa0 	bl	80001d4 <__adddf3>
 8006c94:	4622      	mov	r2, r4
 8006c96:	462b      	mov	r3, r5
 8006c98:	f7f9 fc52 	bl	8000540 <__aeabi_dmul>
 8006c9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	d14b      	bne.n	8006d3e <atan+0x25e>
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 fa91 	bl	80001d0 <__aeabi_dsub>
 8006cae:	e72c      	b.n	8006b0a <atan+0x2a>
 8006cb0:	ee10 0a10 	vmov	r0, s0
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4b53      	ldr	r3, [pc, #332]	; (8006e04 <atan+0x324>)
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 fa89 	bl	80001d0 <__aeabi_dsub>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	4b4f      	ldr	r3, [pc, #316]	; (8006e04 <atan+0x324>)
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 fa83 	bl	80001d4 <__adddf3>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	f7f9 fd5d 	bl	8000794 <__aeabi_ddiv>
 8006cda:	f04f 0a01 	mov.w	sl, #1
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	e764      	b.n	8006bae <atan+0xce>
 8006ce4:	4b49      	ldr	r3, [pc, #292]	; (8006e0c <atan+0x32c>)
 8006ce6:	429e      	cmp	r6, r3
 8006ce8:	dc1d      	bgt.n	8006d26 <atan+0x246>
 8006cea:	ee10 0a10 	vmov	r0, s0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	4b47      	ldr	r3, [pc, #284]	; (8006e10 <atan+0x330>)
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7f9 fa6c 	bl	80001d0 <__aeabi_dsub>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	4b44      	ldr	r3, [pc, #272]	; (8006e10 <atan+0x330>)
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7f9 fc1c 	bl	8000540 <__aeabi_dmul>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b3e      	ldr	r3, [pc, #248]	; (8006e04 <atan+0x324>)
 8006d0c:	f7f9 fa62 	bl	80001d4 <__adddf3>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fd3c 	bl	8000794 <__aeabi_ddiv>
 8006d1c:	f04f 0a02 	mov.w	sl, #2
 8006d20:	4604      	mov	r4, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	e743      	b.n	8006bae <atan+0xce>
 8006d26:	462b      	mov	r3, r5
 8006d28:	ee10 2a10 	vmov	r2, s0
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	4939      	ldr	r1, [pc, #228]	; (8006e14 <atan+0x334>)
 8006d30:	f7f9 fd30 	bl	8000794 <__aeabi_ddiv>
 8006d34:	f04f 0a03 	mov.w	sl, #3
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	e737      	b.n	8006bae <atan+0xce>
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <atan+0x338>)
 8006d40:	4e36      	ldr	r6, [pc, #216]	; (8006e1c <atan+0x33c>)
 8006d42:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006d46:	4456      	add	r6, sl
 8006d48:	449a      	add	sl, r3
 8006d4a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d4e:	f7f9 fa3f 	bl	80001d0 <__aeabi_dsub>
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	f7f9 fa3b 	bl	80001d0 <__aeabi_dsub>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006d62:	f7f9 fa35 	bl	80001d0 <__aeabi_dsub>
 8006d66:	f1bb 0f00 	cmp.w	fp, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	f6bf aed6 	bge.w	8006b1e <atan+0x3e>
 8006d72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d76:	461d      	mov	r5, r3
 8006d78:	e6d1      	b.n	8006b1e <atan+0x3e>
 8006d7a:	a51d      	add	r5, pc, #116	; (adr r5, 8006df0 <atan+0x310>)
 8006d7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d80:	e6cd      	b.n	8006b1e <atan+0x3e>
 8006d82:	bf00      	nop
 8006d84:	f3af 8000 	nop.w
 8006d88:	54442d18 	.word	0x54442d18
 8006d8c:	3ff921fb 	.word	0x3ff921fb
 8006d90:	8800759c 	.word	0x8800759c
 8006d94:	7e37e43c 	.word	0x7e37e43c
 8006d98:	e322da11 	.word	0xe322da11
 8006d9c:	3f90ad3a 	.word	0x3f90ad3a
 8006da0:	24760deb 	.word	0x24760deb
 8006da4:	3fa97b4b 	.word	0x3fa97b4b
 8006da8:	a0d03d51 	.word	0xa0d03d51
 8006dac:	3fb10d66 	.word	0x3fb10d66
 8006db0:	c54c206e 	.word	0xc54c206e
 8006db4:	3fb745cd 	.word	0x3fb745cd
 8006db8:	920083ff 	.word	0x920083ff
 8006dbc:	3fc24924 	.word	0x3fc24924
 8006dc0:	5555550d 	.word	0x5555550d
 8006dc4:	3fd55555 	.word	0x3fd55555
 8006dc8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006dcc:	bfa2b444 	.word	0xbfa2b444
 8006dd0:	52defd9a 	.word	0x52defd9a
 8006dd4:	3fadde2d 	.word	0x3fadde2d
 8006dd8:	af749a6d 	.word	0xaf749a6d
 8006ddc:	3fb3b0f2 	.word	0x3fb3b0f2
 8006de0:	fe231671 	.word	0xfe231671
 8006de4:	3fbc71c6 	.word	0x3fbc71c6
 8006de8:	9998ebc4 	.word	0x9998ebc4
 8006dec:	3fc99999 	.word	0x3fc99999
 8006df0:	54442d18 	.word	0x54442d18
 8006df4:	bff921fb 	.word	0xbff921fb
 8006df8:	440fffff 	.word	0x440fffff
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	3fdbffff 	.word	0x3fdbffff
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	3ff2ffff 	.word	0x3ff2ffff
 8006e0c:	40037fff 	.word	0x40037fff
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	bff00000 	.word	0xbff00000
 8006e18:	080070a8 	.word	0x080070a8
 8006e1c:	08007088 	.word	0x08007088

08006e20 <fabs>:
 8006e20:	ec51 0b10 	vmov	r0, r1, d0
 8006e24:	ee10 2a10 	vmov	r2, s0
 8006e28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e2c:	ec43 2b10 	vmov	d0, r2, r3
 8006e30:	4770      	bx	lr
	...

08006e34 <sqrt>:
 8006e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e38:	ed2d 8b02 	vpush	{d8}
 8006e3c:	b08b      	sub	sp, #44	; 0x2c
 8006e3e:	ec55 4b10 	vmov	r4, r5, d0
 8006e42:	f000 f851 	bl	8006ee8 <__ieee754_sqrt>
 8006e46:	4b26      	ldr	r3, [pc, #152]	; (8006ee0 <sqrt+0xac>)
 8006e48:	eeb0 8a40 	vmov.f32	s16, s0
 8006e4c:	eef0 8a60 	vmov.f32	s17, s1
 8006e50:	f993 6000 	ldrsb.w	r6, [r3]
 8006e54:	1c73      	adds	r3, r6, #1
 8006e56:	d02a      	beq.n	8006eae <sqrt+0x7a>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 fe08 	bl	8000a74 <__aeabi_dcmpun>
 8006e64:	4607      	mov	r7, r0
 8006e66:	bb10      	cbnz	r0, 8006eae <sqrt+0x7a>
 8006e68:	f04f 0800 	mov.w	r8, #0
 8006e6c:	f04f 0900 	mov.w	r9, #0
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 fdd4 	bl	8000a24 <__aeabi_dcmplt>
 8006e7c:	b1b8      	cbz	r0, 8006eae <sqrt+0x7a>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <sqrt+0xb0>)
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	9708      	str	r7, [sp, #32]
 8006e88:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006e8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e90:	b9b6      	cbnz	r6, 8006ec0 <sqrt+0x8c>
 8006e92:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006e96:	4668      	mov	r0, sp
 8006e98:	f000 f8d6 	bl	8007048 <matherr>
 8006e9c:	b1d0      	cbz	r0, 8006ed4 <sqrt+0xa0>
 8006e9e:	9b08      	ldr	r3, [sp, #32]
 8006ea0:	b11b      	cbz	r3, 8006eaa <sqrt+0x76>
 8006ea2:	f7ff fde9 	bl	8006a78 <__errno>
 8006ea6:	9b08      	ldr	r3, [sp, #32]
 8006ea8:	6003      	str	r3, [r0, #0]
 8006eaa:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006eae:	eeb0 0a48 	vmov.f32	s0, s16
 8006eb2:	eef0 0a68 	vmov.f32	s1, s17
 8006eb6:	b00b      	add	sp, #44	; 0x2c
 8006eb8:	ecbd 8b02 	vpop	{d8}
 8006ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 fc64 	bl	8000794 <__aeabi_ddiv>
 8006ecc:	2e02      	cmp	r6, #2
 8006ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ed2:	d1e0      	bne.n	8006e96 <sqrt+0x62>
 8006ed4:	f7ff fdd0 	bl	8006a78 <__errno>
 8006ed8:	2321      	movs	r3, #33	; 0x21
 8006eda:	6003      	str	r3, [r0, #0]
 8006edc:	e7df      	b.n	8006e9e <sqrt+0x6a>
 8006ede:	bf00      	nop
 8006ee0:	2000007c 	.word	0x2000007c
 8006ee4:	080070c8 	.word	0x080070c8

08006ee8 <__ieee754_sqrt>:
 8006ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eec:	4955      	ldr	r1, [pc, #340]	; (8007044 <__ieee754_sqrt+0x15c>)
 8006eee:	ec55 4b10 	vmov	r4, r5, d0
 8006ef2:	43a9      	bics	r1, r5
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	d112      	bne.n	8006f20 <__ieee754_sqrt+0x38>
 8006efa:	ee10 2a10 	vmov	r2, s0
 8006efe:	ee10 0a10 	vmov	r0, s0
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 fb1c 	bl	8000540 <__aeabi_dmul>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 f960 	bl	80001d4 <__adddf3>
 8006f14:	4604      	mov	r4, r0
 8006f16:	460d      	mov	r5, r1
 8006f18:	ec45 4b10 	vmov	d0, r4, r5
 8006f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	ee10 0a10 	vmov	r0, s0
 8006f26:	4621      	mov	r1, r4
 8006f28:	dc0f      	bgt.n	8006f4a <__ieee754_sqrt+0x62>
 8006f2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006f2e:	4330      	orrs	r0, r6
 8006f30:	d0f2      	beq.n	8006f18 <__ieee754_sqrt+0x30>
 8006f32:	b155      	cbz	r5, 8006f4a <__ieee754_sqrt+0x62>
 8006f34:	ee10 2a10 	vmov	r2, s0
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 f948 	bl	80001d0 <__aeabi_dsub>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	f7f9 fc26 	bl	8000794 <__aeabi_ddiv>
 8006f48:	e7e4      	b.n	8006f14 <__ieee754_sqrt+0x2c>
 8006f4a:	151b      	asrs	r3, r3, #20
 8006f4c:	d073      	beq.n	8007036 <__ieee754_sqrt+0x14e>
 8006f4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006f52:	07dd      	lsls	r5, r3, #31
 8006f54:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006f58:	bf48      	it	mi
 8006f5a:	0fc8      	lsrmi	r0, r1, #31
 8006f5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f60:	bf44      	itt	mi
 8006f62:	0049      	lslmi	r1, r1, #1
 8006f64:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006f68:	2500      	movs	r5, #0
 8006f6a:	1058      	asrs	r0, r3, #1
 8006f6c:	0fcb      	lsrs	r3, r1, #31
 8006f6e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006f72:	0049      	lsls	r1, r1, #1
 8006f74:	2316      	movs	r3, #22
 8006f76:	462c      	mov	r4, r5
 8006f78:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006f7c:	19a7      	adds	r7, r4, r6
 8006f7e:	4297      	cmp	r7, r2
 8006f80:	bfde      	ittt	le
 8006f82:	19bc      	addle	r4, r7, r6
 8006f84:	1bd2      	suble	r2, r2, r7
 8006f86:	19ad      	addle	r5, r5, r6
 8006f88:	0fcf      	lsrs	r7, r1, #31
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006f90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f94:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f98:	d1f0      	bne.n	8006f7c <__ieee754_sqrt+0x94>
 8006f9a:	f04f 0c20 	mov.w	ip, #32
 8006f9e:	469e      	mov	lr, r3
 8006fa0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006fa4:	42a2      	cmp	r2, r4
 8006fa6:	eb06 070e 	add.w	r7, r6, lr
 8006faa:	dc02      	bgt.n	8006fb2 <__ieee754_sqrt+0xca>
 8006fac:	d112      	bne.n	8006fd4 <__ieee754_sqrt+0xec>
 8006fae:	428f      	cmp	r7, r1
 8006fb0:	d810      	bhi.n	8006fd4 <__ieee754_sqrt+0xec>
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	eb07 0e06 	add.w	lr, r7, r6
 8006fb8:	da42      	bge.n	8007040 <__ieee754_sqrt+0x158>
 8006fba:	f1be 0f00 	cmp.w	lr, #0
 8006fbe:	db3f      	blt.n	8007040 <__ieee754_sqrt+0x158>
 8006fc0:	f104 0801 	add.w	r8, r4, #1
 8006fc4:	1b12      	subs	r2, r2, r4
 8006fc6:	428f      	cmp	r7, r1
 8006fc8:	bf88      	it	hi
 8006fca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006fce:	1bc9      	subs	r1, r1, r7
 8006fd0:	4433      	add	r3, r6
 8006fd2:	4644      	mov	r4, r8
 8006fd4:	0052      	lsls	r2, r2, #1
 8006fd6:	f1bc 0c01 	subs.w	ip, ip, #1
 8006fda:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006fde:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006fe2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006fe6:	d1dd      	bne.n	8006fa4 <__ieee754_sqrt+0xbc>
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	d006      	beq.n	8006ffa <__ieee754_sqrt+0x112>
 8006fec:	1c5c      	adds	r4, r3, #1
 8006fee:	bf13      	iteet	ne
 8006ff0:	3301      	addne	r3, #1
 8006ff2:	3501      	addeq	r5, #1
 8006ff4:	4663      	moveq	r3, ip
 8006ff6:	f023 0301 	bicne.w	r3, r3, #1
 8006ffa:	106a      	asrs	r2, r5, #1
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	07e9      	lsls	r1, r5, #31
 8007000:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007004:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007008:	bf48      	it	mi
 800700a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800700e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007012:	461c      	mov	r4, r3
 8007014:	e780      	b.n	8006f18 <__ieee754_sqrt+0x30>
 8007016:	0aca      	lsrs	r2, r1, #11
 8007018:	3815      	subs	r0, #21
 800701a:	0549      	lsls	r1, r1, #21
 800701c:	2a00      	cmp	r2, #0
 800701e:	d0fa      	beq.n	8007016 <__ieee754_sqrt+0x12e>
 8007020:	02d6      	lsls	r6, r2, #11
 8007022:	d50a      	bpl.n	800703a <__ieee754_sqrt+0x152>
 8007024:	f1c3 0420 	rsb	r4, r3, #32
 8007028:	fa21 f404 	lsr.w	r4, r1, r4
 800702c:	1e5d      	subs	r5, r3, #1
 800702e:	4099      	lsls	r1, r3
 8007030:	4322      	orrs	r2, r4
 8007032:	1b43      	subs	r3, r0, r5
 8007034:	e78b      	b.n	8006f4e <__ieee754_sqrt+0x66>
 8007036:	4618      	mov	r0, r3
 8007038:	e7f0      	b.n	800701c <__ieee754_sqrt+0x134>
 800703a:	0052      	lsls	r2, r2, #1
 800703c:	3301      	adds	r3, #1
 800703e:	e7ef      	b.n	8007020 <__ieee754_sqrt+0x138>
 8007040:	46a0      	mov	r8, r4
 8007042:	e7bf      	b.n	8006fc4 <__ieee754_sqrt+0xdc>
 8007044:	7ff00000 	.word	0x7ff00000

08007048 <matherr>:
 8007048:	2000      	movs	r0, #0
 800704a:	4770      	bx	lr

0800704c <_init>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr

08007058 <_fini>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr
