
STM32F4_QUADCOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d0  080047d0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080047d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000018  080047f0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080047f0  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134d1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002148  00000000  00000000  00033519  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  00035668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00036560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c06  00000000  00000000  00037380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6c5  00000000  00000000  00058f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbf23  00000000  00000000  0006464b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013056e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f6c  00000000  00000000  001305ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004798 	.word	0x08004798

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004798 	.word	0x08004798

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <EnableTiming>:
* Description  : This function to enable time of watchdog timer.
* Arguments    : None
* Return Value : None
******************************************************************************/
void EnableTiming(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    static int enabled = 0;	// Variable to store previous data status of timer
	// Check if not enable will enable to start timer
    if (!enabled)
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <EnableTiming+0x44>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d116      	bne.n	8000502 <EnableTiming+0x3a>
    {
        *SCB_DEMCR = *SCB_DEMCR | 0x01000000;	// Stop check error
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <EnableTiming+0x48>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <EnableTiming+0x48>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004e2:	601a      	str	r2, [r3, #0]
        *DWT_CYCCNT = 0; 						// Reset the counter
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <EnableTiming+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
        *DWT_CONTROL = *DWT_CONTROL | 1 ; 		// enable the counter
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <EnableTiming+0x50>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <EnableTiming+0x50>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f042 0201 	orr.w	r2, r2, #1
 80004fa:	601a      	str	r2, [r3, #0]

        enabled = 1;
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <EnableTiming+0x44>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
    }
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20000034 	.word	0x20000034
 8000510:	20000008 	.word	0x20000008
 8000514:	20000000 	.word	0x20000000
 8000518:	20000004 	.word	0x20000004

0800051c <TimingDelay>:
* Description  : This function to delay with cycle of chip.
* Arguments    : Cycle want delay
* Return Value : None
******************************************************************************/
void TimingDelay(unsigned int tick)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    unsigned int start, current;

    start = *DWT_CYCCNT;				// Read first data of count timer
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <TimingDelay+0x30>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60fb      	str	r3, [r7, #12]

    do
    {
        current = *DWT_CYCCNT;			//Read current value
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <TimingDelay+0x30>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	60bb      	str	r3, [r7, #8]
    } while((current - start) < tick);	//Loop to true
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8f5      	bhi.n	800052c <TimingDelay+0x10>
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000000 	.word	0x20000000

08000550 <WaitAFewMillis>:
* Function Name: EnableTiming
* Description  : This function delay miliseconds.
* Arguments    : None
* Return Value : None
******************************************************************************/
void WaitAFewMillis(int16_t millis) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
	TimingDelay((168000000 / 1000) * millis);
 800055a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <WaitAFewMillis+0x24>)
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffd9 	bl	800051c <TimingDelay>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	00029040 	.word	0x00029040

08000578 <InitialisePWM>:
* Description  : This function initialize pwm.
* Arguments    : None
* Return Value : None
******************************************************************************/
void InitialisePWM()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* set all of the pulse values to 0% */
	channel1Pulse = 1000;
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <InitialisePWM+0x40>)
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <InitialisePWM+0x44>)
 8000580:	601a      	str	r2, [r3, #0]
	channel2Pulse = 1000;
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <InitialisePWM+0x48>)
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <InitialisePWM+0x44>)
 8000586:	601a      	str	r2, [r3, #0]
	channel3Pulse = 1000;
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <InitialisePWM+0x4c>)
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <InitialisePWM+0x44>)
 800058c:	601a      	str	r2, [r3, #0]
	channel4Pulse = 1000;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <InitialisePWM+0x50>)
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <InitialisePWM+0x44>)
 8000592:	601a      	str	r2, [r3, #0]
	// Initial for all channel of timer 3 using PWM
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <InitialisePWM+0x54>)
 8000598:	f002 fb0c 	bl	8002bb4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800059c:	2104      	movs	r1, #4
 800059e:	480b      	ldr	r0, [pc, #44]	; (80005cc <InitialisePWM+0x54>)
 80005a0:	f002 fb08 	bl	8002bb4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005a4:	2108      	movs	r1, #8
 80005a6:	4809      	ldr	r0, [pc, #36]	; (80005cc <InitialisePWM+0x54>)
 80005a8:	f002 fb04 	bl	8002bb4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005ac:	210c      	movs	r1, #12
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <InitialisePWM+0x54>)
 80005b0:	f002 fb00 	bl	8002bb4 <HAL_TIM_PWM_Start>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000108 	.word	0x20000108
 80005bc:	447a0000 	.word	0x447a0000
 80005c0:	2000011c 	.word	0x2000011c
 80005c4:	20000074 	.word	0x20000074
 80005c8:	20000104 	.word	0x20000104
 80005cc:	2000014c 	.word	0x2000014c

080005d0 <SetTim3Channel1>:
* Function Name: SetTim3Channel1
* Description  : This function set pulse to channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel1(float pulse) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 80005da:	edd7 7a01 	vldr	s15, [r7, #4]
 80005de:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000628 <SetTim3Channel1+0x58>
 80005e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ea:	da00      	bge.n	80005ee <SetTim3Channel1+0x1e>
		channel1Pulse = pulse;				// Update new data pulse of channel 1
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) pulse);		// Update value of capture/compare register 1
	}
}
 80005ec:	e015      	b.n	800061a <SetTim3Channel1+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 80005ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800062c <SetTim3Channel1+0x5c>
 80005f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fe:	d900      	bls.n	8000602 <SetTim3Channel1+0x32>
}
 8000600:	e00b      	b.n	800061a <SetTim3Channel1+0x4a>
		channel1Pulse = pulse;				// Update new data pulse of channel 1
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <SetTim3Channel1+0x60>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t) pulse);		// Update value of capture/compare register 1
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <SetTim3Channel1+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000614:	ee17 2a90 	vmov	r2, s15
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	447a0000 	.word	0x447a0000
 800062c:	44fa0000 	.word	0x44fa0000
 8000630:	20000108 	.word	0x20000108
 8000634:	2000014c 	.word	0x2000014c

08000638 <SetTim3Channel2>:
* Function Name: SetTim3Channel2
* Description  : This function set pulse to channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel2(float pulse) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8000642:	edd7 7a01 	vldr	s15, [r7, #4]
 8000646:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000690 <SetTim3Channel2+0x58>
 800064a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000652:	da00      	bge.n	8000656 <SetTim3Channel2+0x1e>
		channel2Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) pulse);
	}
}
 8000654:	e015      	b.n	8000682 <SetTim3Channel2+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8000656:	edd7 7a01 	vldr	s15, [r7, #4]
 800065a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000694 <SetTim3Channel2+0x5c>
 800065e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000666:	d900      	bls.n	800066a <SetTim3Channel2+0x32>
}
 8000668:	e00b      	b.n	8000682 <SetTim3Channel2+0x4a>
		channel2Pulse = pulse;
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <SetTim3Channel2+0x60>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (uint32_t) pulse);
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SetTim3Channel2+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	edd7 7a01 	vldr	s15, [r7, #4]
 8000678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067c:	ee17 2a90 	vmov	r2, s15
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	447a0000 	.word	0x447a0000
 8000694:	44fa0000 	.word	0x44fa0000
 8000698:	2000011c 	.word	0x2000011c
 800069c:	2000014c 	.word	0x2000014c

080006a0 <SetTim3Channel3>:
* Function Name: SetTim3Channel3
* Description  : This function set pulse to channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel3(float pulse) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 80006aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ae:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80006f8 <SetTim3Channel3+0x58>
 80006b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ba:	da00      	bge.n	80006be <SetTim3Channel3+0x1e>
		channel3Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) pulse);
	}
}
 80006bc:	e015      	b.n	80006ea <SetTim3Channel3+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 80006be:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80006fc <SetTim3Channel3+0x5c>
 80006c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ce:	d900      	bls.n	80006d2 <SetTim3Channel3+0x32>
}
 80006d0:	e00b      	b.n	80006ea <SetTim3Channel3+0x4a>
		channel3Pulse = pulse;
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <SetTim3Channel3+0x60>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t) pulse);
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <SetTim3Channel3+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80006e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e4:	ee17 2a90 	vmov	r2, s15
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	447a0000 	.word	0x447a0000
 80006fc:	44fa0000 	.word	0x44fa0000
 8000700:	20000074 	.word	0x20000074
 8000704:	2000014c 	.word	0x2000014c

08000708 <SetTim3Channel4>:
* Function Name: SetTim3Channel4
* Description  : This function set pulse to channel 4.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void SetTim3Channel4(float pulse) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pulse >= 1000 && pulse <= 2000) {
 8000712:	edd7 7a01 	vldr	s15, [r7, #4]
 8000716:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000760 <SetTim3Channel4+0x58>
 800071a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000722:	da00      	bge.n	8000726 <SetTim3Channel4+0x1e>
		channel4Pulse = pulse;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) pulse);
	}
}
 8000724:	e015      	b.n	8000752 <SetTim3Channel4+0x4a>
	if (pulse >= 1000 && pulse <= 2000) {
 8000726:	edd7 7a01 	vldr	s15, [r7, #4]
 800072a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000764 <SetTim3Channel4+0x5c>
 800072e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000736:	d900      	bls.n	800073a <SetTim3Channel4+0x32>
}
 8000738:	e00b      	b.n	8000752 <SetTim3Channel4+0x4a>
		channel4Pulse = pulse;
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <SetTim3Channel4+0x60>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (uint32_t) pulse);
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <SetTim3Channel4+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	edd7 7a01 	vldr	s15, [r7, #4]
 8000748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074c:	ee17 2a90 	vmov	r2, s15
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	447a0000 	.word	0x447a0000
 8000764:	44fa0000 	.word	0x44fa0000
 8000768:	20000104 	.word	0x20000104
 800076c:	2000014c 	.word	0x2000014c

08000770 <UpdateTim3Channel1>:
* Function Name: UpdateTim3Channel1
* Description  : This function update pulse of channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel1(float pulse) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel1(channel1Pulse + pulse);
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <UpdateTim3Channel1+0x28>)
 800077c:	ed93 7a00 	vldr	s14, [r3]
 8000780:	edd7 7a01 	vldr	s15, [r7, #4]
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	eeb0 0a67 	vmov.f32	s0, s15
 800078c:	f7ff ff20 	bl	80005d0 <SetTim3Channel1>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000108 	.word	0x20000108

0800079c <UpdateTim3Channel2>:
* Function Name: UpdateTim3Channel2
* Description  : This function update pulse of channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel2(float pulse) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel2(channel2Pulse + pulse);
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <UpdateTim3Channel2+0x28>)
 80007a8:	ed93 7a00 	vldr	s14, [r3]
 80007ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b4:	eeb0 0a67 	vmov.f32	s0, s15
 80007b8:	f7ff ff3e 	bl	8000638 <SetTim3Channel2>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000011c 	.word	0x2000011c

080007c8 <UpdateTim3Channel3>:
* Function Name: UpdateTim3Channel3
* Description  : This function update pulse of channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel3(float pulse) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel3(channel3Pulse + pulse);
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <UpdateTim3Channel3+0x28>)
 80007d4:	ed93 7a00 	vldr	s14, [r3]
 80007d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80007dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e0:	eeb0 0a67 	vmov.f32	s0, s15
 80007e4:	f7ff ff5c 	bl	80006a0 <SetTim3Channel3>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000074 	.word	0x20000074

080007f4 <UpdateTim3Channel4>:
* Function Name: UpdateTim3Channel4
* Description  : This function update pulse of channel 4.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
void UpdateTim3Channel4(float pulse) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	ed87 0a01 	vstr	s0, [r7, #4]
	SetTim3Channel4(channel4Pulse + pulse);
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <UpdateTim3Channel4+0x28>)
 8000800:	ed93 7a00 	vldr	s14, [r3]
 8000804:	edd7 7a01 	vldr	s15, [r7, #4]
 8000808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800080c:	eeb0 0a67 	vmov.f32	s0, s15
 8000810:	f7ff ff7a 	bl	8000708 <SetTim3Channel4>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000104 	.word	0x20000104

08000820 <ReadTim3Channel1Pulse>:
* Function Name: ReadTim3Channel1Pulse
* Description  : This function read current value pulse channel 1.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel1Pulse() {
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	return channel1Pulse;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <ReadTim3Channel1Pulse+0x18>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	ee07 3a90 	vmov	s15, r3
}
 800082c:	eeb0 0a67 	vmov.f32	s0, s15
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000108 	.word	0x20000108

0800083c <ReadTim3Channel2Pulse>:
* Function Name: ReadTim3Channel2Pulse
* Description  : This function read current value pulse channel 2.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel2Pulse() {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	return channel2Pulse;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <ReadTim3Channel2Pulse+0x18>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	ee07 3a90 	vmov	s15, r3
}
 8000848:	eeb0 0a67 	vmov.f32	s0, s15
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000011c 	.word	0x2000011c

08000858 <ReadTim3Channel3Pulse>:
* Function Name: ReadTim3Channel3Pulse
* Description  : This function read current value pulse channel 3.
* Arguments    : Pulse
* Return Value : None
******************************************************************************/
float ReadTim3Channel3Pulse() {
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	return channel3Pulse;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <ReadTim3Channel3Pulse+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	ee07 3a90 	vmov	s15, r3
}
 8000864:	eeb0 0a67 	vmov.f32	s0, s15
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000074 	.word	0x20000074

08000874 <ReadTim3Channel4Pulse>:
* Description  : This function read current value pulse channel 4.
* Arguments    : Pulse
* Return Value : None

******************************************************************************/
float ReadTim3Channel4Pulse() {
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	return channel4Pulse;
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <ReadTim3Channel4Pulse+0x18>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	ee07 3a90 	vmov	s15, r3
}
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	20000104 	.word	0x20000104

08000890 <InitialisePWMChannel>:
* Description  : This function to initialize pwm channel.
* Arguments    : GPIO, pin, pinsource, channel.
* Return Value : Structure DutyCycle.
******************************************************************************/
DutyCycle InitialisePWMChannel(uint8_t channel)
{
 8000890:	b490      	push	{r4, r7}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
    struct DutyCycle dutyCycle;

    if (channel == 1) {
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d106      	bne.n	80008b0 <InitialisePWMChannel+0x20>
    	dutyCycle.set = &SetTim3Channel1;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <InitialisePWMChannel+0x74>)
 80008a4:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel1;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <InitialisePWMChannel+0x78>)
 80008a8:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel1Pulse;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <InitialisePWMChannel+0x7c>)
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e01c      	b.n	80008ea <InitialisePWMChannel+0x5a>
    } else if (channel == 2) {
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d106      	bne.n	80008c4 <InitialisePWMChannel+0x34>
    	dutyCycle.set = &SetTim3Channel2;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <InitialisePWMChannel+0x80>)
 80008b8:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel2;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <InitialisePWMChannel+0x84>)
 80008bc:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel2Pulse;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <InitialisePWMChannel+0x88>)
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e012      	b.n	80008ea <InitialisePWMChannel+0x5a>
    } else if (channel == 3) {
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d106      	bne.n	80008d8 <InitialisePWMChannel+0x48>
    	dutyCycle.set = &SetTim3Channel3;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <InitialisePWMChannel+0x8c>)
 80008cc:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel3;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <InitialisePWMChannel+0x90>)
 80008d0:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel3Pulse;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <InitialisePWMChannel+0x94>)
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e008      	b.n	80008ea <InitialisePWMChannel+0x5a>
    } else if (channel == 4) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d105      	bne.n	80008ea <InitialisePWMChannel+0x5a>
    	dutyCycle.set = &SetTim3Channel4;
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <InitialisePWMChannel+0x98>)
 80008e0:	60fb      	str	r3, [r7, #12]
        dutyCycle.update = &UpdateTim3Channel4;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <InitialisePWMChannel+0x9c>)
 80008e4:	613b      	str	r3, [r7, #16]
        dutyCycle.get = &ReadTim3Channel4Pulse;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <InitialisePWMChannel+0xa0>)
 80008e8:	617b      	str	r3, [r7, #20]
    }

    // note that this will be copied - probably better off using a reference.
    return dutyCycle;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	461c      	mov	r4, r3
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	080005d1 	.word	0x080005d1
 8000908:	08000771 	.word	0x08000771
 800090c:	08000821 	.word	0x08000821
 8000910:	08000639 	.word	0x08000639
 8000914:	0800079d 	.word	0x0800079d
 8000918:	0800083d 	.word	0x0800083d
 800091c:	080006a1 	.word	0x080006a1
 8000920:	080007c9 	.word	0x080007c9
 8000924:	08000859 	.word	0x08000859
 8000928:	08000709 	.word	0x08000709
 800092c:	080007f5 	.word	0x080007f5
 8000930:	08000875 	.word	0x08000875

08000934 <HAL_TIM_IC_CaptureCallback>:
void InitialisePWM();
DutyCycle InitialisePWMChannel(uint8_t channel);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	uint32_t IC1Value = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
	uint32_t IC2Value = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
	float updatedDutyCycle = 0;
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	float updatedFrequency = 0;
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7f1b      	ldrb	r3, [r3, #28]
 8000954:	2b01      	cmp	r3, #1
 8000956:	f040 808e 	bne.w	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
	{
		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f002 fd69 	bl	8003434 <HAL_TIM_ReadCapturedValue>
 8000962:	6178      	str	r0, [r7, #20]
		if(IC1Value!=0)
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 8085 	beq.w	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
		{
			IC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800096c:	2104      	movs	r1, #4
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f002 fd60 	bl	8003434 <HAL_TIM_ReadCapturedValue>
 8000974:	6138      	str	r0, [r7, #16]
			updatedDutyCycle = ((IC2Value*100.0f)/IC1Value);
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000980:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000a7c <HAL_TIM_IC_CaptureCallback+0x148>
 8000984:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]
			updatedFrequency = ((2*HAL_RCC_GetPCLK1Freq())/(IC1Value*1000));
 800099a:	f002 f883 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005a      	lsls	r2, r3, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a8:	fb01 f303 	mul.w	r3, r1, r3
 80009ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b8:	edc7 7a02 	vstr	s15, [r7, #8]
			/* eliminate noise that is more than twice the previous duty cycle */
			if (isnan(updatedDutyCycle)
 80009bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80009c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	d652      	bvs.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x140>
				|| isnan(updatedFrequency)
 80009ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80009d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	d649      	bvs.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x140>
				|| updatedDutyCycle <= 0.0
 80009e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	d942      	bls.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x140>
				|| updatedFrequency <= 0.0
 80009ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80009f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fa:	d93b      	bls.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x140>
				|| IC1Value == IC2Value){
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d037      	beq.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x140>
				return;
			}
			if (htim->Instance == htim4.Instance){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d106      	bne.n	8000a1e <HAL_TIM_IC_CaptureCallback+0xea>
				pwmInputTimer4.dutyCycle = updatedDutyCycle;
 8000a10:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6013      	str	r3, [r2, #0]
				pwmInputTimer4.frequency = updatedFrequency;
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	6053      	str	r3, [r2, #4]
 8000a1c:	e02b      	b.n	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
			}
			else if (htim->Instance == htim5.Instance){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d106      	bne.n	8000a38 <HAL_TIM_IC_CaptureCallback+0x104>
				pwmInputTimer5.dutyCycle = updatedDutyCycle;
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6013      	str	r3, [r2, #0]
				pwmInputTimer5.frequency = updatedFrequency;
 8000a30:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	6053      	str	r3, [r2, #4]
 8000a36:	e01e      	b.n	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
			}
			else if (htim->Instance == htim9.Instance){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d10a      	bne.n	8000a5a <HAL_TIM_IC_CaptureCallback+0x126>
				pwmInputTimer9.dutyCycle = updatedDutyCycle;
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6013      	str	r3, [r2, #0]
				pwmInputTimer9.frequency = updatedFrequency*2;
 8000a4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a54:	edc3 7a01 	vstr	s15, [r3, #4]
 8000a58:	e00d      	b.n	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
			}
			else if (htim->Instance == htim12.Instance){
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d107      	bne.n	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
				pwmInputTimer12.dutyCycle = updatedDutyCycle;
 8000a66:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x168>)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6013      	str	r3, [r2, #0]
				pwmInputTimer12.frequency = updatedFrequency;
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x168>)
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	6053      	str	r3, [r2, #4]
 8000a72:	e000      	b.n	8000a76 <HAL_TIM_IC_CaptureCallback+0x142>
				return;
 8000a74:	bf00      	nop
		else
		{
			/* Do nothing */
		}
	}
}
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	42c80000 	.word	0x42c80000
 8000a80:	2000018c 	.word	0x2000018c
 8000a84:	20000068 	.word	0x20000068
 8000a88:	200001cc 	.word	0x200001cc
 8000a8c:	200000e8 	.word	0x200000e8
 8000a90:	2000020c 	.word	0x2000020c
 8000a94:	200000cc 	.word	0x200000cc
 8000a98:	200002cc 	.word	0x200002cc
 8000a9c:	20000110 	.word	0x20000110

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f000 ff53 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aaa:	f000 f84b 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f000 fbdf 	bl	8001270 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ab2:	f000 f8b1 	bl	8000c18 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ab6:	f000 f8dd 	bl	8000c74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aba:	f000 f927 	bl	8000d0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000abe:	f000 f9bd 	bl	8000e3c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ac2:	f000 fa41 	bl	8000f48 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000ac6:	f000 fac5 	bl	8001054 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000aca:	f000 fb35 	bl	8001138 <MX_TIM12_Init>
  MX_UART4_Init();
 8000ace:	f000 fba5 	bl	800121c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <main+0x88>)
 8000ad6:	f002 f8e1 	bl	8002c9c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000ada:	2100      	movs	r1, #0
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <main+0x8c>)
 8000ade:	f002 f8dd 	bl	8002c9c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <main+0x90>)
 8000ae6:	f002 f8d9 	bl	8002c9c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8000aea:	2100      	movs	r1, #0
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <main+0x94>)
 8000aee:	f002 f8d5 	bl	8002c9c <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000af2:	210c      	movs	r1, #12
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <main+0x98>)
 8000af6:	f002 f85d 	bl	8002bb4 <HAL_TIM_PWM_Start>
  DutyCycle bProp = InitialisePWMChannel(4);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2104      	movs	r1, #4
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fec6 	bl	8000890 <InitialisePWMChannel>
  /* USER CODE END 2 */
  bProp.set(1000);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000b3c <main+0x9c>
 8000b0a:	4798      	blx	r3
  InitialisePWM();
 8000b0c:	f7ff fd34 	bl	8000578 <InitialisePWM>
  // Enable timing
  EnableTiming();
 8000b10:	f7ff fcda 	bl	80004c8 <EnableTiming>
  // Wait 1s to initialize ESC
  WaitAFewMillis(500);
 8000b14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b18:	f7ff fd1a 	bl	8000550 <WaitAFewMillis>
  bProp.set(1200);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000b40 <main+0xa0>
 8000b22:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <main+0x84>
 8000b26:	bf00      	nop
 8000b28:	2000018c 	.word	0x2000018c
 8000b2c:	200001cc 	.word	0x200001cc
 8000b30:	2000020c 	.word	0x2000020c
 8000b34:	200002cc 	.word	0x200002cc
 8000b38:	2000014c 	.word	0x2000014c
 8000b3c:	447a0000 	.word	0x447a0000
 8000b40:	44960000 	.word	0x44960000

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fe18 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a27      	ldr	r2, [pc, #156]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <SystemClock_Config+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <SystemClock_Config+0xd0>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <SystemClock_Config+0xd0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb8:	23a8      	movs	r3, #168	; 0xa8
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fb31 	bl	8002230 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd4:	f000 fbc8 	bl	8001368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fd8a 	bl	8002710 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c02:	f000 fbb1 	bl	8001368 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	; 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <MX_I2C1_Init+0x54>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_I2C1_Init+0x58>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_I2C1_Init+0x50>)
 8000c56:	f001 f9b3 	bl	8001fc0 <HAL_I2C_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 fb82 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000078 	.word	0x20000078
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	00061a80 	.word	0x00061a80

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000c9a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000ca8:	2209      	movs	r2, #9
 8000caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cba:	f001 ff1b 	bl	8002af4 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc4:	f000 fb50 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cd6:	f002 fab3 	bl	8003240 <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 fb42 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cf2:	f003 f8cb 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 fb34 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000028c 	.word	0x2000028c

08000d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3c:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <MX_TIM3_Init+0x12c>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d44:	2253      	movs	r2, #83	; 0x53
 8000d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d50:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d62:	4834      	ldr	r0, [pc, #208]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d64:	f001 fec6 	bl	8002af4 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d6e:	f000 fafb 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482d      	ldr	r0, [pc, #180]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d80:	f002 fa5e 	bl	8003240 <HAL_TIM_ConfigClockSource>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d8a:	f000 faed 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d8e:	4829      	ldr	r0, [pc, #164]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000d90:	f001 fedb 	bl	8002b4a <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d9a:	f000 fae5 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	4619      	mov	r1, r3
 8000dac:	4821      	ldr	r0, [pc, #132]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000dae:	f003 f86d 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000db8:	f000 fad6 	bl	8001368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000dd6:	f002 f96d 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000de0:	f000 fac2 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000dec:	f002 f962 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000df6:	f000 fab7 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000e02:	f002 f957 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000e0c:	f000 faac 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000e18:	f002 f94c 	bl	80030b4 <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000e22:	f000 faa1 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_TIM3_Init+0x128>)
 8000e28:	f000 fc50 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000e2c:	bf00      	nop
 8000e2e:	3738      	adds	r7, #56	; 0x38
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000014c 	.word	0x2000014c
 8000e38:	40000400 	.word	0x40000400

08000e3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e6a:	4a36      	ldr	r2, [pc, #216]	; (8000f44 <MX_TIM4_Init+0x108>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e90:	482b      	ldr	r0, [pc, #172]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000e92:	f001 fe2f 	bl	8002af4 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000e9c:	f000 fa64 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ea0:	4827      	ldr	r0, [pc, #156]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000ea2:	f001 fec5 	bl	8002c30 <HAL_TIM_IC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000eac:	f000 fa5c 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000eb4:	2350      	movs	r3, #80	; 0x50
 8000eb6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481e      	ldr	r0, [pc, #120]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000ec8:	f002 fa71 	bl	80033ae <HAL_TIM_SlaveConfigSynchro>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000ed2:	f000 fa49 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4816      	ldr	r0, [pc, #88]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000ee6:	f002 ffd1 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000ef0:	f000 fa3a 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000f0c:	f002 f836 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000f16:	f000 fa27 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2204      	movs	r2, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_TIM4_Init+0x104>)
 8000f2a:	f002 f827 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8000f34:	f000 fa18 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3730      	adds	r7, #48	; 0x30
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000018c 	.word	0x2000018c
 8000f44:	40000800 	.word	0x40000800

08000f48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_TIM5_Init+0x104>)
 8000f76:	4a36      	ldr	r2, [pc, #216]	; (8001050 <MX_TIM5_Init+0x108>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <MX_TIM5_Init+0x104>)
 8000f7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_TIM5_Init+0x104>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_TIM5_Init+0x104>)
 8000f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <MX_TIM5_Init+0x104>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <MX_TIM5_Init+0x104>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f9c:	482b      	ldr	r0, [pc, #172]	; (800104c <MX_TIM5_Init+0x104>)
 8000f9e:	f001 fda9 	bl	8002af4 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000fa8:	f000 f9de 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_TIM5_Init+0x104>)
 8000fae:	f001 fe3f 	bl	8002c30 <HAL_TIM_IC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000fb8:	f000 f9d6 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000fc0:	2350      	movs	r3, #80	; 0x50
 8000fc2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481e      	ldr	r0, [pc, #120]	; (800104c <MX_TIM5_Init+0x104>)
 8000fd4:	f002 f9eb 	bl	80033ae <HAL_TIM_SlaveConfigSynchro>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000fde:	f000 f9c3 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4816      	ldr	r0, [pc, #88]	; (800104c <MX_TIM5_Init+0x104>)
 8000ff2:	f002 ff4b 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM5_Init+0xb8>
  {
    Error_Handler();
 8000ffc:	f000 f9b4 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001004:	2301      	movs	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_TIM5_Init+0x104>)
 8001018:	f001 ffb0 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8001022:	f000 f9a1 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001026:	2302      	movs	r3, #2
 8001028:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800102a:	2302      	movs	r3, #2
 800102c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2204      	movs	r2, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_TIM5_Init+0x104>)
 8001036:	f001 ffa1 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM5_Init+0xfc>
  {
    Error_Handler();
 8001040:	f000 f992 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3730      	adds	r7, #48	; 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001cc 	.word	0x200001cc
 8001050:	40000c00 	.word	0x40000c00

08001054 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_TIM9_Init+0xdc>)
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <MX_TIM9_Init+0xe0>)
 800107a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 999;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_TIM9_Init+0xdc>)
 800107e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001082:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <MX_TIM9_Init+0xdc>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xffff;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_TIM9_Init+0xdc>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <MX_TIM9_Init+0xdc>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_TIM9_Init+0xdc>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800109e:	4824      	ldr	r0, [pc, #144]	; (8001130 <MX_TIM9_Init+0xdc>)
 80010a0:	f001 fd28 	bl	8002af4 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80010aa:	f000 f95d 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80010ae:	4820      	ldr	r0, [pc, #128]	; (8001130 <MX_TIM9_Init+0xdc>)
 80010b0:	f001 fdbe 	bl	8002c30 <HAL_TIM_IC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM9_Init+0x6a>
  {
    Error_Handler();
 80010ba:	f000 f955 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010c2:	2350      	movs	r3, #80	; 0x50
 80010c4:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4816      	ldr	r0, [pc, #88]	; (8001130 <MX_TIM9_Init+0xdc>)
 80010d6:	f002 f96a 	bl	80033ae <HAL_TIM_SlaveConfigSynchro>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM9_Init+0x90>
  {
    Error_Handler();
 80010e0:	f000 f942 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_TIM9_Init+0xdc>)
 80010fc:	f001 ff3e 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM9_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 f92f 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800110a:	2302      	movs	r3, #2
 800110c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800110e:	2302      	movs	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM9_Init+0xdc>)
 800111a:	f001 ff2f 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM9_Init+0xd4>
  {
    Error_Handler();
 8001124:	f000 f920 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000020c 	.word	0x2000020c
 8001134:	40014000 	.word	0x40014000

08001138 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <MX_TIM12_Init+0xdc>)
 800115c:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <MX_TIM12_Init+0xe0>)
 800115e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 999;
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_TIM12_Init+0xdc>)
 8001162:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001166:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM12_Init+0xdc>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_TIM12_Init+0xdc>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_TIM12_Init+0xdc>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MX_TIM12_Init+0xdc>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001182:	4824      	ldr	r0, [pc, #144]	; (8001214 <MX_TIM12_Init+0xdc>)
 8001184:	f001 fcb6 	bl	8002af4 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800118e:	f000 f8eb 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001192:	4820      	ldr	r0, [pc, #128]	; (8001214 <MX_TIM12_Init+0xdc>)
 8001194:	f001 fd4c 	bl	8002c30 <HAL_TIM_IC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM12_Init+0x6a>
  {
    Error_Handler();
 800119e:	f000 f8e3 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011a2:	2304      	movs	r3, #4
 80011a4:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011a6:	2350      	movs	r3, #80	; 0x50
 80011a8:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerFilter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <MX_TIM12_Init+0xdc>)
 80011ba:	f002 f8f8 	bl	80033ae <HAL_TIM_SlaveConfigSynchro>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM12_Init+0x90>
  {
    Error_Handler();
 80011c4:	f000 f8d0 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM12_Init+0xdc>)
 80011e0:	f001 fecc 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM12_Init+0xb6>
  {
    Error_Handler();
 80011ea:	f000 f8bd 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011ee:	2302      	movs	r3, #2
 80011f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2204      	movs	r2, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_TIM12_Init+0xdc>)
 80011fe:	f001 febd 	bl	8002f7c <HAL_TIM_IC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM12_Init+0xd4>
  {
    Error_Handler();
 8001208:	f000 f8ae 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002cc 	.word	0x200002cc
 8001218:	40001800 	.word	0x40001800

0800121c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_UART4_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_UART4_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_UART4_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_UART4_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_UART4_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_UART4_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_UART4_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_UART4_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_UART4_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_UART4_Init+0x4c>)
 8001254:	f002 feaa 	bl	8003fac <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f883 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000024c 	.word	0x2000024c
 800126c:	40004c00 	.word	0x40004c00

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <MX_GPIO_Init+0xf0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a34      	ldr	r2, [pc, #208]	; (8001360 <MX_GPIO_Init+0xf0>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <MX_GPIO_Init+0xf0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a26      	ldr	r2, [pc, #152]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_GPIO_Init+0xf0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <MX_GPIO_Init+0xf0>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_GPIO_Init+0xf0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_GPIO_Init+0xf0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <MX_GPIO_Init+0xf0>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_GPIO_Init+0xf0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0xf4>)
 8001336:	f000 fe29 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800133a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0xf4>)
 8001354:	f000 fc80 	bl	8001c58 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	; 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020c00 	.word	0x40020c00

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_MspInit+0x4c>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_MspInit+0x4c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_MspInit+0x4c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_I2C_MspInit+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12c      	bne.n	8001444 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_I2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <HAL_I2C_MspInit+0x8c>)
 8001424:	f000 fc18 	bl	8001c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_I2C_MspInit+0x88>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_I2C_MspInit+0x88>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_I2C_MspInit+0x88>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40005400 	.word	0x40005400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <HAL_TIM_Base_MspInit>:
/**
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
 8001458:	b580      	push	{r7, lr}
 800145a:	b092      	sub	sp, #72	; 0x48
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
 8001460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
{
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d116      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0x50>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a89      	ldr	r2, [pc, #548]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
 8001494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	201c      	movs	r0, #28
 800149c:	f000 fba5 	bl	8001bea <HAL_NVIC_SetPriority>
    /* TIM2 interrupt Init */
 80014a0:	201c      	movs	r0, #28
 80014a2:	f000 fbbe 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
 80014a6:	e0fb      	b.n	80016a0 <HAL_TIM_Base_MspInit+0x248>
  /* USER CODE END TIM2_MspInit 1 */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a7f      	ldr	r2, [pc, #508]	; (80016ac <HAL_TIM_Base_MspInit+0x254>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10e      	bne.n	80014d0 <HAL_TIM_Base_MspInit+0x78>
  /* USER CODE END TIM3_MspInit 0 */
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b79      	ldr	r3, [pc, #484]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  }
 80014ce:	e0e7      	b.n	80016a0 <HAL_TIM_Base_MspInit+0x248>
  /* USER CODE END TIM3_MspInit 1 */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a76      	ldr	r2, [pc, #472]	; (80016b0 <HAL_TIM_Base_MspInit+0x258>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d134      	bne.n	8001544 <HAL_TIM_Base_MspInit+0xec>
  /* USER CODE END TIM4_MspInit 0 */
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a71      	ldr	r2, [pc, #452]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a6a      	ldr	r2, [pc, #424]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PB6     ------> TIM4_CH1
 8001512:	2340      	movs	r3, #64	; 0x40
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
    */
 8001516:	2302      	movs	r3, #2
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800151a:	2300      	movs	r3, #0
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2303      	movs	r3, #3
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2302      	movs	r3, #2
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800152a:	4619      	mov	r1, r3
 800152c:	4861      	ldr	r0, [pc, #388]	; (80016b4 <HAL_TIM_Base_MspInit+0x25c>)
 800152e:	f000 fb93 	bl	8001c58 <HAL_GPIO_Init>

 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	201e      	movs	r0, #30
 8001538:	f000 fb57 	bl	8001bea <HAL_NVIC_SetPriority>
    /* TIM4 interrupt Init */
 800153c:	201e      	movs	r0, #30
 800153e:	f000 fb70 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  }
 8001542:	e0ad      	b.n	80016a0 <HAL_TIM_Base_MspInit+0x248>
  /* USER CODE END TIM4_MspInit 1 */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a5b      	ldr	r2, [pc, #364]	; (80016b8 <HAL_TIM_Base_MspInit+0x260>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d134      	bne.n	80015b8 <HAL_TIM_Base_MspInit+0x160>
  /* USER CODE END TIM5_MspInit 0 */
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM5_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
    PA0-WKUP     ------> TIM5_CH1
 8001586:	2301      	movs	r3, #1
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
    */
 800158a:	2302      	movs	r3, #2
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158e:	2300      	movs	r3, #0
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2303      	movs	r3, #3
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2302      	movs	r3, #2
 8001598:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800159e:	4619      	mov	r1, r3
 80015a0:	4846      	ldr	r0, [pc, #280]	; (80016bc <HAL_TIM_Base_MspInit+0x264>)
 80015a2:	f000 fb59 	bl	8001c58 <HAL_GPIO_Init>

 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2032      	movs	r0, #50	; 0x32
 80015ac:	f000 fb1d 	bl	8001bea <HAL_NVIC_SetPriority>
    /* TIM5 interrupt Init */
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f000 fb36 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  }
 80015b6:	e073      	b.n	80016a0 <HAL_TIM_Base_MspInit+0x248>
  /* USER CODE END TIM5_MspInit 1 */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <HAL_TIM_Base_MspInit+0x268>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d134      	bne.n	800162c <HAL_TIM_Base_MspInit+0x1d4>
  /* USER CODE END TIM9_MspInit 0 */
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM9_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    PE5     ------> TIM9_CH1
 80015fa:	2320      	movs	r3, #32
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
    */
 80015fe:	2302      	movs	r3, #2
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2303      	movs	r3, #3
 8001608:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2303      	movs	r3, #3
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001612:	4619      	mov	r1, r3
 8001614:	482b      	ldr	r0, [pc, #172]	; (80016c4 <HAL_TIM_Base_MspInit+0x26c>)
 8001616:	f000 fb1f 	bl	8001c58 <HAL_GPIO_Init>

 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2018      	movs	r0, #24
 8001620:	f000 fae3 	bl	8001bea <HAL_NVIC_SetPriority>
    /* TIM9 interrupt Init */
 8001624:	2018      	movs	r0, #24
 8001626:	f000 fafc 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  }
 800162a:	e039      	b.n	80016a0 <HAL_TIM_Base_MspInit+0x248>
  /* USER CODE END TIM9_MspInit 1 */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_TIM_Base_MspInit+0x270>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d134      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x248>
  /* USER CODE END TIM12_MspInit 0 */
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_TIM_Base_MspInit+0x250>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM12_CH1
 800166e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
    */
 8001674:	2302      	movs	r3, #2
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2303      	movs	r3, #3
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2309      	movs	r3, #9
 8001682:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001688:	4619      	mov	r1, r3
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <HAL_TIM_Base_MspInit+0x25c>)
 800168c:	f000 fae4 	bl	8001c58 <HAL_GPIO_Init>

 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	202b      	movs	r0, #43	; 0x2b
 8001696:	f000 faa8 	bl	8001bea <HAL_NVIC_SetPriority>
    /* TIM12 interrupt Init */
 800169a:	202b      	movs	r0, #43	; 0x2b
 800169c:	f000 fac1 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  }
 80016a0:	bf00      	nop
 80016a2:	3748      	adds	r7, #72	; 0x48
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40000400 	.word	0x40000400
 80016b0:	40000800 	.word	0x40000800
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40000c00 	.word	0x40000c00
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40014000 	.word	0x40014000
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40001800 	.word	0x40001800

080016cc <HAL_TIM_MspPostInit>:

}

 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
{
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_TIM_MspPostInit+0xa4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d13b      	bne.n	8001766 <HAL_TIM_MspPostInit+0x9a>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_TIM_MspPostInit+0xa8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_TIM_MspPostInit+0xa8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_TIM_MspPostInit+0xa8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_TIM_MspPostInit+0xa8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_TIM_MspPostInit+0xa8>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_TIM_MspPostInit+0xa8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
 8001726:	23c0      	movs	r3, #192	; 0xc0
 8001728:	617b      	str	r3, [r7, #20]
    */
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2302      	movs	r3, #2
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <HAL_TIM_MspPostInit+0xac>)
 8001742:	f000 fa89 	bl	8001c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	2303      	movs	r3, #3
 8001748:	617b      	str	r3, [r7, #20]

 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2302      	movs	r3, #2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <HAL_TIM_MspPostInit+0xb0>)
 8001762:	f000 fa79 	bl	8001c58 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40000400 	.word	0x40000400
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_UART_MspInit>:
/**
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
{
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12c      	bne.n	80017fc <HAL_UART_MspInit+0x7c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART4)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
 80017da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017de:	617b      	str	r3, [r7, #20]
    */
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ec:	2308      	movs	r3, #8
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_UART_MspInit+0x8c>)
 80017f8:	f000 fa2e 	bl	8001c58 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004c00 	.word	0x40004c00
 8001808:	40023800 	.word	0x40023800
 800180c:	40020800 	.word	0x40020800

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 f8c6 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001872:	f001 fa7b 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000020c 	.word	0x2000020c

08001880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM2_IRQHandler+0x10>)
 8001886:	f001 fa71 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000028c 	.word	0x2000028c

08001894 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM4_IRQHandler+0x10>)
 800189a:	f001 fa67 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000018c 	.word	0x2000018c

080018a8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80018ae:	f001 fa5d 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002cc 	.word	0x200002cc

080018bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TIM5_IRQHandler+0x10>)
 80018c2:	f001 fa53 	bl	8002d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001cc 	.word	0x200001cc

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SystemInit+0x28>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <SystemInit+0x28>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SystemInit+0x28>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001900:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001902:	e003      	b.n	800190c <LoopCopyDataInit>

08001904 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001906:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001908:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800190a:	3104      	adds	r1, #4

0800190c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001910:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001912:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001914:	d3f6      	bcc.n	8001904 <CopyDataInit>
  ldr  r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001918:	e002      	b.n	8001920 <LoopFillZerobss>

0800191a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800191a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800191c:	f842 3b04 	str.w	r3, [r2], #4

08001920 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001924:	d3f9      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd3 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f002 ff09 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff f8b7 	bl	8000aa0 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001938:	080047d8 	.word	0x080047d8
  ldr  r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001940:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001944:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001948:	20000310 	.word	0x20000310

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f92b 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fcf8 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f943 	bl	8001c3e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f90b 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20000014 	.word	0x20000014
 80019f0:	20000010 	.word	0x20000010

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000014 	.word	0x20000014
 8001a18:	2000030c 	.word	0x2000030c

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000030c 	.word	0x2000030c

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff29 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff3e 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff8e 	bl	8001b28 <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff31 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e16b      	b.n	8001f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 815a 	bne.w	8001f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d00b      	beq.n	8001cb2 <HAL_GPIO_Init+0x5a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d130      	bne.n	8001d14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0xfc>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d123      	bne.n	8001d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80b4 	beq.w	8001f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfa:	4a5a      	ldr	r2, [pc, #360]	; (8001f64 <HAL_GPIO_Init+0x30c>)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <HAL_GPIO_Init+0x310>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_Init+0x226>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <HAL_GPIO_Init+0x314>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x222>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x21e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	; (8001f74 <HAL_GPIO_Init+0x31c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x21a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	; (8001f78 <HAL_GPIO_Init+0x320>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x216>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_GPIO_Init+0x328>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	; (8001f84 <HAL_GPIO_Init+0x32c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x20a>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e00e      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e62:	2308      	movs	r3, #8
 8001e64:	e00c      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_GPIO_Init+0x30c>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eec:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f ae90 	bls.w	8001c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40021c00 	.word	0x40021c00
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e11f      	b.n	8002212 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff f9ee 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002024:	f000 fd3e 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8002028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a7b      	ldr	r2, [pc, #492]	; (800221c <HAL_I2C_Init+0x25c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d807      	bhi.n	8002044 <HAL_I2C_Init+0x84>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a7a      	ldr	r2, [pc, #488]	; (8002220 <HAL_I2C_Init+0x260>)
 8002038:	4293      	cmp	r3, r2
 800203a:	bf94      	ite	ls
 800203c:	2301      	movls	r3, #1
 800203e:	2300      	movhi	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e006      	b.n	8002052 <HAL_I2C_Init+0x92>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a77      	ldr	r2, [pc, #476]	; (8002224 <HAL_I2C_Init+0x264>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0db      	b.n	8002212 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a72      	ldr	r2, [pc, #456]	; (8002228 <HAL_I2C_Init+0x268>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0c9b      	lsrs	r3, r3, #18
 8002064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a64      	ldr	r2, [pc, #400]	; (800221c <HAL_I2C_Init+0x25c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d802      	bhi.n	8002094 <HAL_I2C_Init+0xd4>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	e009      	b.n	80020a8 <HAL_I2C_Init+0xe8>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	4a63      	ldr	r2, [pc, #396]	; (800222c <HAL_I2C_Init+0x26c>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	3301      	adds	r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4956      	ldr	r1, [pc, #344]	; (800221c <HAL_I2C_Init+0x25c>)
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d80d      	bhi.n	80020e4 <HAL_I2C_Init+0x124>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e59      	subs	r1, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	bf38      	it	cc
 80020e0:	2304      	movcc	r3, #4
 80020e2:	e04f      	b.n	8002184 <HAL_I2C_Init+0x1c4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d111      	bne.n	8002110 <HAL_I2C_Init+0x150>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	440b      	add	r3, r1
 80020fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e012      	b.n	8002136 <HAL_I2C_Init+0x176>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e58      	subs	r0, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	0099      	lsls	r1, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Init+0x17e>
 800213a:	2301      	movs	r3, #1
 800213c:	e022      	b.n	8002184 <HAL_I2C_Init+0x1c4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10e      	bne.n	8002164 <HAL_I2C_Init+0x1a4>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1e58      	subs	r0, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	440b      	add	r3, r1
 8002154:	fbb0 f3f3 	udiv	r3, r0, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002162:	e00f      	b.n	8002184 <HAL_I2C_Init+0x1c4>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	6809      	ldr	r1, [r1, #0]
 8002188:	4313      	orrs	r3, r2
 800218a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6911      	ldr	r1, [r2, #16]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	000186a0 	.word	0x000186a0
 8002220:	001e847f 	.word	0x001e847f
 8002224:	003d08ff 	.word	0x003d08ff
 8002228:	431bde83 	.word	0x431bde83
 800222c:	10624dd3 	.word	0x10624dd3

08002230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e25b      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d075      	beq.n	800233a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	4ba3      	ldr	r3, [pc, #652]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d00c      	beq.n	8002274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4ba0      	ldr	r3, [pc, #640]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002262:	2b08      	cmp	r3, #8
 8002264:	d112      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002266:	4b9d      	ldr	r3, [pc, #628]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002272:	d10b      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	4b99      	ldr	r3, [pc, #612]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d05b      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d157      	bne.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e236      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x74>
 8002296:	4b91      	ldr	r3, [pc, #580]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a90      	ldr	r2, [pc, #576]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x98>
 80022ae:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a8a      	ldr	r2, [pc, #552]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a87      	ldr	r2, [pc, #540]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022c8:	4b84      	ldr	r3, [pc, #528]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a83      	ldr	r2, [pc, #524]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a80      	ldr	r2, [pc, #512]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fb98 	bl	8001a1c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fb94 	bl	8001a1c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e1fb      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fb84 	bl	8001a1c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fb80 	bl	8001a1c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1e7      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b6c      	ldr	r3, [pc, #432]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b62      	ldr	r3, [pc, #392]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1bb      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4952      	ldr	r1, [pc, #328]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <HAL_RCC_OscConfig+0x2b0>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff fb39 	bl	8001a1c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f7ff fb35 	bl	8001a1c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e19c      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4940      	ldr	r1, [pc, #256]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <HAL_RCC_OscConfig+0x2b0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff fb18 	bl	8001a1c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f0:	f7ff fb14 	bl	8001a1c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e17b      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d030      	beq.n	800247c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_RCC_OscConfig+0x2b4>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff faf8 	bl	8001a1c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff faf4 	bl	8001a1c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e15b      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x200>
 800244e:	e015      	b.n	800247c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_OscConfig+0x2b4>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff fae1 	bl	8001a1c <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245e:	f7ff fadd 	bl	8001a1c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e144      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a0 	beq.w	80025ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_OscConfig+0x2b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d121      	bne.n	800250a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_OscConfig+0x2b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_RCC_OscConfig+0x2b8>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7ff faa3 	bl	8001a1c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e011      	b.n	80024fe <HAL_RCC_OscConfig+0x2ce>
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470000 	.word	0x42470000
 80024e4:	42470e80 	.word	0x42470e80
 80024e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ec:	f7ff fa96 	bl	8001a1c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0fd      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCC_OscConfig+0x4d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x2f0>
 8002512:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a7c      	ldr	r2, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	e01c      	b.n	800255a <HAL_RCC_OscConfig+0x32a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x312>
 8002528:	4b77      	ldr	r3, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a76      	ldr	r2, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b74      	ldr	r3, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a73      	ldr	r2, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x32a>
 8002542:	4b71      	ldr	r3, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a70      	ldr	r2, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a6d      	ldr	r2, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7ff fa5b 	bl	8001a1c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7ff fa57 	bl	8001a1c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0bc      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ee      	beq.n	800256a <HAL_RCC_OscConfig+0x33a>
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7ff fa45 	bl	8001a1c <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7ff fa41 	bl	8001a1c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0a6      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ee      	bne.n	8002596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025be:	4b52      	ldr	r3, [pc, #328]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a51      	ldr	r2, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8092 	beq.w	80026f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d4:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d05c      	beq.n	800269a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d141      	bne.n	800266c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b48      	ldr	r3, [pc, #288]	; (800270c <HAL_RCC_OscConfig+0x4dc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7ff fa15 	bl	8001a1c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff fa11 	bl	8001a1c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e078      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	019b      	lsls	r3, r3, #6
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	4933      	ldr	r1, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_RCC_OscConfig+0x4dc>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff f9ea 	bl	8001a1c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7ff f9e6 	bl	8001a1c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e04d      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x41c>
 800266a:	e045      	b.n	80026f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x4dc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff f9d3 	bl	8001a1c <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff f9cf 	bl	8001a1c <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e036      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x44a>
 8002698:	e02e      	b.n	80026f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e029      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_RCC_OscConfig+0x4d8>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d115      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40007000 	.word	0x40007000
 8002708:	40023800 	.word	0x40023800
 800270c:	42470060 	.word	0x42470060

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff f90c 	bl	8001a1c <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7ff f908 	bl	8001a1c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	fa21 f303 	lsr.w	r3, r1, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f86c 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080047b0 	.word	0x080047b0
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	20000010 	.word	0x20000010

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d007      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x32>
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d008      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x38>
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 80b4 	bne.w	8002a70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800290a:	60bb      	str	r3, [r7, #8]
       break;
 800290c:	e0b3      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290e:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002910:	60bb      	str	r3, [r7, #8]
      break;
 8002912:	e0b0      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002914:	4b5a      	ldr	r3, [pc, #360]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800291c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291e:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d04a      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	f04f 0400 	mov.w	r4, #0
 8002934:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	ea03 0501 	and.w	r5, r3, r1
 8002940:	ea04 0602 	and.w	r6, r4, r2
 8002944:	4629      	mov	r1, r5
 8002946:	4632      	mov	r2, r6
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	f04f 0400 	mov.w	r4, #0
 8002950:	0154      	lsls	r4, r2, #5
 8002952:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002956:	014b      	lsls	r3, r1, #5
 8002958:	4619      	mov	r1, r3
 800295a:	4622      	mov	r2, r4
 800295c:	1b49      	subs	r1, r1, r5
 800295e:	eb62 0206 	sbc.w	r2, r2, r6
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	f04f 0400 	mov.w	r4, #0
 800296a:	0194      	lsls	r4, r2, #6
 800296c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002970:	018b      	lsls	r3, r1, #6
 8002972:	1a5b      	subs	r3, r3, r1
 8002974:	eb64 0402 	sbc.w	r4, r4, r2
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	00e2      	lsls	r2, r4, #3
 8002982:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002986:	00d9      	lsls	r1, r3, #3
 8002988:	460b      	mov	r3, r1
 800298a:	4614      	mov	r4, r2
 800298c:	195b      	adds	r3, r3, r5
 800298e:	eb44 0406 	adc.w	r4, r4, r6
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	0262      	lsls	r2, r4, #9
 800299c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029a0:	0259      	lsls	r1, r3, #9
 80029a2:	460b      	mov	r3, r1
 80029a4:	4614      	mov	r4, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	4621      	mov	r1, r4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f04f 0400 	mov.w	r4, #0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4623      	mov	r3, r4
 80029b4:	f7fd fc08 	bl	80001c8 <__aeabi_uldivmod>
 80029b8:	4603      	mov	r3, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e049      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	ea03 0501 	and.w	r5, r3, r1
 80029d6:	ea04 0602 	and.w	r6, r4, r2
 80029da:	4629      	mov	r1, r5
 80029dc:	4632      	mov	r2, r6
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	0154      	lsls	r4, r2, #5
 80029e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029ec:	014b      	lsls	r3, r1, #5
 80029ee:	4619      	mov	r1, r3
 80029f0:	4622      	mov	r2, r4
 80029f2:	1b49      	subs	r1, r1, r5
 80029f4:	eb62 0206 	sbc.w	r2, r2, r6
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f04f 0400 	mov.w	r4, #0
 8002a00:	0194      	lsls	r4, r2, #6
 8002a02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a06:	018b      	lsls	r3, r1, #6
 8002a08:	1a5b      	subs	r3, r3, r1
 8002a0a:	eb64 0402 	sbc.w	r4, r4, r2
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	00e2      	lsls	r2, r4, #3
 8002a18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a1c:	00d9      	lsls	r1, r3, #3
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	195b      	adds	r3, r3, r5
 8002a24:	eb44 0406 	adc.w	r4, r4, r6
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	02a2      	lsls	r2, r4, #10
 8002a32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a36:	0299      	lsls	r1, r3, #10
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	4621      	mov	r1, r4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4623      	mov	r3, r4
 8002a4a:	f7fd fbbd 	bl	80001c8 <__aeabi_uldivmod>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	460c      	mov	r4, r1
 8002a52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	60bb      	str	r3, [r7, #8]
      break;
 8002a6e:	e002      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a72:	60bb      	str	r3, [r7, #8]
      break;
 8002a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a76:	68bb      	ldr	r3, [r7, #8]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa8:	f7ff fff0 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4a03      	ldr	r2, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	080047c0 	.word	0x080047c0

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad0:	f7ff ffdc 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0b5b      	lsrs	r3, r3, #13
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	080047c0 	.word	0x080047c0

08002af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01d      	b.n	8002b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe fc9c 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 fcea 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e01d      	b.n	8002b98 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f815 	bl	8002ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 fcbf 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f93a 	bl	8003e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_TIM_PWM_Start+0x74>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_TIM_PWM_Start+0x2c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_TIM_PWM_Start+0x78>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x30>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_TIM_PWM_Start+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40010400 	.word	0x40010400

08002c30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01d      	b.n	8002c7e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f815 	bl	8002c86 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fc4c 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d841      	bhi.n	8002d30 <HAL_TIM_IC_Start_IT+0x94>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_TIM_IC_Start_IT+0x18>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002d31 	.word	0x08002d31
 8002cbc:	08002d31 	.word	0x08002d31
 8002cc0:	08002d31 	.word	0x08002d31
 8002cc4:	08002cfb 	.word	0x08002cfb
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002d31 	.word	0x08002d31
 8002cd4:	08002d0d 	.word	0x08002d0d
 8002cd8:	08002d31 	.word	0x08002d31
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d1f 	.word	0x08002d1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0202 	orr.w	r2, r2, #2
 8002cf6:	60da      	str	r2, [r3, #12]
      break;
 8002cf8:	e01b      	b.n	8002d32 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	60da      	str	r2, [r3, #12]
      break;
 8002d0a:	e012      	b.n	8002d32 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	60da      	str	r2, [r3, #12]
      break;
 8002d1c:	e009      	b.n	8002d32 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0210 	orr.w	r2, r2, #16
 8002d2c:	60da      	str	r2, [r3, #12]
      break;
 8002d2e:	e000      	b.n	8002d32 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002d30:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 f880 	bl	8003e40 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d007      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0202 	mvn.w	r2, #2
 8002d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fdc0 	bl	8000934 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fb8a 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fb91 	bl	80034e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0204 	mvn.w	r2, #4
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fd96 	bl	8000934 <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fb60 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fb67 	bl	80034e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0208 	mvn.w	r2, #8
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2204      	movs	r2, #4
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fd6c 	bl	8000934 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb36 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb3d 	bl	80034e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0210 	mvn.w	r2, #16
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fd42 	bl	8000934 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fb0c 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb13 	bl	80034e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0201 	mvn.w	r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fae6 	bl	80034bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f001 f83e 	bl	8003f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b40      	cmp	r3, #64	; 0x40
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fad8 	bl	80034f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0220 	mvn.w	r2, #32
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 f808 	bl	8003f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e08a      	b.n	80030ac <HAL_TIM_IC_ConfigChannel+0x130>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f000 fd7c 	bl	8003ab8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 020c 	bic.w	r2, r2, #12
 8002fce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
 8002fe2:	e05a      	b.n	800309a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d11c      	bne.n	8003024 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f000 fe00 	bl	8003bfe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800300c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6999      	ldr	r1, [r3, #24]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
 8003022:	e03a      	b.n	800309a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11b      	bne.n	8003062 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f000 fe4d 	bl	8003cd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 020c 	bic.w	r2, r2, #12
 800304c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	61da      	str	r2, [r3, #28]
 8003060:	e01b      	b.n	800309a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f000 fe6d 	bl	8003d50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003084:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0b4      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x184>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	f200 809f 	bhi.w	8003224 <HAL_TIM_PWM_ConfigChannel+0x170>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003225 	.word	0x08003225
 80030f4:	08003225 	.word	0x08003225
 80030f8:	08003225 	.word	0x08003225
 80030fc:	08003161 	.word	0x08003161
 8003100:	08003225 	.word	0x08003225
 8003104:	08003225 	.word	0x08003225
 8003108:	08003225 	.word	0x08003225
 800310c:	080031a3 	.word	0x080031a3
 8003110:	08003225 	.word	0x08003225
 8003114:	08003225 	.word	0x08003225
 8003118:	08003225 	.word	0x08003225
 800311c:	080031e3 	.word	0x080031e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa90 	bl	800364c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
      break;
 800315e:	e062      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fae0 	bl	800372c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]
      break;
 80031a0:	e041      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fb35 	bl	8003818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0208 	orr.w	r2, r2, #8
 80031bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
      break;
 80031e0:	e021      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fb89 	bl	8003900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
      break;
 8003222:	e000      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003224:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e0a6      	b.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d067      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0x120>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d80b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x6c>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d073      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x140>
 8003298:	2b10      	cmp	r3, #16
 800329a:	d802      	bhi.n	80032a2 <HAL_TIM_ConfigClockSource+0x62>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d06f      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032a0:	e078      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d06c      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x140>
 80032a6:	2b30      	cmp	r3, #48	; 0x30
 80032a8:	d06a      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032aa:	e073      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d00d      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0x8c>
 80032b0:	2b70      	cmp	r3, #112	; 0x70
 80032b2:	d804      	bhi.n	80032be <HAL_TIM_ConfigClockSource+0x7e>
 80032b4:	2b50      	cmp	r3, #80	; 0x50
 80032b6:	d033      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xe0>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d041      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80032bc:	e06a      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	d066      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x152>
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d017      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80032ca:	e063      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f000 fd90 	bl	8003e00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
      break;
 80032f8:	e04c      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f000 fd79 	bl	8003e00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800331c:	609a      	str	r2, [r3, #8]
      break;
 800331e:	e039      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	461a      	mov	r2, r3
 800332e:	f000 fc37 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2150      	movs	r1, #80	; 0x50
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fd46 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 800333e:	e029      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	461a      	mov	r2, r3
 800334e:	f000 fc93 	bl	8003c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2160      	movs	r1, #96	; 0x60
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fd36 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 800335e:	e019      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	461a      	mov	r2, r3
 800336e:	f000 fc17 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fd26 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 800337e:	e009      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fd1d 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003390:	e000      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e031      	b.n	800342a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fae7 	bl	80039ac <TIM_SlaveTimer_SetConfig>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e018      	b.n	800342a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003406:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003416:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d831      	bhi.n	80034ac <HAL_TIM_ReadCapturedValue+0x78>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_TIM_ReadCapturedValue+0x1c>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003485 	.word	0x08003485
 8003454:	080034ad 	.word	0x080034ad
 8003458:	080034ad 	.word	0x080034ad
 800345c:	080034ad 	.word	0x080034ad
 8003460:	0800348f 	.word	0x0800348f
 8003464:	080034ad 	.word	0x080034ad
 8003468:	080034ad 	.word	0x080034ad
 800346c:	080034ad 	.word	0x080034ad
 8003470:	08003499 	.word	0x08003499
 8003474:	080034ad 	.word	0x080034ad
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034ad 	.word	0x080034ad
 8003480:	080034a3 	.word	0x080034a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	60fb      	str	r3, [r7, #12]

      break;
 800348c:	e00f      	b.n	80034ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	60fb      	str	r3, [r7, #12]

      break;
 8003496:	e00a      	b.n	80034ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	60fb      	str	r3, [r7, #12]

      break;
 80034a0:	e005      	b.n	80034ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	60fb      	str	r3, [r7, #12]

      break;
 80034aa:	e000      	b.n	80034ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034ac:	bf00      	nop
  }

  return tmpreg;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d027      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d023      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0x124>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d017      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <TIM_Base_SetConfig+0x128>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <TIM_Base_SetConfig+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0x130>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0x134>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <TIM_Base_SetConfig+0x138>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <TIM_Base_SetConfig+0x13c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <TIM_Base_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40010400 	.word	0x40010400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800
 8003640:	40001800 	.word	0x40001800
 8003644:	40001c00 	.word	0x40001c00
 8003648:	40002000 	.word	0x40002000

0800364c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0201 	bic.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 0302 	bic.w	r3, r3, #2
 8003694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a20      	ldr	r2, [pc, #128]	; (8003724 <TIM_OC1_SetConfig+0xd8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC1_SetConfig+0x64>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <TIM_OC1_SetConfig+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10c      	bne.n	80036ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0308 	bic.w	r3, r3, #8
 80036b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <TIM_OC1_SetConfig+0xd8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d003      	beq.n	80036da <TIM_OC1_SetConfig+0x8e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a14      	ldr	r2, [pc, #80]	; (8003728 <TIM_OC1_SetConfig+0xdc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d111      	bne.n	80036fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40010000 	.word	0x40010000
 8003728:	40010400 	.word	0x40010400

0800372c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0320 	bic.w	r3, r3, #32
 8003776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <TIM_OC2_SetConfig+0xe4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC2_SetConfig+0x68>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <TIM_OC2_SetConfig+0xe8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10d      	bne.n	80037b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a17      	ldr	r2, [pc, #92]	; (8003810 <TIM_OC2_SetConfig+0xe4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC2_SetConfig+0x94>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <TIM_OC2_SetConfig+0xe8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d113      	bne.n	80037e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40010400 	.word	0x40010400

08003818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <TIM_OC3_SetConfig+0xe0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_OC3_SetConfig+0x66>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <TIM_OC3_SetConfig+0xe4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10d      	bne.n	800389a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC3_SetConfig+0xe0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC3_SetConfig+0x92>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC3_SetConfig+0xe4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400

08003900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <TIM_OC4_SetConfig+0xa4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC4_SetConfig+0x68>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <TIM_OC4_SetConfig+0xa8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010400 	.word	0x40010400

080039ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0307 	bic.w	r3, r3, #7
 80039d6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b30      	cmp	r3, #48	; 0x30
 80039f0:	d05c      	beq.n	8003aac <TIM_SlaveTimer_SetConfig+0x100>
 80039f2:	2b30      	cmp	r3, #48	; 0x30
 80039f4:	d806      	bhi.n	8003a04 <TIM_SlaveTimer_SetConfig+0x58>
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d058      	beq.n	8003aac <TIM_SlaveTimer_SetConfig+0x100>
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d056      	beq.n	8003aac <TIM_SlaveTimer_SetConfig+0x100>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d054      	beq.n	8003aac <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003a02:	e054      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d03d      	beq.n	8003a84 <TIM_SlaveTimer_SetConfig+0xd8>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d802      	bhi.n	8003a12 <TIM_SlaveTimer_SetConfig+0x66>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d010      	beq.n	8003a32 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003a10:	e04d      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003a12:	2b60      	cmp	r3, #96	; 0x60
 8003a14:	d040      	beq.n	8003a98 <TIM_SlaveTimer_SetConfig+0xec>
 8003a16:	2b70      	cmp	r3, #112	; 0x70
 8003a18:	d000      	beq.n	8003a1c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003a1a:	e048      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68d9      	ldr	r1, [r3, #12]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f000 f9e8 	bl	8003e00 <TIM_ETR_SetConfig>
      break;
 8003a30:	e03d      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d101      	bne.n	8003a3e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e038      	b.n	8003ab0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a64:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
      break;
 8003a82:	e014      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f000 f885 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      break;
 8003a96:	e00a      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f000 f8e7 	bl	8003c78 <TIM_TI2_ConfigInputStage>
      break;
 8003aaa:	e000      	b.n	8003aae <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8003aac:	bf00      	nop
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <TIM_TI1_SetConfig+0xcc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01b      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d017      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <TIM_TI1_SetConfig+0xd0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <TIM_TI1_SetConfig+0xd4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00f      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <TIM_TI1_SetConfig+0xd8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <TIM_TI1_SetConfig+0xdc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <TIM_TI1_SetConfig+0xe0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_TI1_SetConfig+0x66>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <TIM_TI1_SetConfig+0xe4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <TIM_TI1_SetConfig+0x6a>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <TIM_TI1_SetConfig+0x6c>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e003      	b.n	8003b42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f023 030a 	bic.w	r3, r3, #10
 8003b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 030a 	and.w	r3, r3, #10
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40000c00 	.word	0x40000c00
 8003b94:	40010400 	.word	0x40010400
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40001800 	.word	0x40001800

08003ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 030a 	bic.w	r3, r3, #10
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b087      	sub	sp, #28
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 0210 	bic.w	r2, r3, #16
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f023 0210 	bic.w	r2, r3, #16
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	031b      	lsls	r3, r3, #12
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 0303 	bic.w	r3, r3, #3
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	621a      	str	r2, [r3, #32]
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	031b      	lsls	r3, r3, #12
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	031b      	lsls	r3, r3, #12
 8003da8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f043 0307 	orr.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2201      	movs	r2, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e05a      	b.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d01d      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d10c      	bne.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40001800 	.word	0x40001800

08003f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e03f      	b.n	800403e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fbd4 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f829 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800408a:	f023 030c 	bic.w	r3, r3, #12
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	430b      	orrs	r3, r1
 8004096:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b6:	f040 818b 	bne.w	80043d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4ac1      	ldr	r2, [pc, #772]	; (80043c4 <UART_SetConfig+0x37c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d005      	beq.n	80040d0 <UART_SetConfig+0x88>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4abf      	ldr	r2, [pc, #764]	; (80043c8 <UART_SetConfig+0x380>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	f040 80bd 	bne.w	800424a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7fe fcfc 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 80040d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	461d      	mov	r5, r3
 80040da:	f04f 0600 	mov.w	r6, #0
 80040de:	46a8      	mov	r8, r5
 80040e0:	46b1      	mov	r9, r6
 80040e2:	eb18 0308 	adds.w	r3, r8, r8
 80040e6:	eb49 0409 	adc.w	r4, r9, r9
 80040ea:	4698      	mov	r8, r3
 80040ec:	46a1      	mov	r9, r4
 80040ee:	eb18 0805 	adds.w	r8, r8, r5
 80040f2:	eb49 0906 	adc.w	r9, r9, r6
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004102:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004106:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800410a:	4688      	mov	r8, r1
 800410c:	4691      	mov	r9, r2
 800410e:	eb18 0005 	adds.w	r0, r8, r5
 8004112:	eb49 0106 	adc.w	r1, r9, r6
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	461d      	mov	r5, r3
 800411c:	f04f 0600 	mov.w	r6, #0
 8004120:	196b      	adds	r3, r5, r5
 8004122:	eb46 0406 	adc.w	r4, r6, r6
 8004126:	461a      	mov	r2, r3
 8004128:	4623      	mov	r3, r4
 800412a:	f7fc f84d 	bl	80001c8 <__aeabi_uldivmod>
 800412e:	4603      	mov	r3, r0
 8004130:	460c      	mov	r4, r1
 8004132:	461a      	mov	r2, r3
 8004134:	4ba5      	ldr	r3, [pc, #660]	; (80043cc <UART_SetConfig+0x384>)
 8004136:	fba3 2302 	umull	r2, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	461d      	mov	r5, r3
 8004144:	f04f 0600 	mov.w	r6, #0
 8004148:	46a9      	mov	r9, r5
 800414a:	46b2      	mov	sl, r6
 800414c:	eb19 0309 	adds.w	r3, r9, r9
 8004150:	eb4a 040a 	adc.w	r4, sl, sl
 8004154:	4699      	mov	r9, r3
 8004156:	46a2      	mov	sl, r4
 8004158:	eb19 0905 	adds.w	r9, r9, r5
 800415c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004170:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004174:	4689      	mov	r9, r1
 8004176:	4692      	mov	sl, r2
 8004178:	eb19 0005 	adds.w	r0, r9, r5
 800417c:	eb4a 0106 	adc.w	r1, sl, r6
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	461d      	mov	r5, r3
 8004186:	f04f 0600 	mov.w	r6, #0
 800418a:	196b      	adds	r3, r5, r5
 800418c:	eb46 0406 	adc.w	r4, r6, r6
 8004190:	461a      	mov	r2, r3
 8004192:	4623      	mov	r3, r4
 8004194:	f7fc f818 	bl	80001c8 <__aeabi_uldivmod>
 8004198:	4603      	mov	r3, r0
 800419a:	460c      	mov	r4, r1
 800419c:	461a      	mov	r2, r3
 800419e:	4b8b      	ldr	r3, [pc, #556]	; (80043cc <UART_SetConfig+0x384>)
 80041a0:	fba3 1302 	umull	r1, r3, r3, r2
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	2164      	movs	r1, #100	; 0x64
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	3332      	adds	r3, #50	; 0x32
 80041b2:	4a86      	ldr	r2, [pc, #536]	; (80043cc <UART_SetConfig+0x384>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041c0:	4498      	add	r8, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	461d      	mov	r5, r3
 80041c6:	f04f 0600 	mov.w	r6, #0
 80041ca:	46a9      	mov	r9, r5
 80041cc:	46b2      	mov	sl, r6
 80041ce:	eb19 0309 	adds.w	r3, r9, r9
 80041d2:	eb4a 040a 	adc.w	r4, sl, sl
 80041d6:	4699      	mov	r9, r3
 80041d8:	46a2      	mov	sl, r4
 80041da:	eb19 0905 	adds.w	r9, r9, r5
 80041de:	eb4a 0a06 	adc.w	sl, sl, r6
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041f6:	4689      	mov	r9, r1
 80041f8:	4692      	mov	sl, r2
 80041fa:	eb19 0005 	adds.w	r0, r9, r5
 80041fe:	eb4a 0106 	adc.w	r1, sl, r6
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	461d      	mov	r5, r3
 8004208:	f04f 0600 	mov.w	r6, #0
 800420c:	196b      	adds	r3, r5, r5
 800420e:	eb46 0406 	adc.w	r4, r6, r6
 8004212:	461a      	mov	r2, r3
 8004214:	4623      	mov	r3, r4
 8004216:	f7fb ffd7 	bl	80001c8 <__aeabi_uldivmod>
 800421a:	4603      	mov	r3, r0
 800421c:	460c      	mov	r4, r1
 800421e:	461a      	mov	r2, r3
 8004220:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <UART_SetConfig+0x384>)
 8004222:	fba3 1302 	umull	r1, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2164      	movs	r1, #100	; 0x64
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	3332      	adds	r3, #50	; 0x32
 8004234:	4a65      	ldr	r2, [pc, #404]	; (80043cc <UART_SetConfig+0x384>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	f003 0207 	and.w	r2, r3, #7
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4442      	add	r2, r8
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	e26f      	b.n	800472a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800424a:	f7fe fc2b 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 800424e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	461d      	mov	r5, r3
 8004254:	f04f 0600 	mov.w	r6, #0
 8004258:	46a8      	mov	r8, r5
 800425a:	46b1      	mov	r9, r6
 800425c:	eb18 0308 	adds.w	r3, r8, r8
 8004260:	eb49 0409 	adc.w	r4, r9, r9
 8004264:	4698      	mov	r8, r3
 8004266:	46a1      	mov	r9, r4
 8004268:	eb18 0805 	adds.w	r8, r8, r5
 800426c:	eb49 0906 	adc.w	r9, r9, r6
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800427c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004280:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004284:	4688      	mov	r8, r1
 8004286:	4691      	mov	r9, r2
 8004288:	eb18 0005 	adds.w	r0, r8, r5
 800428c:	eb49 0106 	adc.w	r1, r9, r6
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	461d      	mov	r5, r3
 8004296:	f04f 0600 	mov.w	r6, #0
 800429a:	196b      	adds	r3, r5, r5
 800429c:	eb46 0406 	adc.w	r4, r6, r6
 80042a0:	461a      	mov	r2, r3
 80042a2:	4623      	mov	r3, r4
 80042a4:	f7fb ff90 	bl	80001c8 <__aeabi_uldivmod>
 80042a8:	4603      	mov	r3, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <UART_SetConfig+0x384>)
 80042b0:	fba3 2302 	umull	r2, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	461d      	mov	r5, r3
 80042be:	f04f 0600 	mov.w	r6, #0
 80042c2:	46a9      	mov	r9, r5
 80042c4:	46b2      	mov	sl, r6
 80042c6:	eb19 0309 	adds.w	r3, r9, r9
 80042ca:	eb4a 040a 	adc.w	r4, sl, sl
 80042ce:	4699      	mov	r9, r3
 80042d0:	46a2      	mov	sl, r4
 80042d2:	eb19 0905 	adds.w	r9, r9, r5
 80042d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ee:	4689      	mov	r9, r1
 80042f0:	4692      	mov	sl, r2
 80042f2:	eb19 0005 	adds.w	r0, r9, r5
 80042f6:	eb4a 0106 	adc.w	r1, sl, r6
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	461d      	mov	r5, r3
 8004300:	f04f 0600 	mov.w	r6, #0
 8004304:	196b      	adds	r3, r5, r5
 8004306:	eb46 0406 	adc.w	r4, r6, r6
 800430a:	461a      	mov	r2, r3
 800430c:	4623      	mov	r3, r4
 800430e:	f7fb ff5b 	bl	80001c8 <__aeabi_uldivmod>
 8004312:	4603      	mov	r3, r0
 8004314:	460c      	mov	r4, r1
 8004316:	461a      	mov	r2, r3
 8004318:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <UART_SetConfig+0x384>)
 800431a:	fba3 1302 	umull	r1, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2164      	movs	r1, #100	; 0x64
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <UART_SetConfig+0x384>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800433a:	4498      	add	r8, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	461d      	mov	r5, r3
 8004340:	f04f 0600 	mov.w	r6, #0
 8004344:	46a9      	mov	r9, r5
 8004346:	46b2      	mov	sl, r6
 8004348:	eb19 0309 	adds.w	r3, r9, r9
 800434c:	eb4a 040a 	adc.w	r4, sl, sl
 8004350:	4699      	mov	r9, r3
 8004352:	46a2      	mov	sl, r4
 8004354:	eb19 0905 	adds.w	r9, r9, r5
 8004358:	eb4a 0a06 	adc.w	sl, sl, r6
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004368:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800436c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004370:	4689      	mov	r9, r1
 8004372:	4692      	mov	sl, r2
 8004374:	eb19 0005 	adds.w	r0, r9, r5
 8004378:	eb4a 0106 	adc.w	r1, sl, r6
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	461d      	mov	r5, r3
 8004382:	f04f 0600 	mov.w	r6, #0
 8004386:	196b      	adds	r3, r5, r5
 8004388:	eb46 0406 	adc.w	r4, r6, r6
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	f7fb ff1a 	bl	80001c8 <__aeabi_uldivmod>
 8004394:	4603      	mov	r3, r0
 8004396:	460c      	mov	r4, r1
 8004398:	461a      	mov	r2, r3
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <UART_SetConfig+0x384>)
 800439c:	fba3 1302 	umull	r1, r3, r3, r2
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	2164      	movs	r1, #100	; 0x64
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	3332      	adds	r3, #50	; 0x32
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <UART_SetConfig+0x384>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	f003 0207 	and.w	r2, r3, #7
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4442      	add	r2, r8
 80043c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043c2:	e1b2      	b.n	800472a <UART_SetConfig+0x6e2>
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4ad7      	ldr	r2, [pc, #860]	; (8004734 <UART_SetConfig+0x6ec>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d005      	beq.n	80043e6 <UART_SetConfig+0x39e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4ad6      	ldr	r2, [pc, #856]	; (8004738 <UART_SetConfig+0x6f0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	f040 80d1 	bne.w	8004588 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e6:	f7fe fb71 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 80043ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	469a      	mov	sl, r3
 80043f0:	f04f 0b00 	mov.w	fp, #0
 80043f4:	46d0      	mov	r8, sl
 80043f6:	46d9      	mov	r9, fp
 80043f8:	eb18 0308 	adds.w	r3, r8, r8
 80043fc:	eb49 0409 	adc.w	r4, r9, r9
 8004400:	4698      	mov	r8, r3
 8004402:	46a1      	mov	r9, r4
 8004404:	eb18 080a 	adds.w	r8, r8, sl
 8004408:	eb49 090b 	adc.w	r9, r9, fp
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004418:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800441c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004420:	4688      	mov	r8, r1
 8004422:	4691      	mov	r9, r2
 8004424:	eb1a 0508 	adds.w	r5, sl, r8
 8004428:	eb4b 0609 	adc.w	r6, fp, r9
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4619      	mov	r1, r3
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	f04f 0400 	mov.w	r4, #0
 800443e:	0094      	lsls	r4, r2, #2
 8004440:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004444:	008b      	lsls	r3, r1, #2
 8004446:	461a      	mov	r2, r3
 8004448:	4623      	mov	r3, r4
 800444a:	4628      	mov	r0, r5
 800444c:	4631      	mov	r1, r6
 800444e:	f7fb febb 	bl	80001c8 <__aeabi_uldivmod>
 8004452:	4603      	mov	r3, r0
 8004454:	460c      	mov	r4, r1
 8004456:	461a      	mov	r2, r3
 8004458:	4bb8      	ldr	r3, [pc, #736]	; (800473c <UART_SetConfig+0x6f4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	469b      	mov	fp, r3
 8004468:	f04f 0c00 	mov.w	ip, #0
 800446c:	46d9      	mov	r9, fp
 800446e:	46e2      	mov	sl, ip
 8004470:	eb19 0309 	adds.w	r3, r9, r9
 8004474:	eb4a 040a 	adc.w	r4, sl, sl
 8004478:	4699      	mov	r9, r3
 800447a:	46a2      	mov	sl, r4
 800447c:	eb19 090b 	adds.w	r9, r9, fp
 8004480:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004498:	4689      	mov	r9, r1
 800449a:	4692      	mov	sl, r2
 800449c:	eb1b 0509 	adds.w	r5, fp, r9
 80044a0:	eb4c 060a 	adc.w	r6, ip, sl
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4619      	mov	r1, r3
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	f04f 0400 	mov.w	r4, #0
 80044b6:	0094      	lsls	r4, r2, #2
 80044b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044bc:	008b      	lsls	r3, r1, #2
 80044be:	461a      	mov	r2, r3
 80044c0:	4623      	mov	r3, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	4631      	mov	r1, r6
 80044c6:	f7fb fe7f 	bl	80001c8 <__aeabi_uldivmod>
 80044ca:	4603      	mov	r3, r0
 80044cc:	460c      	mov	r4, r1
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b9a      	ldr	r3, [pc, #616]	; (800473c <UART_SetConfig+0x6f4>)
 80044d2:	fba3 1302 	umull	r1, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2164      	movs	r1, #100	; 0x64
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	3332      	adds	r3, #50	; 0x32
 80044e4:	4a95      	ldr	r2, [pc, #596]	; (800473c <UART_SetConfig+0x6f4>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	4498      	add	r8, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	469b      	mov	fp, r3
 80044f6:	f04f 0c00 	mov.w	ip, #0
 80044fa:	46d9      	mov	r9, fp
 80044fc:	46e2      	mov	sl, ip
 80044fe:	eb19 0309 	adds.w	r3, r9, r9
 8004502:	eb4a 040a 	adc.w	r4, sl, sl
 8004506:	4699      	mov	r9, r3
 8004508:	46a2      	mov	sl, r4
 800450a:	eb19 090b 	adds.w	r9, r9, fp
 800450e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004526:	4689      	mov	r9, r1
 8004528:	4692      	mov	sl, r2
 800452a:	eb1b 0509 	adds.w	r5, fp, r9
 800452e:	eb4c 060a 	adc.w	r6, ip, sl
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4619      	mov	r1, r3
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	f04f 0400 	mov.w	r4, #0
 8004544:	0094      	lsls	r4, r2, #2
 8004546:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800454a:	008b      	lsls	r3, r1, #2
 800454c:	461a      	mov	r2, r3
 800454e:	4623      	mov	r3, r4
 8004550:	4628      	mov	r0, r5
 8004552:	4631      	mov	r1, r6
 8004554:	f7fb fe38 	bl	80001c8 <__aeabi_uldivmod>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	461a      	mov	r2, r3
 800455e:	4b77      	ldr	r3, [pc, #476]	; (800473c <UART_SetConfig+0x6f4>)
 8004560:	fba3 1302 	umull	r1, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	2164      	movs	r1, #100	; 0x64
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	3332      	adds	r3, #50	; 0x32
 8004572:	4a72      	ldr	r2, [pc, #456]	; (800473c <UART_SetConfig+0x6f4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4442      	add	r2, r8
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	e0d0      	b.n	800472a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fa8c 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 800458c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	469a      	mov	sl, r3
 8004592:	f04f 0b00 	mov.w	fp, #0
 8004596:	46d0      	mov	r8, sl
 8004598:	46d9      	mov	r9, fp
 800459a:	eb18 0308 	adds.w	r3, r8, r8
 800459e:	eb49 0409 	adc.w	r4, r9, r9
 80045a2:	4698      	mov	r8, r3
 80045a4:	46a1      	mov	r9, r4
 80045a6:	eb18 080a 	adds.w	r8, r8, sl
 80045aa:	eb49 090b 	adc.w	r9, r9, fp
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045c2:	4688      	mov	r8, r1
 80045c4:	4691      	mov	r9, r2
 80045c6:	eb1a 0508 	adds.w	r5, sl, r8
 80045ca:	eb4b 0609 	adc.w	r6, fp, r9
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	0094      	lsls	r4, r2, #2
 80045e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045e6:	008b      	lsls	r3, r1, #2
 80045e8:	461a      	mov	r2, r3
 80045ea:	4623      	mov	r3, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	4631      	mov	r1, r6
 80045f0:	f7fb fdea 	bl	80001c8 <__aeabi_uldivmod>
 80045f4:	4603      	mov	r3, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b50      	ldr	r3, [pc, #320]	; (800473c <UART_SetConfig+0x6f4>)
 80045fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	469b      	mov	fp, r3
 800460a:	f04f 0c00 	mov.w	ip, #0
 800460e:	46d9      	mov	r9, fp
 8004610:	46e2      	mov	sl, ip
 8004612:	eb19 0309 	adds.w	r3, r9, r9
 8004616:	eb4a 040a 	adc.w	r4, sl, sl
 800461a:	4699      	mov	r9, r3
 800461c:	46a2      	mov	sl, r4
 800461e:	eb19 090b 	adds.w	r9, r9, fp
 8004622:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004632:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004636:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800463a:	4689      	mov	r9, r1
 800463c:	4692      	mov	sl, r2
 800463e:	eb1b 0509 	adds.w	r5, fp, r9
 8004642:	eb4c 060a 	adc.w	r6, ip, sl
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	0094      	lsls	r4, r2, #2
 800465a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	461a      	mov	r2, r3
 8004662:	4623      	mov	r3, r4
 8004664:	4628      	mov	r0, r5
 8004666:	4631      	mov	r1, r6
 8004668:	f7fb fdae 	bl	80001c8 <__aeabi_uldivmod>
 800466c:	4603      	mov	r3, r0
 800466e:	460c      	mov	r4, r1
 8004670:	461a      	mov	r2, r3
 8004672:	4b32      	ldr	r3, [pc, #200]	; (800473c <UART_SetConfig+0x6f4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a2d      	ldr	r2, [pc, #180]	; (800473c <UART_SetConfig+0x6f4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004692:	4498      	add	r8, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	469b      	mov	fp, r3
 8004698:	f04f 0c00 	mov.w	ip, #0
 800469c:	46d9      	mov	r9, fp
 800469e:	46e2      	mov	sl, ip
 80046a0:	eb19 0309 	adds.w	r3, r9, r9
 80046a4:	eb4a 040a 	adc.w	r4, sl, sl
 80046a8:	4699      	mov	r9, r3
 80046aa:	46a2      	mov	sl, r4
 80046ac:	eb19 090b 	adds.w	r9, r9, fp
 80046b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046b4:	f04f 0100 	mov.w	r1, #0
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046c8:	4689      	mov	r9, r1
 80046ca:	4692      	mov	sl, r2
 80046cc:	eb1b 0509 	adds.w	r5, fp, r9
 80046d0:	eb4c 060a 	adc.w	r6, ip, sl
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4619      	mov	r1, r3
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	0094      	lsls	r4, r2, #2
 80046e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ec:	008b      	lsls	r3, r1, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	4623      	mov	r3, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	4631      	mov	r1, r6
 80046f6:	f7fb fd67 	bl	80001c8 <__aeabi_uldivmod>
 80046fa:	4603      	mov	r3, r0
 80046fc:	460c      	mov	r4, r1
 80046fe:	461a      	mov	r2, r3
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <UART_SetConfig+0x6f4>)
 8004702:	fba3 1302 	umull	r1, r3, r3, r2
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2164      	movs	r1, #100	; 0x64
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	3332      	adds	r3, #50	; 0x32
 8004714:	4a09      	ldr	r2, [pc, #36]	; (800473c <UART_SetConfig+0x6f4>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4442      	add	r2, r8
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	e7ff      	b.n	800472a <UART_SetConfig+0x6e2>
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004734:	40011000 	.word	0x40011000
 8004738:	40011400 	.word	0x40011400
 800473c:	51eb851f 	.word	0x51eb851f

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4e0d      	ldr	r6, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1ba4      	subs	r4, r4, r6
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2500      	movs	r5, #0
 800474c:	42a5      	cmp	r5, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4e0b      	ldr	r6, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f000 f820 	bl	8004798 <_init>
 8004758:	1ba4      	subs	r4, r4, r6
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2500      	movs	r5, #0
 800475e:	42a5      	cmp	r5, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004768:	4798      	blx	r3
 800476a:	3501      	adds	r5, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004772:	4798      	blx	r3
 8004774:	3501      	adds	r5, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	080047d0 	.word	0x080047d0
 800477c:	080047d0 	.word	0x080047d0
 8004780:	080047d0 	.word	0x080047d0
 8004784:	080047d4 	.word	0x080047d4

08004788 <memset>:
 8004788:	4402      	add	r2, r0
 800478a:	4603      	mov	r3, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
